{"version":3,"file":"optimist.esm.js","sources":["../src/tx/errors.ts","../src/utils/deserializeAccount.ts"],"sourcesContent":["import { SystemProgram, TransactionResponse } from '@solana/web3.js';\n\ntype CustomInstructionError = [index: number, code: { Custom: number }];\ninterface ITransactionError {\n  InstructionError: CustomInstructionError;\n}\n\nexport class TransactionError extends Error {\n  constructor(m: string, public txid?: string, public code?: number) {\n    super(m);\n\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, Error.prototype);\n  }\n}\nexport const UNKNOWN_ERROR = 'Unknown error, visit the explorer';\n\nexport async function parseErrorForTransaction(tx: TransactionResponse): Promise<{ message: string; code?: number }> {\n  // Easy case, logMessages has an obvious error message. From dapp-scaffold\n  const errors: string[] = [];\n  if (tx?.meta && tx.meta.logMessages) {\n    tx.meta.logMessages.forEach((log) => {\n      const regex = /Error: (.*)/gm;\n      let m;\n      while ((m = regex.exec(log)) !== null) {\n        // This is necessary to avoid infinite loops with zero-width matches\n        if (m.index === regex.lastIndex) {\n          regex.lastIndex++;\n        }\n\n        if (m.length > 1) {\n          errors.push(m[1]);\n        }\n      }\n    });\n  }\n\n  if (errors.length > 0) {\n    return { message: errors.join(',') };\n  }\n\n  // Harder case, we need to dig for a custom code\n  const transactionError = tx?.meta?.err;\n  const transactionErrorString = JSON.stringify(transactionError);\n  let errorCode;\n\n  if (transactionError && typeof transactionError !== 'string') {\n    const instructionError = (transactionError as ITransactionError).InstructionError;\n\n    const [index, { Custom }] = instructionError;\n    errorCode = Custom;\n\n    // We have found what caused the error so we can map it\n    const innerInstructions = tx?.meta?.innerInstructions;\n    if (!innerInstructions || index >= innerInstructions.length) {\n      if (tx?.meta && tx.meta.logMessages && isSystemProgram(tx.meta?.logMessages)) {\n        return getSystemProgramError(instructionError);\n      }\n\n      return { message: transactionErrorString, code: errorCode };\n    }\n    const innerInstruction = innerInstructions.find((innerIx) => innerIx.index === index);\n    if (!innerInstruction) {\n      return { message: transactionErrorString, code: errorCode };\n    }\n\n    const programIdIndex = innerInstruction.instructions[innerInstruction.instructions.length - 1].programIdIndex;\n    const programId = tx.transaction.message.accountKeys[programIdIndex];\n    if (programId.equals(SystemProgram.programId)) {\n      return getSystemProgramError(instructionError);\n    }\n  }\n\n  return { message: typeof transactionError === 'string' ? transactionError : UNKNOWN_ERROR, code: errorCode };\n}\n\nfunction isSystemProgram(logMessages: String[]) {\n  logMessages.forEach((log) => {\n    if (log.includes('Program 11111111111111111111111111111111 invoke')) return true;\n  });\n\n  return false;\n}\n\nasync function getSystemProgramError(instructionError: CustomInstructionError) {\n  const code = instructionError[1].Custom;\n\n  let message = '';\n  switch (code) {\n    // https://github.com/solana-labs/solana/blob/22a18a68e3ee68ae013d647e62e12128433d7230/sdk/program/src/system_instruction.rs#L12-L26\n    // TODO: Do we need to translate all error codes.\n    case 0:\n      message = 'An account with the same address already exists';\n    case 1:\n      message = 'The account does not have enough SOL to perform the operation';\n    default:\n      message = UNKNOWN_ERROR;\n  }\n\n  return {\n    code,\n    message,\n  };\n}\n","import { AccountInfo, AccountLayout, u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nexport const deserializeAccount = (data: Buffer | undefined): AccountInfo | undefined => {\n  if (data == undefined || data.length == 0) {\n    return undefined;\n  }\n\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n"],"names":["TransactionError","Error","constructor","m","txid","code","Object","setPrototypeOf","prototype","UNKNOWN_ERROR","parseErrorForTransaction","tx","errors","meta","logMessages","forEach","log","regex","exec","index","lastIndex","length","push","message","join","transactionError","err","transactionErrorString","JSON","stringify","errorCode","instructionError","InstructionError","Custom","innerInstructions","isSystemProgram","getSystemProgramError","innerInstruction","find","innerIx","programIdIndex","instructions","programId","transaction","accountKeys","equals","SystemProgram","includes","deserializeAccount","data","undefined","accountInfo","AccountLayout","decode","mint","PublicKey","owner","amount","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority"],"mappings":"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"}