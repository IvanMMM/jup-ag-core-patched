{"version":3,"file":"core.cjs.production.min.js","sources":["../src/lib/idl/jupiter.ts","../src/constants.ts","../src/utils/layout.ts","../src/lib/cropper/swapLayout.ts","../src/lib/jupiterInstruction.ts","../src/lib/saber/saberAddDecimalsAmm.ts","../src/utils/getTwoPermutations.ts","../src/utils/chunks.ts","../src/utils/chunkedGetMultipleAccountInfos.ts","../src/lib/amm.ts","../src/lib/raydium/pools.ts","../src/lib/raydium/raydiumAmm.ts","../src/lib/serum/market.ts","../src/lib/serum/serumAmm.ts","../src/lib/split-trade/splitTradeAmm.ts","../src/lib/market.ts","../src/lib/saber/saberAmm.ts","../src/lib/aldrin/percentage.ts","../src/lib/aldrin/poolState.ts","../src/lib/aldrin/aldrinAmm.ts","../src/lib/spl-token-swap/splTokenSwapPools.ts","../src/lib/spl-token-swap/tokenSwapLayout.ts","../src/lib/spl-token-swap/splTokenSwapAmm.ts","../src/lib/mercurial/swapLayout.ts","../src/lib/mercurial/mercurialAmm.ts","../src/lib/cropper/cropperAmm.ts","../src/lib/crema/swapLayout.ts","../src/lib/crema/cremaAmm.ts","../src/lib/sencha/swapLayout.ts","../src/lib/sencha/senchaAmm.ts","../src/lib/lifinity/lifinityAmm.ts","../src/lib/lifinity/swapLayout.ts","../src/lib/whirlpool/whirlpoolAmm.ts","../src/lib/cykura/solanaTickDataProvider.ts","../src/lib/cykura/cykuraAmm.ts","../src/lib/marinade/helpers.ts","../src/lib/marinade/marinadeAmm.ts","../src/lib/routes.ts","../src/utils/token.ts","../src/utils/instruction.ts","../src/lib/routeToInstructions.ts","../src/lib/serum/openOrders.ts","../src/lib/fee.ts","../src/utils/TransactionBuilder.ts","../src/utils/Owner.ts","../src/utils/wait.ts","../src/utils/transactionHelpers.ts","../src/utils/cartesian.ts","../src/lib/computeRouteInfos.ts","../src/utils/tx/errors.ts","../src/lib/jupiter.ts","../src/lib/ammFactory.ts","../src/lib/getTopTokens.ts"],"sourcesContent":["export type Jupiter = {\n  version: '0.1.0';\n  name: 'jupiter';\n  instructions: [\n    {\n      name: 'mercurialExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'clock';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feesTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsDeposit';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'saberAddDecimalsWithdraw';\n      accounts: [\n        {\n          name: 'addDecimalsProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapper';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'wrapperUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'owner';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userUnderlyingTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userWrappedTokens';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'senchaExchange';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'inputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputUserAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputFeesAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'serumSwap';\n      accounts: [\n        {\n          name: 'market';\n          accounts: [\n            {\n              name: 'market';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'openOrders';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'requestQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'eventQueue';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'bids';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'asks';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'coinVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'pcVault';\n              isMut: true;\n              isSigner: false;\n            },\n            {\n              name: 'vaultSigner';\n              isMut: false;\n              isSigner: false;\n            },\n          ];\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'orderPayerTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coinWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'pcWallet';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'tokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'stepTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cropperTokenSwap';\n      accounts: [\n        {\n          name: 'tokenSwapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swap';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'swapState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'source';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolFee';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammTargetOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'raydiumSwapV2';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammId';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'ammAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'ammOpenOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolCoinTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolPcTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumProgramId';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'serumMarket';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumBids';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumAsks';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumEventQueue';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumCoinVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumPcVaultAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'serumVaultSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceOwner';\n          isMut: false;\n          isSigner: true;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'aldrinV2Swap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'baseTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'quoteTokenVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feePoolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'userBaseTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userQuoteTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'curve';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'side';\n          type: {\n            defined: 'Side';\n          };\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cremaTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSigner';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolSourceTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolTicksAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'walletAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'lifinityTokenSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'authority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'amm';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'sourceInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'destinationInfo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapSource';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'swapDestination';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'poolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'feeAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'pythPcAccount';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'configAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'cykuraSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'signer';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'factoryState';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'poolState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'inputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'outputVault';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'lastObservationState';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'coreProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwap';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'whirlpoolSwapExactOutput';\n      accounts: [\n        {\n          name: 'swapProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'whirlpool';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultA';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenOwnerAccountB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenVaultB';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray0';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray1';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tickArray2';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'oracle';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'outAmount';\n          type: 'u64';\n        },\n        {\n          name: 'maximumInAmount';\n          type: 'u64';\n        },\n        {\n          name: 'aToB';\n          type: 'bool';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceDeposit';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLegAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'reservePda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'transferFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'mintTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMintAuthority';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tempWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'wsolMint';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake';\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'state';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'msolMint';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolSolLegPda';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'liqPoolMsolLeg';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'treasuryMsolAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFrom';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'getMsolFromAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'transferSolTo';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'userWsolTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'inAmount';\n          type: {\n            option: 'u64';\n          };\n        },\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'riskCheckAndFee';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userDestinationTokenAccount';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'userTransferAuthority';\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: 'tokenProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: 'minimumOutAmount';\n          type: 'u64';\n        },\n        {\n          name: 'platformFeeBps';\n          type: 'u8';\n        },\n      ];\n    },\n    {\n      name: 'initializeTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'setTokenLedger';\n      accounts: [\n        {\n          name: 'tokenLedger';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'tokenAccount';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: 'createOpenOrders';\n      accounts: [\n        {\n          name: 'openOrders';\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: 'payer';\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: 'dexProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'systemProgram';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'rent';\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: 'market';\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n  ];\n  accounts: [\n    {\n      name: 'tokenLedger';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokenAccount';\n            type: 'publicKey';\n          },\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'tokens';\n            type: 'u64';\n          },\n          {\n            name: 'minTokens';\n            type: 'u64';\n          },\n          {\n            name: 'side';\n            type: {\n              defined: 'Side';\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amountIn';\n            type: 'u64';\n          },\n          {\n            name: 'minimumAmountOut';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Deposit';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'lamports';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'LiquidUnstake';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'msolAmount';\n            type: 'u64';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Swap';\n      type: {\n        kind: 'struct';\n        fields: [\n          {\n            name: 'amount';\n            type: 'u64';\n          },\n          {\n            name: 'otherAmountThreshold';\n            type: 'u64';\n          },\n          {\n            name: 'sqrtPriceLimit';\n            type: 'u128';\n          },\n          {\n            name: 'amountSpecifiedIsInput';\n            type: 'bool';\n          },\n          {\n            name: 'aToB';\n            type: 'bool';\n          },\n        ];\n      };\n    },\n    {\n      name: 'SwapInstrution';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Swap';\n            fields: [\n              {\n                defined: 'Swap';\n              },\n            ];\n          },\n        ];\n      };\n    },\n    {\n      name: 'Side';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'Bid';\n          },\n          {\n            name: 'Ask';\n          },\n        ];\n      };\n    },\n    {\n      name: 'Direction';\n      type: {\n        kind: 'enum';\n        variants: [\n          {\n            name: 'LeftToRight';\n          },\n          {\n            name: 'RightToLeft';\n          },\n        ];\n      };\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: 'SlippageToleranceExceeded';\n      msg: 'Slippage tolerance exceeded';\n    },\n    {\n      code: 6001;\n      name: 'InvalidTokenLedger';\n      msg: 'Invalid token ledger';\n    },\n    {\n      code: 6002;\n      name: 'MissingTokenLedger';\n      msg: 'Missing token ledger';\n    },\n    {\n      code: 6003;\n      name: 'MissingMercurialExchangeTokenAccount';\n      msg: 'Missing mercurial exchange token account';\n    },\n    {\n      code: 6004;\n      name: 'LedgerTokenAccountDoesNotMatch';\n      msg: 'Ledger token account does not match';\n    },\n    {\n      code: 6005;\n      name: 'MissingPlatformFeeAccount';\n      msg: 'Missing platform fee account';\n    },\n    {\n      code: 6006;\n      name: 'InvalidCalculation';\n      msg: 'Invalid calculation';\n    },\n  ];\n};\n\nexport const IDL: Jupiter = {\n  version: '0.1.0',\n  name: 'jupiter',\n  instructions: [\n    {\n      name: 'mercurialExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'clock',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feesTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsDeposit',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'saberAddDecimalsWithdraw',\n      accounts: [\n        {\n          name: 'addDecimalsProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapper',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'wrapperUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'owner',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userUnderlyingTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userWrappedTokens',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'senchaExchange',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'inputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputUserAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputFeesAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'serumSwap',\n      accounts: [\n        {\n          name: 'market',\n          accounts: [\n            {\n              name: 'market',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'openOrders',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'requestQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'eventQueue',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'bids',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'asks',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'coinVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'pcVault',\n              isMut: true,\n              isSigner: false,\n            },\n            {\n              name: 'vaultSigner',\n              isMut: false,\n              isSigner: false,\n            },\n          ],\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'orderPayerTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coinWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'pcWallet',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'tokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'stepTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cropperTokenSwap',\n      accounts: [\n        {\n          name: 'tokenSwapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swap',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'swapState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'source',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolFee',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammTargetOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'raydiumSwapV2',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammId',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'ammAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'ammOpenOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolCoinTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolPcTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumProgramId',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'serumMarket',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumBids',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumAsks',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumEventQueue',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumCoinVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumPcVaultAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'serumVaultSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceOwner',\n          isMut: false,\n          isSigner: true,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'aldrinV2Swap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'baseTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'quoteTokenVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feePoolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'userBaseTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userQuoteTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'curve',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'side',\n          type: {\n            defined: 'Side',\n          },\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cremaTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSigner',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolSourceTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolTicksAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'walletAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'lifinityTokenSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'authority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'amm',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'sourceInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'destinationInfo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapSource',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'swapDestination',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'poolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'feeAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'pythPcAccount',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'configAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'cykuraSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'signer',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'factoryState',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'poolState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'inputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'outputVault',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'lastObservationState',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'coreProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwap',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'whirlpoolSwapExactOutput',\n      accounts: [\n        {\n          name: 'swapProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'whirlpool',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultA',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenOwnerAccountB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenVaultB',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray0',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray1',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tickArray2',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'oracle',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'outAmount',\n          type: 'u64',\n        },\n        {\n          name: 'maximumInAmount',\n          type: 'u64',\n        },\n        {\n          name: 'aToB',\n          type: 'bool',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceDeposit',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLegAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'reservePda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'transferFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'mintTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMintAuthority',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tempWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'wsolMint',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'marinadeFinanceLiquidUnstake',\n      accounts: [\n        {\n          name: 'marinadeFinanceProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'state',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'msolMint',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolSolLegPda',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'liqPoolMsolLeg',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'treasuryMsolAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFrom',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'getMsolFromAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'transferSolTo',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'userWsolTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'inAmount',\n          type: {\n            option: 'u64',\n          },\n        },\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'riskCheckAndFee',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userDestinationTokenAccount',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'userTransferAuthority',\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: 'tokenProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: 'minimumOutAmount',\n          type: 'u64',\n        },\n        {\n          name: 'platformFeeBps',\n          type: 'u8',\n        },\n      ],\n    },\n    {\n      name: 'initializeTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'setTokenLedger',\n      accounts: [\n        {\n          name: 'tokenLedger',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'tokenAccount',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: 'createOpenOrders',\n      accounts: [\n        {\n          name: 'openOrders',\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: 'payer',\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: 'dexProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'systemProgram',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'rent',\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: 'market',\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n  ],\n  accounts: [\n    {\n      name: 'tokenLedger',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokenAccount',\n            type: 'publicKey',\n          },\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'tokens',\n            type: 'u64',\n          },\n          {\n            name: 'minTokens',\n            type: 'u64',\n          },\n          {\n            name: 'side',\n            type: {\n              defined: 'Side',\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amountIn',\n            type: 'u64',\n          },\n          {\n            name: 'minimumAmountOut',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Deposit',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'lamports',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'LiquidUnstake',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'msolAmount',\n            type: 'u64',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Swap',\n      type: {\n        kind: 'struct',\n        fields: [\n          {\n            name: 'amount',\n            type: 'u64',\n          },\n          {\n            name: 'otherAmountThreshold',\n            type: 'u64',\n          },\n          {\n            name: 'sqrtPriceLimit',\n            type: 'u128',\n          },\n          {\n            name: 'amountSpecifiedIsInput',\n            type: 'bool',\n          },\n          {\n            name: 'aToB',\n            type: 'bool',\n          },\n        ],\n      },\n    },\n    {\n      name: 'SwapInstrution',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Swap',\n            fields: [\n              {\n                defined: 'Swap',\n              },\n            ],\n          },\n        ],\n      },\n    },\n    {\n      name: 'Side',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'Bid',\n          },\n          {\n            name: 'Ask',\n          },\n        ],\n      },\n    },\n    {\n      name: 'Direction',\n      type: {\n        kind: 'enum',\n        variants: [\n          {\n            name: 'LeftToRight',\n          },\n          {\n            name: 'RightToLeft',\n          },\n        ],\n      },\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: 'SlippageToleranceExceeded',\n      msg: 'Slippage tolerance exceeded',\n    },\n    {\n      code: 6001,\n      name: 'InvalidTokenLedger',\n      msg: 'Invalid token ledger',\n    },\n    {\n      code: 6002,\n      name: 'MissingTokenLedger',\n      msg: 'Missing token ledger',\n    },\n    {\n      code: 6003,\n      name: 'MissingMercurialExchangeTokenAccount',\n      msg: 'Missing mercurial exchange token account',\n    },\n    {\n      code: 6004,\n      name: 'LedgerTokenAccountDoesNotMatch',\n      msg: 'Ledger token account does not match',\n    },\n    {\n      code: 6005,\n      name: 'MissingPlatformFeeAccount',\n      msg: 'Missing platform fee account',\n    },\n    {\n      code: 6006,\n      name: 'InvalidCalculation',\n      msg: 'Invalid calculation',\n    },\n  ],\n};\n","import { Cluster, PublicKey } from '@solana/web3.js';\nimport { IDL } from './lib/idl/jupiter';\n\nexport const WRAPPED_SOL_MINT = new PublicKey('So11111111111111111111111111111111111111112');\n\nexport const MAINNET_SERUM_DEX_PROGRAM = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n\nexport const DEVNET_SERUM_DEX_PROGRAM = new PublicKey('DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY');\n\nexport const MARKETS_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/markets/cache/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/markets?v=3',\n  testnet: 'https://api.jup.ag/api/markets/cache/devnet',\n};\n\nexport const TOKEN_LIST_URL: Record<Cluster, string> = {\n  devnet: 'https://api.jup.ag/api/tokens/devnet',\n  testnet: 'https://api.jup.ag/api/markets/devnet',\n  'mainnet-beta': 'https://cache.jup.ag/tokens',\n};\n\nexport const LAMPORTS_PER_SIGNATURE = 5000;\n\nexport const RAYDIUM_AMM_V4_PROGRAM_ID = new PublicKey('675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8');\n\nexport const ALDRIN_SWAP_PROGRAM_ID = new PublicKey('AMM55ShdkoGRB5jVYPjWziwk8m5MpwyDgsMWHaMSQWH6');\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/f93fe3f2d847d79d8ddff507d8d4f62fd803421b/src/v2.json\nexport const ALDRIN_SWAP_V2_PROGRAM_ID = new PublicKey('CURVGoZn8zycx6FXwwevgBTB2gVvdbGTEpvMJDbgs2t4');\n\nexport const SABER_ADD_DECIMALS_PROGRAM_ID = new PublicKey('DecZY86MU5Gj7kppfUCEmd4LbXXuyZH1yHaP2NTqdiZB');\n\nexport const CROPPER_PROGRAM_ID = new PublicKey('CTMAxxk34HjKWxQ3QLZK1HpaLXmBveao3ESePXbiyfzh');\n\nexport const SENCHA_PROGRAM_ID = new PublicKey('SCHAtsf8mbjyjiv4LkhLKutTf6JnZAbdJKFkXQNMFHZ');\n\nexport const LIFINITY_PROGRAM_ID = new PublicKey('EewxydAPCCVuNEyrVN68PuSYdQ7wKn27V9Gjeoi8dy3S');\n\nexport const CREMA_PROGRAM_ID = new PublicKey('6MLxLqiXaaSUpkgMnWDTuejNZEz3kE7k2woyHGVFw319');\n\nexport const JUPITER_WALLET = new PublicKey('BUX7s2ef2htTGb2KKoPHWkmzxPj4nTWMWRgs5CSbQxf9');\n\nexport const MERCURIAL_SWAP_PROGRAM_ID = new PublicKey('MERLuDFBMmsHnsBPZw2sDQZHvXFMwp8EdjudcU2HKky');\n\nexport const WHIRLPOOL_PROGRAM_ID = new PublicKey('whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc');\n\nexport const CYKURA_PROGRAM_ID = new PublicKey('cysPXAjehMpVKUapzbMCCnpFxUFFryEWEaLgnb9NrR8');\n\nexport const CYKURA_FACTORY_STATE_ADDRESS = new PublicKey('DBsMwKfeoUHhxMi9x6wd2AsT12UwUCssjNbUzu1aKgqj');\n\nexport const MARINADE_PROGRAM_ID = new PublicKey('MarBmsSgKXdrN1egZf5sqe1TMai9K1rChYNDJgjq7aD');\n\nexport const STEPN_PROGRAM_ID = new PublicKey('Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j');\n\n/** Tokens which are fundamental pivot in certain protocols */\nexport const SWAP_PROTOCOL_TOKENS = [\n  'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT', // STEP\n  'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz', // CRP\n];\n\ninterface ErrorDetails {\n  code: number;\n  name: string;\n  msg: string;\n}\n\ntype JUPITER_ERROR_TYPES =\n  | 'TransactionNotConfirmed'\n  | 'BalancesNotExtractedProperly'\n  | typeof IDL.errors[number]['name'];\n\nexport const JUPITER_ERRORS: Record<JUPITER_ERROR_TYPES, ErrorDetails> = Object.freeze({\n  TransactionNotConfirmed: {\n    code: 7000, // a code that is not in the list of errors\n    name: 'TransactionNotConfirmed',\n    msg: 'Transaction was not confirmed',\n  },\n  BalancesNotExtractedProperly: {\n    code: 7001, // a code that is not in the list of errors\n    name: 'BalancesNotExtractedProperly',\n    msg: 'Balances cannot be extracted properly',\n  },\n  ...IDL.errors.reduce((accErrors, error) => {\n    return { ...accErrors, [error.name]: error };\n  }, {} as Record<typeof IDL.errors[number]['name'], ErrorDetails>),\n});\n\nexport const IS_DEV = process.env.NODE_ENV === 'development';\n\nexport const MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS = 100;\n","import { blob, Layout, Structure, u8, union } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\n\nclass PublicKeyLayout extends Layout<PublicKey> {\n  private layout: Layout<any>;\n\n  constructor(property?: string) {\n    const layout = blob(32);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): PublicKey {\n    return new PublicKey(this.layout.decode(b, offset));\n  }\n\n  encode(src: PublicKey, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toBuffer(), b, offset);\n  }\n}\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string) => new PublicKeyLayout(property);\n\nclass U64Layout extends Layout<u64> {\n  private layout: Layout<any>;\n\n  constructor(span = 8, property: string) {\n    const layout = blob(span);\n    super(layout.span, property);\n    this.layout = layout;\n  }\n\n  getSpan(b: Uint8Array, offset?: number) {\n    return this.layout.getSpan(b, offset);\n  }\n\n  decode(b: Uint8Array, offset?: number): u64 {\n    const bn = new u64(this.layout.decode(b, offset), 10, 'le');\n\n    return bn;\n  }\n\n  encode(src: u64, b: Uint8Array, offset: number): number {\n    return this.layout.encode(src.toArrayLike(Buffer, 'le', this.layout.span), b, offset);\n  }\n}\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string) => new U64Layout(8, property);\n\nexport const uint128 = (property: string) => new U64Layout(16, property);\n\nexport const rustEnum = (variants: Structure<any>[], property: string) => {\n  // @ts-expect-error TODO: fix this\n  const unionLayout = union(u8(), u8(), property);\n  variants.forEach((variant, index) => unionLayout.addVariant(index, variant, variant.property || ''));\n  return unionLayout;\n};\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { blob, struct, u8 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface CropperTokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\nexport const CropperTokenSwapLayout = struct<CropperTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  publicKey('ammId'),\n  publicKey('serumProgramId'),\n  publicKey('serumMarket'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAAccount'),\n  publicKey('tokenBAccount'),\n  publicKey('poolMint'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n]);\n\ninterface CropperStateLayout {\n  isInitialized: number;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: u64;\n  fixedFeeNumerator: u64;\n  feeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst CropperStateLayout = struct<CropperStateLayout>([\n  u8('isInitialized'),\n  publicKey('stateOwner'),\n  publicKey('feeOwner'),\n  uint64('initialSupply'),\n  uint64('returnFeeNumerator'),\n  uint64('fixedFeeNumerator'),\n  uint64('feeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\nexport interface CropperState {\n  isInitialized: boolean;\n  stateOwner: PublicKey;\n  feeOwner: PublicKey;\n  initialSupply: u64;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nexport interface CropperPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  poolMint: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n}\n\n// This seems to be hardcoded.\nexport const CROPPER_STATE_ADDRESS = new PublicKey('3hsU1VgsBgBgz5jWiqdw9RfGU6TpWdCmdah1oi4kF3Tq');\n\nexport const accountInfoToCropperPoolState = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): CropperPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = CropperTokenSwapLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: decoded.ammId,\n    serumProgramId: decoded.serumProgramId,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.tokenAAccount,\n    tokenBAccount: decoded.tokenBAccount,\n    serumMarket: decoded.serumMarket,\n    poolMint: decoded.poolMint,\n    mintA: decoded.mintA,\n    mintB: decoded.mintB,\n  };\n};\n\nexport const stateAccountInfoToCropperState = (accountInfo: AccountInfo<Buffer>): CropperState => {\n  const decoded = CropperStateLayout.decode(accountInfo.data);\n\n  return {\n    isInitialized: Boolean(decoded.isInitialized),\n    stateOwner: decoded.stateOwner,\n    feeOwner: decoded.feeOwner,\n    initialSupply: decoded.initialSupply,\n    returnFeeNumerator: decoded.returnFeeNumerator.toNumber(),\n    fixedFeeNumerator: decoded.fixedFeeNumerator.toNumber(),\n    feeDenominator: decoded.feeDenominator.toNumber(),\n    curveType: decoded.curveType,\n    curveParameters: decoded.curveParameters,\n  };\n};\n","import type { Provider } from '@project-serum/anchor';\nimport { Program } from '@project-serum/anchor';\nimport { createProgramAddressSync, findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market } from '@project-serum/serum';\nimport { NATIVE_MINT, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { AccountMeta, PublicKey, SystemProgram, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { Jupiter as JupiterIDL, IDL } from './idl/jupiter';\nimport type { RaydiumAmm } from './raydium/raydiumAmm';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport {\n  ALDRIN_SWAP_PROGRAM_ID,\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  SABER_ADD_DECIMALS_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  CYKURA_FACTORY_STATE_ADDRESS,\n  WHIRLPOOL_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { AldrinPoolState } from './aldrin/poolState';\nimport type { TokenSwapState } from './spl-token-swap/tokenSwapLayout';\nimport { PlatformFee } from './types';\nimport type { AddDecimals } from './saber/saberAddDecimalsAmm';\nimport { CropperPoolState, CROPPER_STATE_ADDRESS } from './cropper/swapLayout';\nimport { SenchaPoolState } from './sencha/swapLayout';\nimport { CremaPoolState } from './crema/swapLayout';\nimport { MercurialSwapLayoutState } from './mercurial/swapLayout';\nimport { LifinitySwapLayoutState } from './lifinity/swapLayout';\nimport { MarinadeStateResponse } from './marinade/marinade-state.types';\nimport JSBI from 'jsbi';\n\n// Side rust enum used for the program's RPC API.\nconst Side = {\n  Bid: { bid: {} },\n  Ask: { ask: {} },\n};\n\nexport const JUPITER_PROGRAM_ID_STAGING = new PublicKey('JUPSjgjMFjU4453KMgxhqVmzep6W352bQpE4RsNqXAx');\nexport const JUPITER_PROGRAM_ID_PRODUCTION = new PublicKey('JUP3c2Uh3WA4Ng34tw6kPd2G4C5BB21Xo36Je1s32Ph');\n\nconst JUPITER_PROGRAM_ID = JUPITER_PROGRAM_ID_PRODUCTION; // JUPITER_PROGRAM_ID_PRODUCTION;\n\nconst JUPITER_PROGRAM = new Program<JupiterIDL>(IDL, JUPITER_PROGRAM_ID, {} as Provider);\n\nexport const PRODUCTION_TOKEN_LEDGERS = [\n  new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3'),\n  new PublicKey('5ZZ7w2C1c348nQm4zaYgrgb8gfyyqQNzH61zPwGvEQK9'),\n  new PublicKey('H4K65yLyYqVsDxgNCVGqK7MqrpKFLZjmqf95ZvmfyVDx'),\n  new PublicKey('HE4STzYv5dzw2G374ynt4EYvzuKLG41P2xnNffzpdWnG'),\n  new PublicKey('3HmXTbZf6G2oEjN3bPreZmF7YGLbbEXFkgAbVFPaimwU'),\n  new PublicKey('CUNMrNvGNh1aWR6cVzAQekdsW2dfacnQicyfvgvrN5ap'),\n  new PublicKey('6Q6vMHsUFA7kuwdkG9vm7gByMfk151Z9eMSwE14fHcrG'),\n];\nexport const STAGING_TOKEN_LEDGERS = [new PublicKey('755CiAfB63jK8DTZSM38ZRBTjf1inGM4QfLJTfpPM9x3')];\n\nexport const TOKEN_LEDGER: PublicKey =\n  PRODUCTION_TOKEN_LEDGERS[Math.floor(Math.random() * PRODUCTION_TOKEN_LEDGERS.length)];\n\ntype CreateSwapInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  inAmount: BN | null;\n  minimumOutAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\ntype CreateSwapExactOutputInstructionParams = {\n  sourceMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  outAmount: BN;\n  maximumInAmount: BN;\n  tokenLedger: PublicKey;\n  platformFee?: PlatformFee;\n};\n\nfunction stableSwapNPoolIntoMercurialExchange(\n  swayLayout: MercurialSwapLayoutState,\n  sourceTokenAccount: PublicKey,\n  destinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  return {\n    swapProgram: MERCURIAL_SWAP_PROGRAM_ID,\n    swapState: swayLayout.ammId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    poolAuthority: swayLayout.authority,\n    userTransferAuthority: userTransferAuthority,\n\n    sourceTokenAccount,\n    destinationTokenAccount,\n  };\n}\n\nfunction raydiumAmmToRaydiumSwap(\n  raydiumAmm: RaydiumAmm,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const [ammAuthority] = findProgramAddressSync(\n    [new Uint8Array(Buffer.from('amm authority'.replace('\\u00A0', ' '), 'utf-8'))],\n    RAYDIUM_AMM_V4_PROGRAM_ID,\n  );\n\n  if (!raydiumAmm.serumMarketKeys) {\n    throw new Error('RaydiumAmm is missing serumMarketKeys');\n  }\n\n  return {\n    swapProgram: RAYDIUM_AMM_V4_PROGRAM_ID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    ammId: raydiumAmm.ammId,\n    ammAuthority,\n    ammOpenOrders: raydiumAmm.ammOpenOrders,\n    poolCoinTokenAccount: raydiumAmm.poolCoinTokenAccount,\n    poolPcTokenAccount: raydiumAmm.poolPcTokenAccount,\n    serumProgramId: raydiumAmm.serumProgramId,\n    serumMarket: raydiumAmm.serumMarket,\n    serumBids: raydiumAmm.serumMarketKeys.serumBids,\n    serumAsks: raydiumAmm.serumMarketKeys.serumAsks,\n    serumEventQueue: raydiumAmm.serumMarketKeys.serumEventQueue,\n    serumCoinVaultAccount: raydiumAmm.serumMarketKeys.serumCoinVaultAccount,\n    serumPcVaultAccount: raydiumAmm.serumMarketKeys.serumPcVaultAccount,\n    serumVaultSigner: raydiumAmm.serumMarketKeys.serumVaultSigner,\n    userSourceTokenAccount: userSourceTokenAccount,\n    userDestinationTokenAccount: userDestinationTokenAccount,\n    userSourceOwner: userTransferAuthority,\n  };\n}\n\nfunction marketIntoSerumSwap(\n  market: Market,\n  openOrdersAddress: PublicKey,\n  orderPayerTokenAccountAddress: PublicKey,\n  coinWallet: PublicKey,\n  pcWallet: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const vaultSigner = createProgramAddressSync(\n    [market.address.toBuffer(), market.decoded.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n    market.programId,\n  );\n\n  return {\n    market: {\n      market: market.address,\n      openOrders: openOrdersAddress,\n      requestQueue: market.decoded.requestQueue,\n      eventQueue: market.decoded.eventQueue,\n      bids: market.bidsAddress,\n      asks: market.asksAddress,\n      coinVault: market.decoded.baseVault,\n      pcVault: market.decoded.quoteVault,\n      vaultSigner,\n    },\n    authority: userTransferAuthority,\n    orderPayerTokenAccount: orderPayerTokenAccountAddress,\n    coinWallet,\n    pcWallet,\n    // Programs.\n    dexProgram: market.programId,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    // Sysvars.\n    rent: SYSVAR_RENT_PUBKEY,\n  };\n}\n\nexport function createMercurialExchangeInstruction({\n  swapLayout,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapLayout: MercurialSwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  for (const swapTokenAccount of swapLayout.tokenAccounts) {\n    remainingAccounts.push({\n      pubkey: swapTokenAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  remainingAccounts.push(...prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount));\n\n  return JUPITER_PROGRAM.instruction.mercurialExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: stableSwapNPoolIntoMercurialExchange(\n      swapLayout,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSerumSwapInstruction({\n  market,\n  sourceMint,\n  openOrdersAddress,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  referrer,\n}: {\n  market: Market;\n  openOrdersAddress: PublicKey;\n  referrer: PublicKey | undefined;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const { side, coinWallet, pcWallet } = sourceMint.equals(market.baseMintAddress)\n    ? {\n        side: Side.Ask,\n        coinWallet: userSourceTokenAccount,\n        pcWallet: userDestinationTokenAccount,\n      }\n    : {\n        side: Side.Bid,\n        coinWallet: userDestinationTokenAccount,\n        pcWallet: userSourceTokenAccount,\n      };\n\n  let remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  if (referrer) {\n    remainingAccounts.push({\n      pubkey: referrer,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.serumSwap(side, inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: marketIntoSerumSwap(\n      market,\n      openOrdersAddress,\n      userSourceTokenAccount,\n      coinWallet,\n      pcWallet,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createTokenSwapInstruction({\n  tokenSwapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n  isStep,\n}: { tokenSwapState: TokenSwapState; isStep: boolean } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(tokenSwapState.mintA)\n    ? [tokenSwapState.tokenAccountA, tokenSwapState.tokenAccountB]\n    : [tokenSwapState.tokenAccountB, tokenSwapState.tokenAccountA];\n\n  return (isStep ? JUPITER_PROGRAM.instruction.stepTokenSwap : JUPITER_PROGRAM.instruction.tokenSwap)(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        tokenSwapProgram: tokenSwapState.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        swap: tokenSwapState.address,\n        authority: tokenSwapState.authority,\n        userTransferAuthority: userTransferAuthority,\n        source: userSourceTokenAccount,\n        swapSource,\n        swapDestination,\n        destination: userDestinationTokenAccount,\n        poolMint: tokenSwapState.poolToken,\n        poolFee: tokenSwapState.feeAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createSenchaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: SenchaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Reserves, poolState.token1Reserves]\n    : [poolState.token1Reserves, poolState.token0Reserves];\n\n  const [feesSource, feesDestination] = sourceMint.equals(poolState.token0Mint)\n    ? [poolState.token0Fees, poolState.token1Fees]\n    : [poolState.token1Fees, poolState.token0Fees];\n\n  return JUPITER_PROGRAM.instruction.senchaExchange(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      userAuthority: userTransferAuthority,\n      inputUserAccount: userSourceTokenAccount,\n      inputTokenAccount: swapSource,\n      inputFeesAccount: feesSource,\n      outputUserAccount: userDestinationTokenAccount,\n      outputTokenAccount: swapDestination,\n      outputFeesAccount: feesDestination,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCropperSwapInstruction({\n  poolState,\n  feeAccount,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CropperPoolState; feeAccount: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cropperTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenSwapProgram: poolState.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      swap: poolState.ammId,\n      swapState: CROPPER_STATE_ADDRESS,\n      authority: poolState.authority,\n      userTransferAuthority: userTransferAuthority,\n      source: userSourceTokenAccount,\n      swapSource,\n      swapDestination,\n      destination: userDestinationTokenAccount,\n      poolMint: poolState.poolMint,\n      poolFee: feeAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRaydiumSwapInstruction({\n  raydiumAmm,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { raydiumAmm: RaydiumAmm } & CreateSwapInstructionParams): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.raydiumSwapV2(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: raydiumAmmToRaydiumSwap(\n      raydiumAmm,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  poolState: AldrinPoolState;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinSwap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createAldrinV2SwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  curve,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: AldrinPoolState; curve: PublicKey } & CreateSwapInstructionParams): TransactionInstruction {\n  const [side, userBaseTokenAccount, userQuoteTokenAccount] = sourceMint.equals(poolState.baseTokenMint)\n    ? [Side.Ask, userSourceTokenAccount, userDestinationTokenAccount]\n    : [Side.Bid, userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.aldrinV2Swap(inAmount, minimumOutAmount, side, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: ALDRIN_SWAP_V2_PROGRAM_ID,\n      pool: poolState.address,\n      poolSigner: poolState.poolSigner,\n      poolMint: poolState.poolMint,\n      baseTokenVault: poolState.baseTokenVault,\n      quoteTokenVault: poolState.quoteTokenVault,\n      feePoolTokenAccount: poolState.feePoolTokenAccount,\n      walletAuthority: userTransferAuthority,\n      userBaseTokenAccount,\n      userQuoteTokenAccount,\n      curve,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createCremaSwapInstruction({\n  poolState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { poolState: CremaPoolState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(poolState.mintA)\n    ? [poolState.tokenAAccount, poolState.tokenBAccount]\n    : [poolState.tokenBAccount, poolState.tokenAAccount];\n\n  return JUPITER_PROGRAM.instruction.cremaTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: poolState.programId,\n      pool: poolState.ammId,\n      poolSigner: poolState.authority,\n      userSourceTokenAccount: userSourceTokenAccount,\n      userDestinationTokenAccount: userDestinationTokenAccount,\n      poolSourceTokenAccount: swapSource,\n      poolDestinationTokenAccount: swapDestination,\n      poolTicksAccount: poolState.ticksKey,\n      walletAuthority: userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\nexport function createRiskCheckAndFeeInstruction(\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n  minimumOutAmount: BN,\n  tokenLedger: PublicKey,\n  platformFee: PlatformFee | undefined,\n): TransactionInstruction {\n  const remainingAccounts: AccountMeta[] = [];\n\n  if (platformFee?.feeAccount) {\n    remainingAccounts.push({\n      pubkey: platformFee.feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return JUPITER_PROGRAM.instruction.riskCheckAndFee(minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      tokenLedger,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSetTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  tokenAccountAddress: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.setTokenLedger({\n    accounts: {\n      tokenLedger,\n      tokenAccount: tokenAccountAddress,\n    },\n  });\n}\n\nexport function createInitializeTokenLedgerInstruction(\n  tokenLedger: PublicKey,\n  payer: PublicKey,\n): TransactionInstruction {\n  return JUPITER_PROGRAM.instruction.initializeTokenLedger({\n    accounts: {\n      tokenLedger,\n      payer,\n      systemProgram: SystemProgram.programId,\n    },\n  });\n}\n\nexport function createOpenOrdersInstruction(\n  market: Market,\n  userTransferAuthority: PublicKey,\n): [PublicKey, TransactionInstruction] {\n  const [openOrders] = findProgramAddressSync(\n    [Buffer.from('open_orders'), market.publicKey.toBuffer(), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  );\n\n  const ix = JUPITER_PROGRAM.instruction.createOpenOrders({\n    accounts: {\n      openOrders,\n      payer: userTransferAuthority,\n      dexProgram: market.programId,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      market: market.publicKey,\n    },\n  });\n  return [openOrders, ix];\n}\n\nfunction saberPoolIntoSaberSwap(\n  saberPool: StableSwap,\n  sourceMintAddress: PublicKey,\n  userSourceTokenAccount: PublicKey,\n  userDestinationTokenAccount: PublicKey,\n  userTransferAuthority: PublicKey,\n) {\n  const feesTokenAccount = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? saberPool.state.tokenB.adminFeeAccount\n    : saberPool.state.tokenA.adminFeeAccount;\n  const [inputTokenAccount, outputTokenAccount] = sourceMintAddress.equals(saberPool.state.tokenA.mint)\n    ? [saberPool.state.tokenA.reserve, saberPool.state.tokenB.reserve]\n    : [saberPool.state.tokenB.reserve, saberPool.state.tokenA.reserve];\n\n  return {\n    swapProgram: saberPool.config.swapProgramID,\n    tokenProgram: TOKEN_PROGRAM_ID,\n    swap: saberPool.config.swapAccount,\n    swapAuthority: saberPool.config.authority,\n    userAuthority: userTransferAuthority,\n    inputUserAccount: userSourceTokenAccount,\n    inputTokenAccount,\n    outputUserAccount: userDestinationTokenAccount,\n    outputTokenAccount,\n    feesTokenAccount,\n  };\n}\n\nexport function createSaberSwapInstruction({\n  stableSwap,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { stableSwap: StableSwap } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: saberPoolIntoSaberSwap(\n      stableSwap,\n      sourceMint,\n      userSourceTokenAccount,\n      userDestinationTokenAccount,\n      userTransferAuthority,\n    ),\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsDepositInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userSourceTokenAccount,\n      userWrappedTokens: userDestinationTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createSaberAddDecimalsWithdrawInstruction({\n  addDecimals,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { addDecimals: AddDecimals } & CreateSwapInstructionParams) {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n  return JUPITER_PROGRAM.instruction.saberAddDecimalsWithdraw(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      addDecimalsProgram: SABER_ADD_DECIMALS_PROGRAM_ID,\n      wrapper: addDecimals.wrapper,\n      wrapperMint: addDecimals.mint,\n      wrapperUnderlyingTokens: addDecimals.wrapperUnderlyingTokens,\n      owner: userTransferAuthority,\n      userUnderlyingTokens: userDestinationTokenAccount,\n      userWrappedTokens: userSourceTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts,\n  });\n}\n\nexport function createLifinitySwapInstruction({\n  swapState,\n  sourceMint,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { swapState: LifinitySwapLayoutState } & CreateSwapInstructionParams): TransactionInstruction {\n  const [swapSource, swapDestination] = sourceMint.equals(swapState.tokenAMint)\n    ? [swapState.poolCoinTokenAccount, swapState.poolPcTokenAccount]\n    : [swapState.poolPcTokenAccount, swapState.poolCoinTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.lifinityTokenSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: swapState.programId,\n      authority: swapState.authority,\n      amm: swapState.amm,\n      userTransferAuthority: userTransferAuthority,\n      sourceInfo: userSourceTokenAccount,\n      destinationInfo: userDestinationTokenAccount,\n      swapSource,\n      swapDestination,\n      poolMint: swapState.poolMint,\n      feeAccount: swapState.feeAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      pythAccount: swapState.pythAccount,\n      pythPcAccount: swapState.pythPcAccount,\n      configAccount: swapState.configAccount,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype CykuraSwapInstructionArgs = {\n  poolAddress: PublicKey;\n  inputVault: PublicKey;\n  outputVault: PublicKey;\n  nextObservationState: PublicKey;\n  lastObservationState: PublicKey;\n  swapAccountMetas: AccountMeta[];\n};\n\nexport function createCykuraSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: CykuraSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const remainingAccounts = prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount);\n\n  return JUPITER_PROGRAM.instruction.cykuraSwap(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      swapProgram: CYKURA_PROGRAM_ID,\n      signer: userTransferAuthority,\n      factoryState: CYKURA_FACTORY_STATE_ADDRESS,\n      poolState: additionalArgs.poolAddress,\n      inputTokenAccount: userSourceTokenAccount,\n      outputTokenAccount: userDestinationTokenAccount,\n      inputVault: additionalArgs.inputVault,\n      outputVault: additionalArgs.outputVault,\n      lastObservationState: additionalArgs.lastObservationState,\n      coreProgram: CYKURA_PROGRAM_ID, // Duplicated as in Cykura accounts\n      tokenProgram: TOKEN_PROGRAM_ID,\n    },\n    remainingAccounts: remainingAccounts.concat([\n      ...additionalArgs.swapAccountMetas,\n      { pubkey: additionalArgs.nextObservationState, isSigner: false, isWritable: true },\n    ]),\n  });\n}\n\ntype WhirlpoolSwapInstructionArgs = {\n  aToB: boolean;\n  whirlpool: PublicKey;\n  tokenVaultA: PublicKey;\n  tokenVaultB: PublicKey;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n  oracle: PublicKey;\n};\n\nexport function createWhirlpoolSwapInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwap(\n    inAmount,\n    minimumOutAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\ntype MarinadeFinanceDepositInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n  liqPoolMsolLegAuthority: PublicKey;\n  reservePda: PublicKey;\n  msolMintAuthority: PublicKey;\n};\n\nexport function createMarinadeFinanceDepositInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: MarinadeFinanceDepositInstructionArgs } & CreateSwapInstructionParams): TransactionInstruction {\n  const transferFrom = userTransferAuthority;\n  const tempWsolTokenAccount = findProgramAddressSync(\n    [Buffer.from('temp-wsol-token-account'), transferFrom.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceDeposit(inAmount, minimumOutAmount, platformFee?.feeBps ?? 0, {\n    accounts: {\n      marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n      state: additionalArgs.address,\n      userTransferAuthority,\n      msolMint: additionalArgs.marinadeStateResponse.msolMint,\n      liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n      liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n      liqPoolMsolLegAuthority: additionalArgs.liqPoolMsolLegAuthority,\n      reservePda: additionalArgs.reservePda,\n      transferFrom: tempSolPda,\n      mintTo: userDestinationTokenAccount,\n      msolMintAuthority: additionalArgs.msolMintAuthority,\n      systemProgram: SystemProgram.programId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      userWsolTokenAccount: userSourceTokenAccount,\n      tempWsolTokenAccount,\n      wsolMint: NATIVE_MINT,\n      rent: SYSVAR_RENT_PUBKEY,\n    },\n    remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n  });\n}\n\ntype MarinadeFinanceLiquidUnstakeInstructionArgs = {\n  address: PublicKey;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPda: PublicKey;\n};\n\nexport function createMarinadeFinanceLiquidUnstakeInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  inAmount,\n  minimumOutAmount,\n  tokenLedger,\n  platformFee,\n}: {\n  additionalArgs: MarinadeFinanceLiquidUnstakeInstructionArgs;\n} & CreateSwapInstructionParams): TransactionInstruction {\n  const tempSolPda = findProgramAddressSync(\n    [Buffer.from('temp-sol-pda'), userTransferAuthority.toBuffer()],\n    JUPITER_PROGRAM_ID,\n  )[0];\n\n  return JUPITER_PROGRAM.instruction.marinadeFinanceLiquidUnstake(\n    inAmount,\n    minimumOutAmount,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        marinadeFinanceProgram: MARINADE_PROGRAM_ID,\n        state: additionalArgs.address,\n        msolMint: additionalArgs.marinadeStateResponse.msolMint,\n        liqPoolSolLegPda: additionalArgs.liqPoolSolLegPda,\n        liqPoolMsolLeg: additionalArgs.marinadeStateResponse.liqPool.msolLeg,\n        treasuryMsolAccount: additionalArgs.marinadeStateResponse.treasuryMsolAccount,\n        getMsolFrom: userSourceTokenAccount,\n        getMsolFromAuthority: userTransferAuthority,\n        transferSolTo: tempSolPda,\n        systemProgram: SystemProgram.programId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        userWsolTokenAccount: userDestinationTokenAccount,\n      },\n      remainingAccounts: prepareRemainingAccounts(inAmount, tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nexport function createWhirlpoolSwapExactOutputInstruction({\n  additionalArgs,\n  userSourceTokenAccount,\n  userDestinationTokenAccount,\n  userTransferAuthority,\n  outAmount,\n  maximumInAmount,\n  tokenLedger,\n  platformFee,\n}: { additionalArgs: WhirlpoolSwapInstructionArgs } & CreateSwapExactOutputInstructionParams): TransactionInstruction {\n  const [tokenOwnerAccountA, tokenOwnerAccountB] = additionalArgs.aToB\n    ? [userSourceTokenAccount, userDestinationTokenAccount]\n    : [userDestinationTokenAccount, userSourceTokenAccount];\n\n  return JUPITER_PROGRAM.instruction.whirlpoolSwapExactOutput(\n    outAmount,\n    maximumInAmount,\n    additionalArgs.aToB,\n    platformFee?.feeBps ?? 0,\n    {\n      accounts: {\n        swapProgram: WHIRLPOOL_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenAuthority: userTransferAuthority,\n        whirlpool: additionalArgs.whirlpool,\n        tokenOwnerAccountA,\n        tokenVaultA: additionalArgs.tokenVaultA,\n        tokenOwnerAccountB,\n        tokenVaultB: additionalArgs.tokenVaultB,\n        tickArray0: additionalArgs.tickArray0,\n        tickArray1: additionalArgs.tickArray1,\n        tickArray2: additionalArgs.tickArray2,\n        oracle: additionalArgs.oracle,\n      },\n      remainingAccounts: prepareRemainingAccounts(new BN(0), tokenLedger, platformFee?.feeAccount),\n    },\n  );\n}\n\nfunction prepareRemainingAccounts(\n  inAmount: BN | null,\n  tokenLedger: PublicKey,\n  feeAccount: PublicKey | undefined,\n): AccountMeta[] {\n  const remainingAccounts = [];\n\n  if (inAmount === null) {\n    remainingAccounts.push({\n      pubkey: tokenLedger,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  if (feeAccount) {\n    remainingAccounts.push({\n      pubkey: feeAccount,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n\n  return remainingAccounts;\n}\n","import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, QuoteParams, SwapParams } from '../amm';\n// Modified from saber's registry to contain the underlying mint decimal to avoid pointless queries\nimport addDecimalsJson from './add-decimals-complete-state.mainnet-beta.json';\nimport {\n  createSaberAddDecimalsDepositInstruction,\n  createSaberAddDecimalsWithdrawInstruction,\n} from '../jupiterInstruction';\nimport { ZERO } from '@jup-ag/math';\n\nexport interface AddDecimals {\n  wrapper: PublicKey;\n  underlying: PublicKey;\n  underlyingDecimals: number;\n  wrapperUnderlyingTokens: PublicKey;\n  mint: PublicKey;\n  decimals: number;\n}\n\nexport function getSaberWrappedDecimalsAmms() {\n  return addDecimalsJson.map((addDecimalJson) => {\n    const addDecimals = {\n      wrapper: new PublicKey(addDecimalJson.wrapper),\n      underlying: new PublicKey(addDecimalJson.underlying),\n      underlyingDecimals: addDecimalJson.underlyingDecimals,\n      wrapperUnderlyingTokens: new PublicKey(addDecimalJson.wrapperUnderlyingTokens),\n      mint: new PublicKey(addDecimalJson.mint),\n      decimals: addDecimalJson.decimals,\n    };\n\n    return new SaberAddDecimalsAmm(new WrappedToken(addDecimals));\n  });\n}\n\nexport class WrappedToken {\n  multiplier: JSBI;\n\n  constructor(public addDecimals: AddDecimals) {\n    this.multiplier = JSBI.BigInt(10 ** (this.addDecimals.decimals - this.addDecimals.underlyingDecimals));\n  }\n\n  getOutputAmount(inputAmount: JSBI, inputMint: PublicKey): JSBI {\n    if (this.addDecimals.mint.equals(inputMint)) {\n      // withdraw, so divide\n      return this.calculateWithdrawOutputAmount(inputAmount);\n    } else if (this.addDecimals.underlying.equals(inputMint)) {\n      // deposit, so multiply\n      return this.calculateDepositOutputAmount(inputAmount);\n    }\n    throw new Error(`unknown input token: ${inputMint.toString()}`);\n  }\n\n  private calculateDepositOutputAmount(inputAmount: JSBI) {\n    return JSBI.multiply(inputAmount, this.multiplier);\n  }\n\n  private calculateWithdrawOutputAmount(inputAmount: JSBI) {\n    return JSBI.divide(inputAmount, this.multiplier);\n  }\n}\n\n// This isn't technically an Amm but this the smoothest solution to allow its usage without a major refactor of the abstractions for now\nexport class SaberAddDecimalsAmm implements Amm {\n  id: string;\n  label = 'Saber (Decimals)' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  constructor(public wrappedToken: WrappedToken) {\n    this.id = this.wrappedToken.addDecimals.wrapper.toBase58();\n  }\n\n  getAccountsForUpdate() {\n    return new Array<PublicKey>();\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {}\n\n  getQuote({ sourceMint, amount }: QuoteParams) {\n    const outAmount = this.wrappedToken.getOutputAmount(amount, sourceMint);\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount,\n      feeAmount: ZERO,\n      feeMint: sourceMint.toBase58(),\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (this.wrappedToken.addDecimals.underlying.equals(swapParams.sourceMint)) {\n      return [\n        createSaberAddDecimalsDepositInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    } else {\n      return [\n        createSaberAddDecimalsWithdrawInstruction({\n          addDecimals: this.wrappedToken.addDecimals,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n  }\n\n  get reserveTokenMints() {\n    return [this.wrappedToken.addDecimals.underlying, this.wrappedToken.addDecimals.mint];\n  }\n}\n","export function getTwoPermutations<T>(array: T[]) {\n  return array.reduce((acc, item) => {\n    array.forEach((otherItem) => {\n      if (item !== otherItem) {\n        acc.push([item, otherItem]);\n      }\n    });\n    return acc;\n  }, new Array<T[]>());\n}\n","export function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply<number, T[], T[][]>(0, new Array(Math.ceil(array.length / size))).map((_, index) =>\n    array.slice(index * size, (index + 1) * size),\n  );\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { chunks } from './chunks';\n\ninterface Result {\n  jsonrpc: string;\n  result: {\n    context: { slot: number };\n    value: (AccountInfo<string[]> | null)[];\n  };\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: string[],\n  batchChunkSize: number = 1000,\n  maxAccountsChunkSize: number = 100,\n): Promise<Array<AccountInfo<Buffer> | null>> {\n  return (\n    await Promise.all(\n      chunks(pks, batchChunkSize).map(async (batchPubkeys) => {\n        const batch = chunks(batchPubkeys, maxAccountsChunkSize).map((pubkeys) => ({\n          methodName: 'getMultipleAccounts',\n          args: connection._buildArgs([pubkeys], connection.commitment, 'base64'),\n        }));\n\n        return (\n          // getMultipleAccounts is quite slow, so we use fetch directly\n          connection\n            // @ts-ignore\n            ._rpcBatchRequest(batch)\n            .then((batchResults: Result[]) => {\n              const accounts = batchResults.reduce((acc, res) => {\n                res.result.value.forEach((item) => {\n                  if (item) {\n                    const value = item as unknown as AccountInfo<Buffer>;\n                    value.data = Buffer.from(item.data[0], item.data[1] as 'base64');\n                    value.owner = new PublicKey(item.owner);\n                    acc.push(value);\n                  } else {\n                    acc.push(null);\n                  }\n                });\n                return acc;\n              }, [] as (AccountInfo<Buffer> | null)[]);\n\n              return accounts;\n            })\n            .catch((e: any) => {\n              console.error('Failed to fetch account infos', e);\n              return batchPubkeys.map(() => null);\n            })\n        );\n      }),\n    )\n  ).flat();\n}\n","import { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { PlatformFee, QuoteMintToReferrer, TokenMintAddress } from '..';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport JSBI from 'jsbi';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport type BN from 'bn.js';\n\nexport enum SwapMode {\n  ExactIn = 'ExactIn',\n  ExactOut = 'ExactOut',\n}\n\nexport interface QuoteParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  amount: JSBI;\n  swapMode: SwapMode;\n}\n\nexport interface Quote {\n  notEnoughLiquidity: boolean;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  feeAmount: JSBI;\n  feeMint: TokenMintAddress;\n  feePct: number;\n  priceImpactPct: number;\n}\n\nexport interface SwapParams {\n  sourceMint: PublicKey;\n  destinationMint: PublicKey;\n  userSourceTokenAccount: PublicKey;\n  userDestinationTokenAccount: PublicKey;\n  userTransferAuthority: PublicKey;\n  amount: BN | null;\n  otherAmountThreshold: BN;\n  swapMode: SwapMode;\n  tokenLedger: PublicKey;\n  openOrdersAddress?: PublicKey;\n  platformFee?: PlatformFee;\n  quoteMintToReferrer?: QuoteMintToReferrer;\n}\n\nexport type AccountInfoMap = Map<string, AccountInfo<Buffer> | null>;\n\nexport interface Amm {\n  /* Label for UI usage */\n  label: string;\n  /* Unique id to recognize the AMM */\n  id: string;\n  /* Reserve token mints for the purpose of routing */\n  reserveTokenMints: PublicKey[];\n  /* State if we need to prefetch the accounts 1 time */\n  shouldPrefetch: boolean;\n  /* Exact output swap mode is supported */\n  exactOutputSupported: boolean;\n\n  getAccountsForUpdate(): PublicKey[];\n  update(accountInfoMap: AccountInfoMap): void;\n  getQuote(quoteParams: QuoteParams): Quote;\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[];\n}\n\nexport const mapAddressToAccountInfos = (accountInfoMap: AccountInfoMap, addresses: PublicKey[]) => {\n  const accountInfos = addresses.map((address) => {\n    const accountInfo = accountInfoMap.get(address.toString());\n    if (!accountInfo) {\n      throw new Error(`Account info ${address.toBase58()} missing`);\n    }\n    return accountInfo;\n  });\n\n  return accountInfos;\n};\n\nexport const tokenAccountsToJSBIs = (tokenAccounts: TokenAccountInfo[]): JSBI[] => {\n  return tokenAccounts.map((tokenAccount) => {\n    return JSBI.BigInt(tokenAccount.amount);\n  });\n};\n\nexport const prefetchAmms = async (amms: Amm[], connection: Connection) => {\n  const accounts = amms.map((amm) => amm.getAccountsForUpdate().map((item) => item.toBase58())).flat();\n  const accountInfosMap = new Map<string, AccountInfo<Buffer>>();\n  const accountInfos = await chunkedGetMultipleAccountInfos(connection, accounts);\n\n  accountInfos.forEach((item, index) => {\n    const publicKey = accounts[index];\n    if (item) {\n      accountInfosMap.set(publicKey, item);\n    }\n  });\n\n  for (let amm of amms) {\n    amm.update(accountInfosMap);\n  }\n};\n","// Only a few hardcoded pools for now, until we query the whole lot through api\nimport { struct, nu64 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { publicKey, uint128, uint64 } from '../../utils/layout';\n\ninterface AmmInfoLayoutV4 {\n  status: number;\n  nonce: number;\n  orderNum: number;\n  depth: number;\n  coinDecimals: number;\n  pcDecimals: number;\n  state: number;\n  resetFlag: number;\n  minSize: number;\n  volMaxCutRatio: number;\n  amountWaveRatio: number;\n  coinLotSize: number;\n  pcLotSize: number;\n  minPriceMultiplier: number;\n  maxPriceMultiplier: number;\n  systemDecimalsValue: number;\n  minSeparateNumerator: number;\n  minSeparateDenominator: number;\n  tradeFeeNumerator: number;\n  tradeFeeDenominator: number;\n  pnlNumerator: number;\n  pnlDenominator: number;\n  swapFeeNumerator: u64;\n  swapFeeDenominator: u64;\n  needTakePnlCoin: number;\n  needTakePnlPc: number;\n  totalPnlPc: number;\n  totalPnlCoin: number;\n  poolTotalDepositPc: u64;\n  poolTotalDepositCoin: u64;\n  swapCoinInAmount: u64;\n  swapPcOutAmount: u64;\n  swapCoin2PcFee: number;\n  swapPcInAmount: u64;\n  swapCoinOutAmount: u64;\n  swapPc2CoinFee: number;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  coinMintAddress: PublicKey;\n  pcMintAddress: PublicKey;\n  lpMintAddress: PublicKey;\n  ammOpenOrders: PublicKey;\n  serumMarket: PublicKey;\n  serumProgramId: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolWithdrawQueue: PublicKey;\n  poolTempLpTokenAccount: PublicKey;\n  ammOwner: PublicKey;\n  pnlOwner: PublicKey;\n}\n\nexport const AMM_INFO_LAYOUT_V4 = struct<AmmInfoLayoutV4>([\n  nu64('status'),\n  nu64('nonce'),\n  nu64('orderNum'),\n  nu64('depth'),\n  nu64('coinDecimals'),\n  nu64('pcDecimals'),\n  nu64('state'),\n  nu64('resetFlag'),\n  nu64('minSize'),\n  nu64('volMaxCutRatio'),\n  nu64('amountWaveRatio'),\n  nu64('coinLotSize'),\n  nu64('pcLotSize'),\n  nu64('minPriceMultiplier'),\n  nu64('maxPriceMultiplier'),\n  nu64('systemDecimalsValue'),\n  // Fees\n  nu64('minSeparateNumerator'),\n  nu64('minSeparateDenominator'),\n  nu64('tradeFeeNumerator'),\n  nu64('tradeFeeDenominator'),\n  nu64('pnlNumerator'),\n  nu64('pnlDenominator'),\n  nu64('swapFeeNumerator'),\n  nu64('swapFeeDenominator'),\n  // OutPutData\n  nu64('needTakePnlCoin'),\n  nu64('needTakePnlPc'),\n  nu64('totalPnlPc'),\n  nu64('totalPnlCoin'),\n  uint128('poolTotalDepositPc'),\n  uint128('poolTotalDepositCoin'),\n  uint128('swapCoinInAmount'),\n  uint128('swapPcOutAmount'),\n  nu64('swapCoin2PcFee'),\n  uint128('swapPcInAmount'),\n  uint128('swapCoinOutAmount'),\n  nu64('swapPc2CoinFee'),\n\n  publicKey('poolCoinTokenAccount'),\n  publicKey('poolPcTokenAccount'),\n  publicKey('coinMintAddress'),\n  publicKey('pcMintAddress'),\n  publicKey('lpMintAddress'),\n  publicKey('ammOpenOrders'),\n  publicKey('serumMarket'),\n  publicKey('serumProgramId'),\n  publicKey('ammTargetOrders'),\n  publicKey('poolWithdrawQueue'),\n  publicKey('poolTempLpTokenAccount'),\n  publicKey('ammOwner'),\n  publicKey('pnlOwner'),\n]);\n","// https://github.com/raydium-io/raydium-ui/blob/4048286f79fc4b71c3ffbfd9095470ab0c7d3862/src/utils/liquidity.ts#L30-L82\n\nimport { Fraction, TokenSwapConstantProduct, ZERO_FRACTION } from '@jup-ag/math';\nimport { createProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { Market, OpenOrders } from '@project-serum/serum';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createRaydiumSwapInstruction } from '../jupiterInstruction';\nimport { AMM_INFO_LAYOUT_V4 } from './pools';\n\n// Explained here\n// https://discordapp.com/channels/813741812598439958/813750197423308820/900288485028683776\n// total_pc = amminfo.pc_vault.balance + amminfo.openorder.total_quote - amminfo.need_taken_pnl_pc\n// total_coin = amminfo.coin_vault.balance + amminfo.openorder.total_base - amminfo.need_taken_pnl_coin\n\ntype SerumMarketKeys = {\n  serumBids: PublicKey;\n  serumAsks: PublicKey;\n  serumEventQueue: PublicKey;\n  serumCoinVaultAccount: PublicKey;\n  serumPcVaultAccount: PublicKey;\n  serumVaultSigner: PublicKey;\n};\n\ntype SerumMarketKeysString = Record<keyof SerumMarketKeys, string>;\nexport class RaydiumAmm implements Amm {\n  id: string;\n  label = 'Raydium' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  coinMint: PublicKey;\n  pcMint: PublicKey;\n\n  status: number;\n  serumProgramId: PublicKey;\n  serumMarket: PublicKey;\n  ammOpenOrders: PublicKey;\n  ammTargetOrders: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolPcTokenAccount: PublicKey;\n\n  serumMarketKeys: SerumMarketKeys;\n\n  coinReserve: u64 | undefined;\n  pcReserve: u64 | undefined;\n\n  private feePct: Decimal;\n  private calculator: TokenSwapConstantProduct;\n\n  constructor(public ammId: PublicKey, ammAccountInfo: AccountInfo<Buffer>, params: SerumMarketKeysString) {\n    this.id = ammId.toBase58();\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.status = decoded.status;\n    this.coinMint = new PublicKey(decoded.coinMintAddress);\n    this.pcMint = new PublicKey(decoded.pcMintAddress);\n\n    this.poolCoinTokenAccount = new PublicKey(decoded.poolCoinTokenAccount);\n    this.poolPcTokenAccount = new PublicKey(decoded.poolPcTokenAccount);\n\n    this.serumProgramId = new PublicKey(decoded.serumProgramId);\n    this.serumMarket = new PublicKey(decoded.serumMarket);\n    this.ammOpenOrders = new PublicKey(decoded.ammOpenOrders);\n    this.ammTargetOrders = new PublicKey(decoded.ammTargetOrders);\n\n    this.serumMarketKeys = (Object.keys(params) as Array<keyof SerumMarketKeysString>).reduce((acc, item) => {\n      const pk = params[item];\n      if (!pk) throw new Error(`Could not find ${item} in params`);\n      acc[item] = new PublicKey(params[item]);\n      return acc;\n    }, {} as SerumMarketKeys);\n\n    const swapFeeNumerator = decoded.swapFeeNumerator;\n    const swapFeeDenominator = decoded.swapFeeDenominator;\n\n    this.feePct = new Decimal(swapFeeNumerator.toString()).div(swapFeeDenominator.toString());\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(swapFeeNumerator), JSBI.BigInt(swapFeeDenominator)),\n      ZERO_FRACTION,\n    );\n  }\n\n  static decodeSerumMarketKeysString(\n    serumProgramId: PublicKey,\n    serumMarket: PublicKey,\n    serumMarketInfo: AccountInfo<Buffer>,\n  ): SerumMarketKeysString {\n    const decodedMarket = Market.getLayout(serumProgramId).decode(serumMarketInfo.data);\n    const serumVaultSigner = createProgramAddressSync(\n      [serumMarket.toBuffer(), decodedMarket.vaultSignerNonce.toArrayLike(Buffer, 'le', 8)],\n      serumProgramId,\n    );\n\n    return {\n      serumBids: decodedMarket.bids.toBase58(),\n      serumAsks: decodedMarket.asks.toBase58(),\n      serumEventQueue: decodedMarket.eventQueue.toBase58(),\n      serumCoinVaultAccount: decodedMarket.baseVault.toBase58(),\n      serumPcVaultAccount: decodedMarket.quoteVault.toBase58(),\n      serumVaultSigner: serumVaultSigner.toBase58(),\n    };\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.ammId, this.poolCoinTokenAccount, this.poolPcTokenAccount, this.ammOpenOrders];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [ammAccountInfo, poolCoinTokenAccountInfo, poolPcTokenAccountInfo, ammOpenOrdersAccountInfo] =\n      mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const [coinAmount, pcAmount] = [\n      RaydiumAmm.tokenAmountAccessor(poolCoinTokenAccountInfo),\n      RaydiumAmm.tokenAmountAccessor(poolPcTokenAccountInfo),\n    ];\n\n    const openOrders = OpenOrders.fromAccountInfo(\n      this.ammOpenOrders,\n      ammOpenOrdersAccountInfo,\n      ammOpenOrdersAccountInfo.owner,\n    );\n\n    const decoded = AMM_INFO_LAYOUT_V4.decode(ammAccountInfo.data);\n\n    this.coinReserve = coinAmount.add(openOrders.baseTokenTotal).sub(new u64(String(decoded.needTakePnlCoin)));\n\n    this.pcReserve = pcAmount.add(openOrders.quoteTokenTotal).sub(new u64(String(decoded.needTakePnlPc)));\n  }\n\n  private static tokenAmountAccessor(tokenAccountInfo: AccountInfo<Buffer>): u64 {\n    return u64.fromBuffer(tokenAccountInfo.data.slice(64, 64 + 8));\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const { coinReserve, pcReserve } = this;\n    if (!coinReserve || !pcReserve) {\n      throw new Error('Pool token accounts balances not refreshed or empty');\n    }\n\n    const outputIndex = this.coinMint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange([JSBI.BigInt(coinReserve), JSBI.BigInt(pcReserve)], amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createRaydiumSwapInstruction({\n        raydiumAmm: this,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.coinMint, this.pcMint];\n  }\n}\n","import { ZERO } from '@jup-ag/math';\nimport { Market, Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nconst TAKER_FEE_PCT = 0.0004;\nconst STABLE_TAKER_FEE_PCT = 0.0001;\n\n// Stable markets are hardcoded in the program\nconst STABLE_MARKET_ADDRESSES = [\n  '77quYg4MGneUdjgXCunt9GgM1usmrxKY31twEy3WHwcS', // USDT/USDC\n  '5cLrMai1DsLRYc1Nio9qMTicsWtvzjzZfJPXyAoF4t1Z', // mSOL/SOL\n  'EERNEEnBqdGzBS8dd46wwNY5F2kwnaCQ3vsq2fNKGogZ', // UST/USDC\n  '8sFf9TW3KzxLiBXcDcjAxqabEsRroo4EiRr3UG1xbJ9m', // UST/USDT\n  '2iDSTGhjJEiRxNaLF27CY6daMYPs5hgYrP2REHd5YD62', // stSOL/SOL\n];\n\ninterface IMarketMeta {\n  /** buy or sell side */\n  side: 'buy' | 'sell';\n  /** indicate that your order is too huge for the market */\n  notEnoughLiquidity: boolean;\n  /** minimum in amount and the corresponding out amount */\n  minimum: {\n    in: JSBI;\n    out: JSBI;\n  };\n  /** amount in taken for the trade */\n  inAmount: JSBI;\n  /** the amount out for the trade */\n  outAmount: JSBI;\n  /** the total fee amount */\n  feeAmount: JSBI;\n  /** price impact percentage */\n  priceImpactPct: number;\n  /** fee percentage */\n  feePct: number;\n}\n\n// Provides swap like out amount, with slippage and corresponding minimum amount out\nexport function getOutAmountMeta({\n  market,\n  asks,\n  bids,\n  fromAmount,\n  fromMint,\n  toMint,\n}: {\n  market: Market;\n  asks: Orderbook;\n  bids: Orderbook;\n  fromMint: PublicKey;\n  toMint: PublicKey;\n  fromAmount: JSBI;\n}) {\n  const takerFeePct = STABLE_MARKET_ADDRESSES.includes(market.address.toBase58())\n    ? STABLE_TAKER_FEE_PCT\n    : TAKER_FEE_PCT;\n\n  if (fromMint.equals(market.quoteMintAddress) && toMint.equals(market.baseMintAddress)) {\n    // buy\n    return forecastBuy(market, asks, fromAmount, takerFeePct);\n  } else {\n    return forecastSell(market, bids, fromAmount, takerFeePct);\n  }\n}\n\nexport function forecastBuy(market: Market, orderbook: Orderbook, pcIn: JSBI, takerFeePct: number): IMarketMeta {\n  let coinOut = ZERO;\n  let bestPrice: JSBI = ZERO;\n  let worstPrice: JSBI = ZERO;\n  // total base price\n  let totalCost = ZERO;\n  let totalCoins = ZERO;\n\n  // might be decimal, e.g: 0.001\n  const quoteSizeLots = market.quoteSizeLotsToNumber(new BN(1));\n\n  // Serum buy order take fee in quote tokens\n  let availablePc = quoteSizeLots\n    ? JSBI.BigInt(\n        new Decimal(pcIn.toString())\n          .div(1 + takerFeePct)\n          .div(quoteSizeLots)\n          .floor(),\n      )\n    : ZERO;\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)).toString());\n\n  for (let [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(lotQuantity, baseSizeLots);\n    const orderPcAmount = JSBI.multiply(lotQuantity, lotPrice);\n\n    totalCoins = JSBI.add(totalCoins, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderPcAmount, availablePc)) {\n      const numberLotsPurchasable = JSBI.divide(availablePc, lotPrice);\n\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, numberLotsPurchasable));\n      coinOut = JSBI.add(coinOut, JSBI.multiply(baseSizeLots, numberLotsPurchasable));\n      availablePc = ZERO;\n      break;\n    } else {\n      totalCost = JSBI.add(totalCost, JSBI.multiply(lotPrice, lotQuantity));\n      coinOut = JSBI.add(coinOut, orderCoinAmount);\n      availablePc = JSBI.subtract(availablePc, orderPcAmount);\n    }\n  }\n\n  const bestPriceDecimal = new Decimal(bestPrice.toString());\n  const worstPriceDecimal = new Decimal(worstPrice.toString());\n\n  const priceImpactPct = worstPriceDecimal.sub(bestPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  const bestPriceSizeLots = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const totalCostSizeLots = priceLotsToDecimal(market, new BN(totalCost.toString()));\n  const inAmountWithoutFee = totalCostSizeLots.mul(baseSizeLots.toString()).ceil();\n  const fee = totalCostSizeLots.mul(baseSizeLots.toString()).mul(takerFeePct).ceil();\n\n  return {\n    side: 'buy',\n    notEnoughLiquidity: JSBI.lessThanOrEqual(totalCoins, coinOut),\n    minimum: {\n      in: JSBI.BigInt(\n        bestPriceSizeLots\n          .mul(baseSizeLots.toString())\n          .mul(1 + takerFeePct)\n          .ceil(),\n      ),\n      out: baseSizeLots,\n    },\n    inAmount: JSBI.BigInt(inAmountWithoutFee.add(fee)),\n    outAmount: coinOut,\n    feeAmount: JSBI.BigInt(fee),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function forecastSell(market: Market, orderbook: Orderbook, coinIn: JSBI, takerFeePct: number): IMarketMeta {\n  let pcOut = JSBI.BigInt(0);\n  let bestPrice = JSBI.BigInt(0);\n  let worstPrice = JSBI.BigInt(0);\n  let totalCoin = JSBI.BigInt(0);\n  let availableCoin = coinIn;\n  let inAmount = JSBI.BigInt(0);\n\n  const baseSizeLots = JSBI.BigInt(market.baseSizeLotsToNumber(new BN(1)));\n  const quoteSizeLots = JSBI.BigInt(market.quoteSizeLotsToNumber(new BN(1)));\n\n  for (const [lotPrice, lotQuantity] of getL2(orderbook)) {\n    if (JSBI.equal(bestPrice, ZERO)) {\n      bestPrice = lotPrice;\n    }\n\n    worstPrice = lotPrice;\n\n    const orderCoinAmount = JSBI.multiply(baseSizeLots, lotQuantity);\n    const orderPcAmount = JSBI.multiply(lotQuantity, JSBI.multiply(lotPrice, quoteSizeLots));\n    totalCoin = JSBI.add(totalCoin, orderCoinAmount);\n\n    if (JSBI.greaterThanOrEqual(orderCoinAmount, availableCoin)) {\n      const numberLotsCanSell = JSBI.divide(availableCoin, baseSizeLots);\n      const totalCoinAmountToSell = JSBI.multiply(numberLotsCanSell, lotPrice);\n      pcOut = JSBI.add(pcOut, JSBI.multiply(totalCoinAmountToSell, quoteSizeLots));\n      availableCoin = JSBI.subtract(availableCoin, totalCoinAmountToSell);\n      inAmount = JSBI.add(inAmount, JSBI.multiply(numberLotsCanSell, baseSizeLots));\n      break;\n    } else {\n      pcOut = JSBI.add(pcOut, orderPcAmount);\n      availableCoin = JSBI.subtract(availableCoin, orderCoinAmount);\n      inAmount = JSBI.add(inAmount, orderCoinAmount);\n    }\n  }\n\n  let pcOutAfterFee = new Decimal(pcOut.toString()).mul(1 - takerFeePct).floor();\n\n  const bestPriceDecimal = priceLotsToDecimal(market, new BN(bestPrice.toString()));\n  const worstPriceDecimal = priceLotsToDecimal(market, new BN(worstPrice.toString()));\n\n  const priceImpactPct = bestPriceDecimal.minus(worstPriceDecimal).div(bestPriceDecimal).toNumber();\n\n  return {\n    side: 'sell',\n    notEnoughLiquidity: JSBI.greaterThan(JSBI.BigInt(coinIn), totalCoin),\n    minimum: {\n      in: baseSizeLots,\n      out: JSBI.BigInt(\n        bestPriceDecimal\n          .mul(JSBI.toNumber(baseSizeLots))\n          .mul(1 - takerFeePct)\n          .floor()\n          .toString(),\n      ),\n    },\n    inAmount: inAmount,\n    outAmount: JSBI.BigInt(pcOutAfterFee),\n    feeAmount: JSBI.BigInt(new Decimal(pcOut.toString()).mul(takerFeePct).round()),\n    priceImpactPct,\n    feePct: takerFeePct,\n  };\n}\n\nexport function* getL2(orderbook: Orderbook): Generator<[JSBI, JSBI]> {\n  const descending = orderbook.isBids;\n  for (const { key, quantity } of orderbook.slab.items(descending)) {\n    const price = JSBI.BigInt(key.ushrn(64).toString());\n    yield [price, JSBI.BigInt(quantity.toString())];\n  }\n}\n\nfunction divideBnToDecimal(numerator: BN, denominator: BN): Decimal {\n  const quotient = new Decimal(numerator.div(denominator).toString());\n  const rem = numerator.umod(denominator);\n  const gcd = rem.gcd(denominator);\n  return quotient.add(new Decimal(rem.div(gcd).toString()).div(new Decimal(denominator.div(gcd).toString())));\n}\n\nfunction priceLotsToDecimal(market: Market, price: BN) {\n  // @ts-expect-error _decoded\n  const baseLotSize = market._decoded.baseLotSize;\n  if (baseLotSize.isZero()) return new Decimal(0);\n\n  return divideBnToDecimal(\n    // @ts-expect-error _decoded _baseSplTokenMultiplier is private\n    price.mul(market._decoded.quoteLotSize).mul(market._baseSplTokenMultiplier),\n    // @ts-expect-error _quoteSplTokenMultiplier is private\n    baseLotSize.mul(market._quoteSplTokenMultiplier),\n  );\n}\n","import { Orderbook } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createSerumSwapInstruction } from '../jupiterInstruction';\nimport { SerumMarket } from '../market';\nimport { getL2, getOutAmountMeta } from './market';\n\nexport class SerumAmm implements Amm {\n  id: string;\n  label = 'Serum' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private _orderbooks: { asks: Orderbook; bids: Orderbook } | undefined;\n\n  constructor(public market: SerumMarket) {\n    this.id = market.address.toBase58();\n  }\n\n  get orderbooks() {\n    return this._orderbooks;\n  }\n\n  static getL2 = getL2;\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.market.asksAddress, this.market.bidsAddress];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [asksAccountInfo, bidsAccountInfo] = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    const asks = Orderbook.decode(this.market, asksAccountInfo.data);\n    const bids = Orderbook.decode(this.market, bidsAccountInfo.data);\n\n    this._orderbooks = {\n      asks,\n      bids,\n    };\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (!this.orderbooks) {\n      throw new Error('Failed to find orderbooks');\n    }\n\n    const outAmountMeta = getOutAmountMeta({\n      market: this.market,\n      asks: this.orderbooks.asks,\n      bids: this.orderbooks.bids,\n      fromMint: sourceMint,\n      toMint: destinationMint,\n      fromAmount: amount,\n    });\n\n    return {\n      notEnoughLiquidity: outAmountMeta.notEnoughLiquidity,\n      minInAmount: outAmountMeta.minimum.in,\n      minOutAmount: outAmountMeta.minimum.out,\n      inAmount: outAmountMeta.inAmount,\n      outAmount: outAmountMeta.outAmount,\n      feeAmount: outAmountMeta.feeAmount,\n      feeMint: this.market.quoteMintAddress.toBase58(),\n      feePct: outAmountMeta.feePct,\n      priceImpactPct: outAmountMeta.priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    if (!swapParams.openOrdersAddress) {\n      throw new Error('Missing open orders');\n    }\n\n    return [\n      createSerumSwapInstruction({\n        market: this.market,\n        openOrdersAddress: swapParams.openOrdersAddress,\n        referrer: swapParams?.quoteMintToReferrer?.get(this.market.quoteMintAddress.toBase58()),\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.market.baseMintAddress, this.market.quoteMintAddress];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\nimport { getTwoPermutations } from '../../utils/getTwoPermutations';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { RaydiumAmm } from '../raydium/raydiumAmm';\nimport { createRiskCheckAndFeeInstruction } from '../jupiterInstruction';\nimport { SerumAmm } from '../serum/serumAmm';\nimport { SerumMarket } from '../market';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ninterface SplitSolution {\n  outAmount: JSBI;\n  portion: number;\n  firstQuote: Quote | undefined;\n  secondQuote: Quote | undefined;\n}\n\nfunction isSplitSupported(firstAmm: Amm, secondAmm: Amm) {\n  if (\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm) ||\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm)\n  ) {\n    return false;\n  }\n  return true;\n}\n\nconst HUNDRED = JSBI.BigInt(100);\n\n// Create an iteration to quote with a stepped split\nexport class SplitTradeAmm implements Amm {\n  market: SerumMarket | null;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n  private portion1: number = 0;\n  private portion2: number = 0;\n\n  constructor(public firstAmm: Amm, public secondAmm: Amm, public reserveTokenMints: PublicKey[]) {\n    this.market =\n      firstAmm instanceof SerumAmm ? firstAmm.market : secondAmm instanceof SerumAmm ? secondAmm.market : null;\n  }\n\n  static getAmmIdsFromSplitTradeAmmId(id: string): string[] {\n    const ammIds = id.split('-');\n\n    return ammIds.length > 1 ? ammIds : [];\n  }\n\n  static create(firstAmm: Amm, secondAmm: Amm) {\n    if (!isSplitSupported(firstAmm, secondAmm)) return;\n\n    const firstAmmTwoPermutations = getTwoPermutations(firstAmm.reserveTokenMints);\n    const secondAmmTwoPermutations = getTwoPermutations(secondAmm.reserveTokenMints);\n\n    for (const firstAmmTwoPermutation of firstAmmTwoPermutations) {\n      for (const secondAmmTwoPermutation of secondAmmTwoPermutations) {\n        if (firstAmmTwoPermutation.every((value, index) => value.equals(secondAmmTwoPermutation[index]))) {\n          return new SplitTradeAmm(firstAmm, secondAmm, firstAmmTwoPermutation);\n        }\n      }\n    }\n  }\n\n  setPortions(portion1: number, portion2: number) {\n    if (portion1 + portion2 !== 100) {\n      throw new Error('Split trade portions must sum to 100');\n    }\n\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n  }\n\n  get id() {\n    return `${this.firstAmm.id}-${this.secondAmm.id}`;\n  }\n\n  get label() {\n    const labelWithPortions = [\n      { label: this.firstAmm.label, portion: this.portion1 },\n      { label: this.secondAmm.label, portion: this.portion2 },\n    ].sort((a, b) => b.portion - a.portion);\n\n    return labelWithPortions.map(({ label, portion }) => `${label} (${portion}%)`).join(' + ');\n  }\n\n  getAccountsForUpdate() {\n    return [];\n  }\n\n  update(_accountInfoMap: AccountInfoMap) {\n    // Underlying amms are updated\n  }\n\n  getQuote(quoteParams: QuoteParams): Quote {\n    const sourceMintString = quoteParams.sourceMint.toBase58();\n    const amount = quoteParams.amount;\n    // Portion in % directly to please the UI\n    let bestSolution: SplitSolution = {\n      outAmount: ZERO,\n      portion: 0,\n      firstQuote: undefined,\n      secondQuote: undefined,\n    };\n\n    // Increase portion until 100\n    for (let p = 100; (p -= 5); p > 0) {\n      const firstAmount = JSBI.divide(JSBI.multiply(amount, JSBI.BigInt(p)), HUNDRED);\n      const secondAmount = JSBI.subtract(amount, firstAmount);\n\n      const firstQuote = this.firstAmm.getQuote({\n        ...quoteParams,\n        amount: firstAmount,\n      });\n      const secondQuote = this.secondAmm.getQuote({\n        ...quoteParams,\n        amount: secondAmount,\n      });\n      const outAmount = JSBI.add(firstQuote.outAmount, secondQuote.outAmount);\n\n      if (JSBI.lessThan(outAmount, bestSolution.outAmount)) {\n        break;\n      }\n\n      bestSolution = {\n        outAmount,\n        portion: p,\n        firstQuote,\n        secondQuote,\n      };\n    }\n\n    if (!bestSolution.firstQuote || !bestSolution.secondQuote) {\n      throw new Error('Unreachable: There was no better solution than getting 0 outAmount');\n    }\n\n    const { outAmount, portion, firstQuote, secondQuote } = bestSolution;\n    const portion1 = portion;\n    const portion2 = 100 - portion1;\n\n    // For UI display\n    this.portion1 = portion1;\n    this.portion2 = portion2;\n\n    let firstAmmFee = {\n      amount: firstQuote.feeAmount,\n      mint: firstQuote.feeMint,\n    };\n    let secondAmmFee = {\n      amount: secondQuote.feeAmount,\n      mint: secondQuote.feeMint,\n    };\n\n    if (firstAmmFee.mint !== secondAmmFee.mint) {\n      // Then we convert destinationMint fee into a sourceMint, to please the current data structure\n      // This will lead to inexact fees but this doesn't affect the user minimum out amount\n      if (firstAmmFee.mint !== sourceMintString) {\n        firstAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(firstAmmFee.amount, JSBI.multiply(amount, JSBI.BigInt(portion1))), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n      if (secondAmmFee.mint !== sourceMintString) {\n        secondAmmFee = {\n          amount: JSBI.divide(\n            JSBI.divide(JSBI.multiply(JSBI.multiply(secondAmmFee.amount, amount), JSBI.BigInt(portion2)), HUNDRED),\n            bestSolution.outAmount,\n          ),\n          mint: sourceMintString,\n        };\n      }\n    }\n\n    const feePct = (portion1 * firstQuote.feePct + portion2 * secondQuote.feePct) / 100;\n    const priceImpactPct = (portion1 * firstQuote.priceImpactPct + portion2 * secondQuote.priceImpactPct) / 100;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: quoteParams.amount,\n      outAmount: outAmount,\n      feeAmount: JSBI.add(firstAmmFee.amount, secondAmmFee.amount),\n      feeMint: firstAmmFee.mint, // Guaranteed identical mint at this point\n      feePct,\n      priceImpactPct,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const inAmount = swapParams.amount;\n    if (inAmount === null) {\n      throw new Error('Split trade cannot be used with a null inAmount');\n    }\n\n    // We rely on the fact that this.portion1 is set, what if it isn't?\n    const firstAmount = inAmount.mul(new BN(this.portion1)).div(new BN(HUNDRED.toString()));\n    const secondAmount = inAmount.sub(firstAmount);\n\n    return [\n      ...this.firstAmm.createSwapInstructions({\n        ...swapParams,\n        amount: firstAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      ...this.secondAmm.createSwapInstructions({\n        ...swapParams,\n        amount: secondAmount,\n        otherAmountThreshold: new BN(0),\n        platformFee: undefined,\n      }),\n      createRiskCheckAndFeeInstruction(\n        swapParams.userDestinationTokenAccount,\n        swapParams.userTransferAuthority,\n        new BN(swapParams.otherAmountThreshold.toString()),\n        swapParams.tokenLedger,\n        swapParams.platformFee,\n      ),\n    ];\n  }\n}\n","import { Market as SerumMarket } from '@project-serum/serum';\nimport { PublicKey } from '@solana/web3.js';\nimport { StableSwap } from '@saberhq/stableswap-sdk';\nimport { SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { Amm } from './amm';\nimport JSBI from 'jsbi';\n\nexport interface Fee {\n  amount: JSBI;\n  mint: string;\n  pct: number;\n}\n\nexport { SerumMarket, StableSwap };\n\nexport interface MarketInfo {\n  amm: Amm; //name: string, // pair for serum, pool name for mer pool\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  minInAmount?: JSBI;\n  minOutAmount?: JSBI;\n  inAmount: JSBI;\n  outAmount: JSBI;\n  notEnoughLiquidity: boolean;\n  priceImpactPct: number;\n  lpFee: Fee;\n  platformFee: Fee;\n}\n\n// This is to check if the two markets are supported by the aggregator\nexport const isValidRoute = (ammA: Amm, ammB: Amm) => {\n  // dont match the same amm together\n  if (ammA.id === ammB.id) {\n    return false;\n  }\n  // don't show decimal as input or output\n  else if (ammA instanceof SaberAddDecimalsAmm && ammB instanceof SaberAddDecimalsAmm) {\n    return false;\n  } else if (ammA instanceof SplitTradeAmm || ammB instanceof SplitTradeAmm) {\n    return false;\n  }\n\n  return true;\n};\n\nexport function isSerumAndRaydium(marketInfos: MarketInfo[]) {\n  if (marketInfos.length < 2) return false;\n\n  const [firstAmm, secondAmm] = marketInfos.map((mi) => mi.amm);\n\n  return (\n    (firstAmm instanceof RaydiumAmm && secondAmm instanceof SerumAmm) ||\n    (firstAmm instanceof SerumAmm && secondAmm instanceof RaydiumAmm)\n  );\n}\n","import { calculateAmpFactor, StableSwap } from '@saberhq/stableswap-sdk';\nimport { PublicKey } from '@solana/web3.js';\nimport { Fraction, ONE, Stable, TWO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createSaberSwapInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo } from '@solana/spl-token';\n\nexport class SaberAmm implements Amm {\n  id: string;\n  label = 'Saber' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenAccounts: AccountInfo[] = [];\n  private calculator: Stable;\n\n  constructor(private stableSwap: StableSwap) {\n    this.id = stableSwap.config.swapAccount.toBase58();\n\n    this.calculator = new Stable(\n      TWO,\n      calculateAmpFactor(this.stableSwap.state),\n      [ONE, ONE],\n      new Fraction(this.stableSwap.state.fees.trade.numerator, this.stableSwap.state.fees.trade.denominator),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.stableSwap.state.tokenA.reserve, this.stableSwap.state.tokenB.reserve];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account data');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const feePct = new Decimal(this.stableSwap.state.fees.trade.asFraction.toFixed(4));\n\n    const [inputIndex, outputIndex] = this.tokenAccounts[0].mint.equals(sourceMint) ? [0, 1] : [1, 0];\n\n    this.calculator.setAmp(calculateAmpFactor(this.stableSwap.state));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createSaberSwapInstruction({\n        stableSwap: this.stableSwap,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.stableSwap.state.tokenA.mint, this.stableSwap.state.tokenB.mint];\n  }\n}\n","import { u64 } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\nconst ZERO = new u64(0);\n\nexport class Percentage {\n  readonly numerator: u64;\n  readonly denominator: u64;\n\n  constructor(numerator: u64, denominator: u64) {\n    this.numerator = numerator;\n    this.denominator = denominator;\n  }\n\n  public static fromDecimal(number: Decimal): Percentage {\n    return Percentage.fromFraction(number.toDecimalPlaces(1).mul(10).toNumber(), 1000);\n  }\n\n  public static fromFraction(numerator: u64 | number, denominator: u64 | number): Percentage {\n    const num = typeof numerator === 'number' ? new u64(numerator.toString()) : numerator;\n    const denom = typeof denominator === 'number' ? new u64(denominator.toString()) : denominator;\n    return new Percentage(num, denom);\n  }\n\n  public toString = (): string => {\n    return `${this.numerator.toString()}/${this.denominator.toString()}`;\n  };\n\n  public toDecimal() {\n    if (this.denominator.eq(ZERO)) {\n      return new Decimal(0);\n    }\n    return new Decimal(this.numerator.toString()).div(new Decimal(this.denominator.toString()));\n  }\n\n  public add(p2: Percentage): Percentage {\n    const denomGcd = this.denominator.gcd(p2.denominator);\n    const denomLcm = this.denominator.div(denomGcd).mul(p2.denominator);\n\n    const p1DenomAdjustment = denomLcm.div(this.denominator);\n    const p2DenomAdjustment = denomLcm.div(p2.denominator);\n\n    const p1NumeratorAdjusted = this.numerator.mul(p1DenomAdjustment);\n    const p2NumeratorAdjusted = p2.numerator.mul(p2DenomAdjustment);\n\n    const newNumerator = p1NumeratorAdjusted.add(p2NumeratorAdjusted);\n\n    return new Percentage(new u64(newNumerator.toString()), new u64(denomLcm.toString()));\n  }\n}\n","import { struct, blob, u8, Structure } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { ALDRIN_SWAP_V2_PROGRAM_ID } from '../../constants';\nimport { publicKey, rustEnum, uint64 } from '../../utils/layout';\nimport { Percentage } from './percentage';\n\ntype FeeStructure = {\n  traderFee: Percentage;\n  ownerFee: Percentage;\n};\n\ninterface FeeLayout {\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n}\n\n// https://github.com/aldrin-exchange/aldrin-sdk/blob/78527e3adfc02e186956f420b5083fa0950e7263/src/pools/layout.ts\nconst FEES_LAYOUT = struct<FeeLayout>(\n  [\n    uint64('tradeFeeNumerator'),\n    uint64('tradeFeeDenominator'),\n    uint64('ownerTradeFeeNumerator'),\n    uint64('ownerTradeFeeDenominator'),\n    uint64('ownerWithdrawFeeNumerator'),\n    uint64('ownerWithdrawFeeDenominator'),\n  ],\n  'fees',\n);\n\nconst POOL_FIELDS_COMMON = [\n  blob(8, 'padding'),\n  publicKey('lpTokenFreezeVault'),\n  publicKey('poolMint'),\n  publicKey('baseTokenVault'),\n  publicKey('baseTokenMint'),\n  publicKey('quoteTokenVault'),\n  publicKey('quoteTokenMint'),\n  publicKey('poolSigner'),\n  u8('poolSignerNonce'),\n  publicKey('authority'),\n  publicKey('initializerAccount'),\n  publicKey('feeBaseAccount'),\n  publicKey('feeQuoteAccount'),\n  publicKey('feePoolTokenAccount'),\n  FEES_LAYOUT,\n];\n\ninterface PoolLayout {\n  padding: any;\n  lpTokenFreezeVault: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  poolSignerNonce: number;\n  authority: PublicKey;\n  initializerAccount: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeLayout;\n}\n\nexport const POOL_LAYOUT = struct<PoolLayout>(POOL_FIELDS_COMMON);\n\ninterface PoolV2Layout extends PoolLayout {\n  curveType: number;\n  curve: PublicKey;\n}\n\nexport const POOL_V2_LAYOUT = struct<PoolV2Layout>([...POOL_FIELDS_COMMON, u8('curveType'), publicKey('curve')]);\n\ninterface StableCurveLayout {\n  padding: any;\n  amp: u64;\n}\n\nexport const STABLE_CURVE_LAYOUT = struct<StableCurveLayout>([blob(8, 'padding'), uint64('amp')]);\n\ninterface SwapInstructionLayout {\n  instruction: any;\n  tokens: u64;\n  minTokens: u64;\n  side: 'bid' | 'ask';\n}\n\nexport const SWAP_INSTRUCTION_LAYOUT = struct<SwapInstructionLayout>([\n  blob(8, 'instruction'),\n  uint64('tokens'),\n  uint64('minTokens'),\n  rustEnum([new Structure([], 'bid'), new Structure([], 'ask')], 'side'),\n]);\n\nexport function accountInfoToAldrinPoolState(address: PublicKey, accountInfo: AccountInfo<Buffer>): AldrinPoolState {\n  const isV2 = accountInfo.owner.equals(ALDRIN_SWAP_V2_PROGRAM_ID) ? true : false;\n\n  const decoded: PoolV2Layout | PoolLayout = (isV2 ? POOL_V2_LAYOUT : POOL_LAYOUT).decode(accountInfo.data) as\n    | PoolV2Layout\n    | PoolLayout;\n\n  const curveObject = 'curveType' in decoded ? { curveType: decoded.curveType, curve: decoded.curve } : {};\n\n  return {\n    isV2,\n    address,\n    poolMint: decoded.poolMint,\n    baseTokenVault: decoded.baseTokenVault,\n    baseTokenMint: decoded.baseTokenMint,\n    quoteTokenVault: decoded.quoteTokenVault,\n    quoteTokenMint: decoded.quoteTokenMint,\n    poolSigner: decoded.poolSigner,\n    feeBaseAccount: decoded.feeBaseAccount,\n    feeQuoteAccount: decoded.feeQuoteAccount,\n    feePoolTokenAccount: decoded.feePoolTokenAccount,\n    fees: {\n      traderFee: Percentage.fromFraction(decoded.fees.tradeFeeNumerator, decoded.fees.tradeFeeDenominator),\n      ownerFee: Percentage.fromFraction(decoded.fees.ownerTradeFeeNumerator, decoded.fees.ownerTradeFeeDenominator),\n    },\n    ...curveObject,\n  };\n}\n\nexport interface AldrinPoolState {\n  isV2: Boolean;\n  address: PublicKey;\n  poolMint: PublicKey;\n  baseTokenVault: PublicKey;\n  baseTokenMint: PublicKey;\n  quoteTokenVault: PublicKey;\n  quoteTokenMint: PublicKey;\n  poolSigner: PublicKey;\n  feeBaseAccount: PublicKey;\n  feeQuoteAccount: PublicKey;\n  feePoolTokenAccount: PublicKey;\n  fees: FeeStructure;\n  curveType?: number;\n  curve?: PublicKey;\n}\n","import { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createAldrinSwapInstruction, createAldrinV2SwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToAldrinPoolState, AldrinPoolState, STABLE_CURVE_LAYOUT } from './poolState';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport Decimal from 'decimal.js';\n\ninterface AldrinParams {\n  amp?: number;\n}\n\nexport class AldrinAmm implements Amm {\n  id: string;\n  label = 'Aldrin' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: AldrinPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: AldrinParams) {\n    this.poolState = accountInfoToAldrinPoolState(address, accountInfo);\n    this.id = address.toBase58();\n\n    if (this.poolState.curveType === 1) {\n      const { amp } = this.params;\n      if (!amp) {\n        throw new Error('Amp is required for a stable curve');\n      }\n\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(amp),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.traderFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.traderFee.denominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.poolState.fees.ownerFee.numerator.toString()),\n          JSBI.BigInt(this.poolState.fees.ownerFee.denominator.toString()),\n        ),\n      );\n    }\n  }\n\n  static accountInfoToAldrinPoolState = accountInfoToAldrinPoolState;\n\n  static decodeStableCurveAmp(accountInfo: AccountInfo<Buffer>) {\n    const { amp } = STABLE_CURVE_LAYOUT.decode(accountInfo.data);\n\n    return amp.toNumber() * 2; // times two for their AMP, dont ask me why, it is what it is\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.quoteTokenVault, this.poolState.baseTokenVault];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) throw new Error('Invalid token account');\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.poolState.fees.traderFee.numerator.toString())\n      .div(this.poolState.fees.traderFee.denominator.toString())\n      .add(\n        new Decimal(this.poolState.fees.ownerFee.numerator.toString()).div(\n          this.poolState.fees.ownerFee.denominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    if (this.poolState.isV2) {\n      if (!this.poolState.curve) {\n        throw new Error('Unable to fetch curve account.');\n      }\n\n      const curve = this.poolState.curve;\n      return [\n        createAldrinV2SwapInstruction({\n          poolState: this.poolState,\n          curve,\n          ...swapParams,\n          inAmount: swapParams.amount,\n          minimumOutAmount: swapParams.otherAmountThreshold,\n        }),\n      ];\n    }\n\n    return [\n      createAldrinSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.baseTokenMint, this.poolState.quoteTokenMint];\n  }\n}\n","import { PublicKey } from '@solana/web3.js';\n\nexport const STEP_TOKEN_SWAP_PROGRAM_ID = new PublicKey('SSwpMgqNDsyV7mAgN9ady4bDVu5ySjmmXejXvy2vLt1');\n\nexport const PROGRAM_ID_TO_LABEL = new Map<string, string>([\n  ['9W959DqEETiGZocYWCQPaJ6sBmUzgfxXfqGeTEdp3aQP', 'Orca'],\n  [STEP_TOKEN_SWAP_PROGRAM_ID.toBase58(), 'Step'],\n  ['PSwapMdSai8tjrEXcxFeQth87xC4rRsa4VA5mhGhXkP', 'Penguin'],\n  ['SSwapUtytfBdBn1b9NUGG6foMVPtcWgpRU32HToDUZr', 'Saros'],\n  ['Dooar9JkhdZ7J3LHN3A7YCuoGRUggXhQaG4kijfLGU2j', 'Stepn'],\n]);\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, blob } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { publicKey, uint64 } from '../../utils/layout';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\ninterface TokenSwapLayout {\n  version: number;\n  isInitialized: number;\n  bumpSeed: number;\n  tokenProgramId: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenPool: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  feeAccount: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  hostFeeNumerator: u64;\n  hostFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n}\n\nconst TokenSwapLayout = struct<TokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  uint64('hostFeeNumerator'),\n  uint64('hostFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n]);\n\ninterface StepTokenSwapLayout extends TokenSwapLayout {\n  poolNonce: u64;\n}\n\nconst StepTokenSwapLayout = struct<StepTokenSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('bumpSeed'),\n  publicKey('tokenProgramId'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenPool'),\n  publicKey('mintA'),\n  publicKey('mintB'),\n  publicKey('feeAccount'),\n  uint64('tradeFeeNumerator'),\n  uint64('tradeFeeDenominator'),\n  uint64('ownerTradeFeeNumerator'),\n  uint64('ownerTradeFeeDenominator'),\n  uint64('ownerWithdrawFeeNumerator'),\n  uint64('ownerWithdrawFeeDenominator'),\n  u8('curveType'),\n  blob(32, 'curveParameters'),\n  u8('poolNonce'),\n]);\n\nexport interface TokenSwapState {\n  address: PublicKey;\n  programId: PublicKey;\n  tokenProgramId: PublicKey;\n  poolToken: PublicKey;\n  feeAccount: PublicKey;\n  authority: PublicKey;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  tradeFeeNumerator: u64;\n  tradeFeeDenominator: u64;\n  ownerTradeFeeNumerator: u64;\n  ownerTradeFeeDenominator: u64;\n  ownerWithdrawFeeNumerator: u64;\n  ownerWithdrawFeeDenominator: u64;\n  curveType: number;\n  curveParameters: Uint8Array;\n  poolNonce?: u64;\n}\n\nexport function accountInfoToTokenSwapState(\n  address: PublicKey,\n  tokenSwapAccountInfo: AccountInfo<Buffer>,\n): TokenSwapState {\n  const programId = tokenSwapAccountInfo.owner;\n\n  // The layout difference only affects fields we do not actively use\n  const tokenSwapData = (\n    programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID)\n      ? StepTokenSwapLayout.decode(tokenSwapAccountInfo.data)\n      : TokenSwapLayout.decode(tokenSwapAccountInfo.data)\n  ) as TokenSwapLayout | StepTokenSwapLayout;\n\n  if (!tokenSwapData.isInitialized) {\n    throw new Error(`Invalid token swap state`);\n  }\n\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const poolToken = new PublicKey(tokenSwapData.tokenPool);\n  const feeAccount = new PublicKey(tokenSwapData.feeAccount);\n  const tokenAccountA = new PublicKey(tokenSwapData.tokenAccountA);\n  const tokenAccountB = new PublicKey(tokenSwapData.tokenAccountB);\n  const mintA = new PublicKey(tokenSwapData.mintA);\n  const mintB = new PublicKey(tokenSwapData.mintB);\n  const tokenProgramId = new PublicKey(tokenSwapData.tokenProgramId);\n\n  const tradeFeeNumerator = tokenSwapData.tradeFeeNumerator;\n  const tradeFeeDenominator = tokenSwapData.tradeFeeDenominator;\n  const ownerTradeFeeNumerator = tokenSwapData.ownerTradeFeeNumerator;\n  const ownerTradeFeeDenominator = tokenSwapData.ownerTradeFeeDenominator;\n  const ownerWithdrawFeeNumerator = tokenSwapData.ownerWithdrawFeeNumerator;\n  const ownerWithdrawFeeDenominator = tokenSwapData.ownerWithdrawFeeDenominator;\n\n  const curveType = tokenSwapData.curveType;\n  const curveParameters = tokenSwapData.curveParameters;\n\n  const poolNonce = 'poolNonce' in tokenSwapData ? tokenSwapData.poolNonce : undefined;\n\n  return {\n    address,\n    programId,\n    tokenProgramId,\n    poolToken,\n    feeAccount,\n    authority,\n    tokenAccountA,\n    tokenAccountB,\n    mintA,\n    mintB,\n    tradeFeeNumerator,\n    tradeFeeDenominator,\n    ownerTradeFeeNumerator,\n    ownerTradeFeeDenominator,\n    ownerWithdrawFeeNumerator,\n    ownerWithdrawFeeDenominator,\n    curveType,\n    curveParameters,\n    poolNonce,\n  };\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  SwapParams,\n  tokenAccountsToJSBIs,\n} from '../amm';\nimport { createTokenSwapInstruction } from '../jupiterInstruction';\nimport { accountInfoToTokenSwapState, TokenSwapState } from './tokenSwapLayout';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { Fraction, TokenSwapConstantProduct, TokenSwapStable } from '@jup-ag/math';\nimport JSBI from 'jsbi';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { STEP_TOKEN_SWAP_PROGRAM_ID } from './splTokenSwapPools';\n\nenum CurveType {\n  ConstantProduct = 0,\n  Stable = 2,\n}\n\n// Abstract any SPL token swap based AMM\nexport class SplTokenSwapAmm implements Amm {\n  id: string;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private tokenSwapState: TokenSwapState;\n  private curveType: CurveType;\n\n  private tokenAccounts: TokenAccountInfo[] = [];\n  calculator: TokenSwapConstantProduct | TokenSwapStable;\n\n  constructor(address: PublicKey, swapStateAccountInfo: AccountInfo<Buffer>, public label: string) {\n    this.id = address.toBase58();\n    this.tokenSwapState = accountInfoToTokenSwapState(address, swapStateAccountInfo);\n\n    this.curveType = this.tokenSwapState.curveType;\n\n    if (!(this.curveType in CurveType)) {\n      throw new Error(`curveType ${this.tokenSwapState.curveType} is not supported`);\n    }\n\n    if (this.tokenSwapState.curveType === CurveType.ConstantProduct) {\n      this.calculator = new TokenSwapConstantProduct(\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    } else {\n      this.calculator = new TokenSwapStable(\n        JSBI.BigInt(this.tokenSwapState.curveParameters[0]),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.tradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.tradeFeeDenominator.toString()),\n        ),\n        new Fraction(\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeNumerator.toString()),\n          JSBI.BigInt(this.tokenSwapState.ownerTradeFeeDenominator.toString()),\n        ),\n      );\n    }\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.tokenSwapState.tokenAccountA, this.tokenSwapState.tokenAccountB];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    let feePct = new Decimal(this.tokenSwapState.tradeFeeNumerator.toString())\n      .div(this.tokenSwapState.tradeFeeDenominator.toString())\n      .add(\n        new Decimal(this.tokenSwapState.ownerTradeFeeNumerator.toString()).div(\n          this.tokenSwapState.ownerTradeFeeDenominator.toString(),\n        ),\n      );\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    return [\n      createTokenSwapInstruction({\n        tokenSwapState: this.tokenSwapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        isStep: this.tokenSwapState.programId.equals(STEP_TOKEN_SWAP_PROGRAM_ID),\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.tokenSwapState.mintA, this.tokenSwapState.mintB];\n  }\n}\n","import { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { struct, u8, u32 } from '@solana/buffer-layout';\nimport { u64 } from '@solana/spl-token';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { uint64, publicKey } from '../../utils/layout';\n\nexport const FEE_DENOMINATOR = Math.pow(10, 10);\n\ninterface MercurialSwapLayout {\n  version: number;\n  isInitialized: number;\n  nonce: number;\n  amplificationCoefficient: u64;\n  feeNumerator: u64;\n  adminFeeNumerator: u64;\n  tokenAccountsLength: number;\n  precisionFactor: u64;\n  precisionMultiplierA: u64;\n  precisionMultiplierB: u64;\n  precisionMultiplierC: u64;\n  precisionMultiplierD: u64;\n  tokenAccountA: PublicKey;\n  tokenAccountB: PublicKey;\n  tokenAccountC: PublicKey;\n  tokenAccountD: PublicKey;\n}\n\nexport const MercurialSwapLayout = struct<MercurialSwapLayout>([\n  u8('version'),\n  u8('isInitialized'),\n  u8('nonce'),\n  uint64('amplificationCoefficient'),\n  uint64('feeNumerator'),\n  uint64('adminFeeNumerator'),\n  u32('tokenAccountsLength'),\n  uint64('precisionFactor'),\n  uint64('precisionMultiplierA'),\n  uint64('precisionMultiplierB'),\n  uint64('precisionMultiplierC'),\n  uint64('precisionMultiplierD'),\n  publicKey('tokenAccountA'),\n  publicKey('tokenAccountB'),\n  publicKey('tokenAccountC'),\n  publicKey('tokenAccountD'),\n]);\n\nexport interface MercurialSwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  amplificationCoefficient: number;\n  feeNumerator: number;\n  tokenAccountsLength: number;\n  precisionFactor: number;\n  precisionMultipliers: number[];\n  tokenAccounts: PublicKey[];\n}\n\nexport const accountInfoToMercurialSwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): MercurialSwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = MercurialSwapLayout.decode(accountInfo.data);\n  const tokenAccountsLength = decoded.tokenAccountsLength;\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  const precisionMultipliers = [\n    decoded.precisionMultiplierA.toNumber(),\n    decoded.precisionMultiplierB.toNumber(),\n    decoded.precisionMultiplierC.toNumber(),\n    decoded.precisionMultiplierD.toNumber(),\n  ].slice(0, tokenAccountsLength);\n\n  const tokenAccounts = [\n    decoded.tokenAccountA,\n    decoded.tokenAccountB,\n    decoded.tokenAccountC,\n    decoded.tokenAccountD,\n  ].slice(0, tokenAccountsLength);\n\n  return {\n    programId,\n    authority,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    amplificationCoefficient: decoded.amplificationCoefficient.toNumber(),\n    feeNumerator: decoded.feeNumerator.toNumber(),\n    tokenAccountsLength,\n    precisionFactor: decoded.precisionFactor.toNumber(),\n    precisionMultipliers,\n    tokenAccounts,\n  };\n};\n","import { Fraction, Stable } from '@jup-ag/math';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createMercurialExchangeInstruction } from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { accountInfoToMercurialSwapLayout, FEE_DENOMINATOR, MercurialSwapLayoutState } from './swapLayout';\n\ninterface MercurialParams {\n  tokenMints: string[];\n}\n\nexport class MercurialAmm implements Amm {\n  id: string;\n  label = 'Mercurial';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  swapLayout: MercurialSwapLayoutState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: Stable;\n\n  static decodeSwapLayout = accountInfoToMercurialSwapLayout;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: MercurialParams) {\n    this.id = address.toBase58();\n    this.swapLayout = accountInfoToMercurialSwapLayout(address, accountInfo);\n    this.calculator = new Stable(\n      JSBI.BigInt(this.swapLayout.tokenAccountsLength),\n      JSBI.BigInt(this.swapLayout.amplificationCoefficient),\n      this.swapLayout.precisionMultipliers.map((precisionMultiplier) => JSBI.BigInt(precisionMultiplier)),\n      new Fraction(JSBI.BigInt(this.swapLayout.feeNumerator), JSBI.BigInt(FEE_DENOMINATOR)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return this.swapLayout.tokenAccounts;\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    let tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos\n      .map((info) => deserializeAccount(info.data))\n      .filter((x): x is TokenAccountInfo => x !== null);\n  }\n\n  getQuote({ sourceMint, destinationMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const inputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(sourceMint));\n    const outputIndex = this.tokenAccounts.findIndex((tokenAccount) => tokenAccount.mint.equals(destinationMint));\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, inputIndex, outputIndex);\n\n    const feePct = this.swapLayout.feeNumerator / FEE_DENOMINATOR;\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: destinationMint.toBase58(),\n      feePct: feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createMercurialExchangeInstruction({\n        swapLayout: this.swapLayout,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return this.params.tokenMints.map((tokenMint) => new PublicKey(tokenMint));\n  }\n}\n","import { Fraction, TokenSwapConstantProduct } from '@jup-ag/math';\nimport { AccountInfo, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { createCropperSwapInstruction } from '../jupiterInstruction';\n\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport {\n  accountInfoToCropperPoolState,\n  CropperPoolState,\n  stateAccountInfoToCropperState,\n  CROPPER_STATE_ADDRESS,\n} from './swapLayout';\nimport Decimal from 'decimal.js';\n\ninterface CropperParams {\n  tokenAFeeAccount: PublicKey;\n  tokenBFeeAccount: PublicKey;\n  returnFeeNumerator: number;\n  fixedFeeNumerator: number;\n  feeDenominator: number;\n}\n\nexport class CropperAmm implements Amm {\n  id: string;\n  label = 'Cropper' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: CropperPoolState;\n  private tokenAccounts: TokenAccountInfo[] = [];\n  private calculator: TokenSwapConstantProduct;\n  private feePct: Decimal;\n\n  // Hardcoded because no where to query this\n  static async getStateFromStateAccount(connection: Connection) {\n    const accountInfo = await connection.getAccountInfo(CROPPER_STATE_ADDRESS);\n\n    if (!accountInfo) {\n      throw new Error('State account not found');\n    }\n\n    return stateAccountInfoToCropperState(accountInfo);\n  }\n\n  static decodePoolState = accountInfoToCropperPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>, private params: CropperParams) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToCropperPoolState(address, accountInfo);\n\n    this.feePct = new Decimal(this.params.fixedFeeNumerator)\n      .div(this.params.feeDenominator)\n      .add(new Decimal(this.params.returnFeeNumerator).div(this.params.feeDenominator));\n\n    this.params.tokenAFeeAccount = new PublicKey(this.params.tokenAFeeAccount);\n    this.params.tokenBFeeAccount = new PublicKey(this.params.tokenBFeeAccount);\n\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(JSBI.BigInt(this.params.fixedFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n      new Fraction(JSBI.BigInt(this.params.returnFeeNumerator), JSBI.BigInt(this.params.feeDenominator)),\n    );\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.tokenAAccount, this.poolState.tokenBAccount];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    const result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const feeAccount = swapParams.sourceMint.equals(this.poolState.mintA)\n      ? this.params.tokenAFeeAccount\n      : this.params.tokenBFeeAccount;\n\n    return [\n      createCropperSwapInstruction({\n        poolState: this.poolState,\n        feeAccount,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { TokenSwapAccountLayout } from '@jup-ag/crema-sdk';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\n\nexport interface CremaPoolState {\n  programId: PublicKey;\n  authority: PublicKey;\n  version: number;\n  isInitialized: boolean;\n  nonce: number;\n  ammId: PublicKey;\n  tokenProgramId: PublicKey;\n  tokenAAccount: PublicKey;\n  tokenBAccount: PublicKey;\n  ticksKey: PublicKey;\n  mintA: PublicKey;\n  mintB: PublicKey;\n  fee: Decimal;\n  currentSqrtPrice: Decimal;\n  currentLiquity: Decimal;\n}\n\nexport const accountInfoToCremaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): CremaPoolState => {\n  const programId = accountInfo.owner;\n\n  const decoded = TokenSwapAccountLayout.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    version: decoded.version,\n    isInitialized: Boolean(decoded.isInitialized),\n    nonce: decoded.nonce,\n    ammId: address,\n    tokenProgramId: decoded.tokenProgramId,\n    tokenAAccount: decoded.swapTokenA,\n    tokenBAccount: decoded.swapTokenB,\n    ticksKey: decoded.ticksKey,\n    mintA: decoded.tokenAMint,\n    mintB: decoded.tokenBMint,\n    fee: decoded.fee,\n    currentSqrtPrice: decoded.currentSqrtPrice,\n    currentLiquity: decoded.currentLiquity,\n  };\n};\n","import { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { accountInfoToCremaPoolState, CremaPoolState } from './swapLayout';\nimport { createCremaSwapInstruction } from '../jupiterInstruction';\nimport { calculateSwapA2B, calculateSwapB2A, parseTicksAccount, Tick } from '@jup-ag/crema-sdk';\nimport Decimal from 'decimal.js';\nimport { ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class CremaAmm implements Amm {\n  id: string;\n  label = 'Crema';\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private ticks: Tick[] | undefined;\n  private poolState: CremaPoolState;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.poolState = accountInfoToCremaPoolState(address, accountInfo);\n    this.id = address.toBase58();\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.ammId, this.poolState.ticksKey];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const [tokenSwapAccountInfo, ticksAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.poolState = accountInfoToCremaPoolState(this.poolState.ammId, tokenSwapAccountInfo);\n\n    const ticksInfo = parseTicksAccount(this.poolState.ticksKey, ticksAccountInfo);\n    if (!ticksInfo) throw new Error(`Ticks account invalid: ${this.poolState.ticksKey.toBase58()}`);\n    this.ticks = ticksInfo.data.ticks;\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    // Crema SDK doesn't support 0 amount input\n    if (JSBI.equal(amount, ZERO)) {\n      return {\n        notEnoughLiquidity: false,\n        inAmount: amount,\n        outAmount: ZERO,\n        feeAmount: ZERO,\n        feeMint: sourceMint.toBase58(),\n        feePct: this.poolState.fee.toNumber(),\n        priceImpactPct: 0,\n      };\n    }\n\n    const result = this.poolState.mintA.equals(sourceMint)\n      ? this.preSwapA(new Decimal(amount.toString()))\n      : this.preSwapB(new Decimal(amount.toString()));\n\n    if (result.revert) {\n      throw new Error('Crema error: insufficient liquidity');\n    }\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountOut.toString()),\n      feeAmount: JSBI.BigInt(result.feeUsed.toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.poolState.fee.toNumber(),\n      priceImpactPct: result.impact.toNumber(),\n    };\n  }\n\n  preSwapA(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapA2B(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const transactionPriceA = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceA.sub(currentPriceA).div(currentPriceA).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  preSwapB(amountIn: Decimal): {\n    amountOut: Decimal;\n    amountUsed: Decimal;\n    feeUsed: Decimal;\n    afterPrice: Decimal;\n    afterLiquity: Decimal;\n    impact: Decimal;\n    revert: boolean;\n  } {\n    if (!this.ticks) {\n      throw new Error('Unable to fetch accounts for ticks.');\n    }\n\n    const result = calculateSwapB2A(\n      this.ticks,\n      this.poolState.currentSqrtPrice,\n      this.poolState.fee,\n      this.poolState.currentLiquity,\n      amountIn,\n    );\n\n    const currentPriceA = this.poolState.currentSqrtPrice.pow(2);\n    const currentPriceB = new Decimal(1).div(currentPriceA);\n    const transactionPriceB = result.amountOut.div(result.amountUsed);\n    const impact = transactionPriceB.sub(currentPriceB).div(currentPriceB).abs();\n    const revert = result.amountUsed.lessThan(amountIn);\n\n    return {\n      ...result,\n      impact,\n      revert,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createCremaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.mintA, this.poolState.mintB];\n  }\n}\n","import { struct, u8, Layout, blob } from '@solana/buffer-layout';\nimport { PublicKey, AccountInfo } from '@solana/web3.js';\nimport { u64 } from '@solana/spl-token';\nimport { publicKey, uint64 } from '../../utils/layout';\n\ninterface SenchaSwapLayout {\n  discriminator: any;\n  factory: PublicKey;\n  bump: number;\n  index: u64;\n  admin: PublicKey;\n  token0Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Reserves: PublicKey;\n  token1Mint: PublicKey;\n  token1Fees: PublicKey;\n  isPaused: number;\n  poolMint: PublicKey;\n  tradeFeeKbps: u64;\n  withdrawFeeKbps: u64;\n  adminTradeFeeKbps: u64;\n  adminWithdrawFeeKbps: u64;\n}\n\nexport const SenchaSwapLayout = struct<SenchaSwapLayout>([\n  blob(8, 'discriminator'),\n  publicKey('factory'),\n  u8('bump'),\n  uint64('index'),\n  publicKey('admin'),\n  publicKey('token0Reserves'),\n  publicKey('token0Mint'),\n  publicKey('token0Fees'),\n  publicKey('token1Reserves'),\n  publicKey('token1Mint'),\n  publicKey('token1Fees'),\n  u8('isPaused'),\n  publicKey('poolMint'),\n  uint64('tradeFeeKbps'),\n  uint64('withdrawFeeKbps'),\n  uint64('adminTradeFeeKbps'),\n  uint64('adminWithdrawFeeKbps'),\n]);\n\nexport interface SenchaPoolState {\n  programId: PublicKey;\n  isPaused: boolean;\n  bump: number;\n  ammId: PublicKey;\n  token0Reserves: PublicKey;\n  token1Reserves: PublicKey;\n  token0Mint: PublicKey;\n  token1Mint: PublicKey;\n  token0Fees: PublicKey;\n  token1Fees: PublicKey;\n  poolMint: PublicKey;\n  tradeFeeKbps: number;\n}\n\nexport const accountInfoToSenchaPoolState = (address: PublicKey, accountInfo: AccountInfo<Buffer>): SenchaPoolState => {\n  const programId = accountInfo.owner;\n  const decoded = SenchaSwapLayout.decode(accountInfo.data);\n\n  return {\n    programId,\n    isPaused: Boolean(decoded.isPaused),\n    bump: decoded.bump,\n    ammId: address,\n    token0Reserves: decoded.token0Reserves,\n    token1Reserves: decoded.token1Reserves,\n    token0Mint: decoded.token0Mint,\n    token1Mint: decoded.token1Mint,\n    token0Fees: decoded.token0Fees,\n    token1Fees: decoded.token1Fees,\n    poolMint: decoded.poolMint,\n    tradeFeeKbps: decoded.tradeFeeKbps.toNumber(),\n  };\n};\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport {\n  AccountInfoMap,\n  Amm,\n  mapAddressToAccountInfos,\n  Quote,\n  QuoteParams,\n  tokenAccountsToJSBIs,\n  SwapParams,\n} from '../amm';\nimport { accountInfoToSenchaPoolState, SenchaPoolState } from './swapLayout';\nimport { AccountInfo as TokenAccountInfo } from '@solana/spl-token';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { createSenchaSwapInstruction } from '../jupiterInstruction';\nimport { Fraction, TokenSwapConstantProduct, ZERO } from '@jup-ag/math';\nimport JSBI from 'jsbi';\n\nexport class SenchaAmm implements Amm {\n  id: string;\n  label = 'Sencha' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  poolState: SenchaPoolState;\n  private calculator: TokenSwapConstantProduct;\n  private tokenAccounts: TokenAccountInfo[] = [];\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.poolState = accountInfoToSenchaPoolState(address, accountInfo);\n    this.calculator = new TokenSwapConstantProduct(\n      new Fraction(\n        JSBI.BigInt(this.poolState.tradeFeeKbps),\n        JSBI.BigInt(10000000), // 100% = 10000000kbps\n      ),\n      new Fraction(ZERO, ZERO),\n      false,\n    );\n  }\n\n  get isPaused() {\n    return this.poolState.isPaused;\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.poolState.token0Reserves, this.poolState.token1Reserves];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const tokenAccountInfos = mapAddressToAccountInfos(accountInfoMap, this.getAccountsForUpdate());\n\n    this.tokenAccounts = tokenAccountInfos.map((info) => {\n      const tokenAccount = deserializeAccount(info.data);\n      if (!tokenAccount) {\n        throw new Error('Invalid token account');\n      }\n      return tokenAccount;\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.tokenAccounts.length === 0) {\n      throw new Error('Unable to fetch accounts for specified tokens.');\n    }\n\n    const outputIndex = this.tokenAccounts[0].mint.equals(sourceMint) ? 1 : 0;\n    let result = this.calculator.exchange(tokenAccountsToJSBIs(this.tokenAccounts), amount, outputIndex);\n\n    let feePct = this.poolState.tradeFeeKbps / 10000000; // 100% kbps\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: result.expectedOutputAmount,\n      feeAmount: result.fees,\n      feeMint: sourceMint.toBase58(),\n      feePct,\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createSenchaSwapInstruction({\n        poolState: this.poolState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0Mint, this.poolState.token1Mint];\n  }\n}\n","import { getCurveAmount, getParsedData, IAmmData, ICurveAmount, IPoolInfo, TradeDirection } from '@jup-ag/lifinity-sdk';\nimport { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { accountInfoLifinitySwapLayout, LifinitySwapLayoutState, swapStateToPoolInfo } from './swapLayout';\nimport { createLifinitySwapInstruction } from '../jupiterInstruction';\nimport Decimal from 'decimal.js';\nimport JSBI from 'jsbi';\n\nexport class LifinityAmm implements Amm {\n  id: string;\n  label = 'Lifinity' as const;\n  shouldPrefetch = false;\n  exactOutputSupported = false;\n\n  private swapState: LifinitySwapLayoutState;\n  private poolInfo: IPoolInfo;\n  private accountInfos: Array<{ publicKey: PublicKey; account: AccountInfo<Buffer> }> = [];\n\n  constructor(address: PublicKey, private ammAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.swapState = accountInfoLifinitySwapLayout(address, ammAccountInfo);\n    this.poolInfo = swapStateToPoolInfo(this.swapState);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.swapState.poolCoinTokenAccount,\n      this.swapState.poolPcTokenAccount,\n      this.swapState.configAccount,\n      this.swapState.pythAccount,\n      this.swapState.pythPcAccount,\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    this.getAccountsForUpdate().forEach((publicKey, idx) => {\n      const account = accountInfoMap.get(publicKey.toBase58());\n      if (account) {\n        this.accountInfos[idx] = {\n          publicKey,\n          account,\n        };\n      }\n    });\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (this.accountInfos.length !== this.getAccountsForUpdate().length) {\n      throw new Error('Accounts not loaded');\n    }\n\n    const tradeDirection = this.swapState.poolCoinMint.equals(sourceMint) ? TradeDirection.AtoB : TradeDirection.BtoA;\n    const { amm, pyth, pythPc, fees, coinBalance, pcBalance, config }: IAmmData = getParsedData(\n      [{ publicKey: this.swapState.amm, account: this.ammAccountInfo }, ...this.accountInfos],\n      this.poolInfo,\n    );\n\n    if (\n      !pyth.status.equals(1) ||\n      // pythPc can be undefined from the lifinity SDK\n      (pythPc && !pythPc.status.equals(1))\n    ) {\n      throw new Error('Pyth accounts are outdated');\n    }\n\n    const amountIn = new Decimal(amount.toString());\n    const result: ICurveAmount = getCurveAmount(\n      amountIn,\n      pyth.publishSlot.toNumber(), // Use pyth publish slot to not throw error\n      amm,\n      fees,\n      coinBalance,\n      pcBalance,\n      config,\n      pyth,\n      pythPc,\n      tradeDirection,\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.amountSwapped.toString()),\n      feeAmount: JSBI.BigInt(result.fee.ceil().toString()),\n      feeMint: sourceMint.toBase58(),\n      feePct: result.feePercent.toNumber(),\n      priceImpactPct: result.priceImpact.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      createLifinitySwapInstruction({\n        swapState: this.swapState,\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.swapState.poolCoinMint, this.swapState.poolPcMint];\n  }\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { LIFINITY_AMM_LAYOUT, IPoolInfo } from '@jup-ag/lifinity-sdk';\n\nexport interface LifinitySwapLayoutState {\n  programId: PublicKey;\n  authority: PublicKey;\n  amm: PublicKey;\n  tokenAMint: PublicKey;\n  tokenBMint: PublicKey;\n  poolMint: PublicKey;\n  feeAccount: PublicKey;\n  pythAccount: PublicKey;\n  pythPcAccount: PublicKey;\n  configAccount: PublicKey;\n  poolCoinTokenAccount: PublicKey;\n  poolCoinMint: PublicKey;\n  poolPcTokenAccount: PublicKey;\n  poolPcMint: PublicKey;\n}\n\nexport const swapStateToPoolInfo = (state: LifinitySwapLayoutState): IPoolInfo => {\n  return {\n    amm: state.amm.toBase58(),\n    configAccount: state.configAccount.toBase58(),\n    feeAccount: state.feeAccount.toBase58(),\n    pythAccount: state.pythAccount.toBase58(),\n    pythPcAccount: state.pythPcAccount.toBase58(),\n    poolCoinMint: state.poolCoinMint.toBase58(),\n    poolCoinTokenAccount: state.poolCoinTokenAccount.toBase58(),\n    poolMint: state.poolMint.toBase58(),\n    poolPcTokenAccount: state.poolPcTokenAccount.toBase58(),\n    poolPcMint: state.poolPcMint.toBase58(),\n    // We don't use decimals at the moment, so default to 0, if we need to use it later, we can add it from API\n    poolCoinDecimal: 0,\n    poolPcDecimal: 0,\n    poolMintDecimal: 0,\n    pythBaseDecimal: 0,\n  };\n};\n\nexport const accountInfoLifinitySwapLayout = (\n  address: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n): LifinitySwapLayoutState => {\n  const programId = accountInfo.owner;\n  const decoded = LIFINITY_AMM_LAYOUT.decode(accountInfo.data);\n  const [authority] = findProgramAddressSync([address.toBuffer()], programId);\n\n  return {\n    programId,\n    authority,\n    amm: address,\n    tokenAMint: decoded.tokenAMint,\n    tokenBMint: decoded.tokenBMint,\n    poolMint: decoded.poolMint,\n    feeAccount: decoded.poolFeeAccount,\n    pythAccount: decoded.pythAccount,\n    pythPcAccount: decoded.pythPcAccount,\n    configAccount: decoded.configAccount,\n    poolCoinTokenAccount: decoded.tokenAAccount,\n    poolCoinMint: decoded.tokenAMint,\n    poolPcTokenAccount: decoded.tokenBAccount,\n    poolPcMint: decoded.tokenBMint,\n  };\n};\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport { AccountInfoMap, Amm, SwapMode, Quote, QuoteParams, SwapParams } from '../amm';\nimport { createWhirlpoolSwapInstruction, createWhirlpoolSwapExactOutputInstruction } from '../jupiterInstruction';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { WHIRLPOOL_PROGRAM_ID } from '../../constants';\nimport {\n  parseWhirlpool,\n  parseTickArray,\n  WhirlpoolData,\n  getSwapQuote,\n  getTickArrayPks,\n  TickArrayData,\n  getTickArrayPublicKeysForSwap,\n  getDefaultSqrtPriceLimit,\n} from '@jup-ag/whirlpool-sdk';\nimport BN from 'bn.js';\nimport JSBI from 'jsbi';\n\nconst FEE_RATE_MUL_VALUE = 1_000_000;\n\nfunction fromX64(num: BN): Decimal {\n  return new Decimal(num.toString()).mul(Decimal.pow(2, -64));\n}\n\nfunction parseWhirlpoolSafe(address: PublicKey, data: Buffer) {\n  const whirlpoolData = parseWhirlpool(data);\n  if (!whirlpoolData) throw new Error(`Failed to parse whirlpool ${address.toBase58()}`);\n  return whirlpoolData;\n}\n\nexport class WhirlpoolAmm implements Amm {\n  id: string;\n  label = 'Orca (Whirlpools)';\n  shouldPrefetch = true;\n  exactOutputSupported = true;\n\n  private whirlpoolData: WhirlpoolData;\n  private tickArrays: Map<string, TickArrayData> = new Map();\n  private tickPks: PublicKey[];\n  private oracle: PublicKey;\n  private feePct: Decimal;\n\n  constructor(private address: PublicKey, whirlpoolAccountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.whirlpoolData = parseWhirlpoolSafe(address, whirlpoolAccountInfo.data);\n\n    this.oracle = findProgramAddressSync([Buffer.from('oracle'), address.toBuffer()], WHIRLPOOL_PROGRAM_ID)[0];\n    this.feePct = new Decimal(this.whirlpoolData.feeRate).div(FEE_RATE_MUL_VALUE);\n    this.tickPks = getTickArrayPks(address, this.whirlpoolData);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    // The tickCurrentIndex is technically behind here, belonging to the last refresh\n    return [this.address, ...this.tickPks];\n  }\n\n  update(accountInfoMap: AccountInfoMap): void {\n    const whirlpoolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!whirlpoolAccountInfo) throw new Error(`Missing ${this.address.toBase58()}`);\n    this.whirlpoolData = parseWhirlpoolSafe(this.address, whirlpoolAccountInfo.data);\n    this.tickPks = getTickArrayPks(this.address, this.whirlpoolData);\n\n    this.tickArrays.clear();\n    for (const tickArrayPk of this.tickPks) {\n      const tickArrayAddress = tickArrayPk.toBase58();\n      const tickArrayAccountInfo = accountInfoMap.get(tickArrayAddress);\n      if (!tickArrayAccountInfo) {\n        // This can happen if we reach an uninitialized tick, and it is likely to occur right now\n        continue;\n      }\n      const tickArray = parseTickArray(tickArrayAccountInfo.data);\n      if (!tickArray) throw new Error(`Could not parse tick array ${tickArrayAddress}`);\n      this.tickArrays.set(tickArrayAddress, tickArray);\n    }\n  }\n\n  getQuote({ sourceMint, destinationMint, amount, swapMode }: QuoteParams): Quote {\n    const swapQuote = getSwapQuote({\n      poolAddress: this.address,\n      whirlpool: this.whirlpoolData,\n      tickArrays: this.tickArrays,\n      tokenMint: swapMode === SwapMode.ExactIn ? sourceMint : destinationMint,\n      tokenAmount: new BN(amount.toString()),\n      isInput: swapMode === SwapMode.ExactIn,\n    });\n\n    const inAmount = JSBI.BigInt(swapQuote.amountIn.toString());\n    const outAmount = JSBI.BigInt(swapQuote.amountOut.toString());\n    const feeAmount = JSBI.BigInt(this.feePct.mul(inAmount.toString()).floor().toString());\n    const quotePrice = swapQuote.aToB\n      ? new Decimal(swapQuote.amountOut.toString()).div(swapQuote.amountIn.toString())\n      : new Decimal(swapQuote.amountIn.toString()).div(swapQuote.amountOut.toString());\n\n    const currentPrice = fromX64(this.whirlpoolData.sqrtPrice).pow(2);\n    const priceImpactPct = currentPrice.minus(quotePrice).div(currentPrice).abs().toNumber();\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount,\n      outAmount,\n      feeAmount,\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct.toNumber(),\n      priceImpactPct: Number(priceImpactPct),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams) {\n    const aToB = swapParams.sourceMint.equals(this.whirlpoolData.tokenMintA);\n    const targetSqrtPrice = getDefaultSqrtPriceLimit(aToB);\n    const [tickArray0, tickArray1, tickArray2] = getTickArrayPublicKeysForSwap(\n      this.whirlpoolData.tickCurrentIndex,\n      targetSqrtPrice,\n      this.whirlpoolData.tickSpacing,\n      this.address,\n      this.tickArrays,\n      WHIRLPOOL_PROGRAM_ID,\n      aToB,\n    );\n\n    const ix =\n      swapParams.swapMode === SwapMode.ExactIn\n        ? createWhirlpoolSwapInstruction({\n            additionalArgs: {\n              aToB,\n              whirlpool: this.address,\n              tickArray0,\n              tickArray1,\n              tickArray2,\n              oracle: this.oracle,\n              ...this.whirlpoolData,\n            },\n            ...swapParams,\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n          })\n        : (() => {\n            if (swapParams.amount === null) throw Error('amount cannot be null with exact output');\n\n            return createWhirlpoolSwapExactOutputInstruction({\n              additionalArgs: {\n                aToB,\n                whirlpool: this.address,\n                tickArray0,\n                tickArray1,\n                tickArray2,\n                oracle: this.oracle,\n                ...this.whirlpoolData,\n              },\n              ...swapParams,\n              outAmount: swapParams.amount,\n              maximumInAmount: swapParams.otherAmountThreshold,\n            });\n          })();\n\n    return [ix];\n  }\n\n  get reserveTokenMints() {\n    return [this.whirlpoolData.tokenMintA, this.whirlpoolData.tokenMintB];\n  }\n}\n","// TODO: Move this to SDK rather than being maintained by us\nimport {\n  CyclosCore,\n  buildTick,\n  generateBitmapWord,\n  nextInitializedBit,\n  tickPosition,\n  TickDataProvider,\n  PoolVars,\n  TICK_SEED,\n  u32ToSeed,\n  BITMAP_SEED,\n  TickMath,\n  u16ToSeed,\n} from '@jup-ag/cykura-sdk';\nimport * as anchor from '@project-serum/anchor';\nimport { BN, IdlAccounts } from '@project-serum/anchor';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AccountInfo, PublicKey } from '@solana/web3.js';\nimport JSBI from 'jsbi';\n\nexport type TickBitmapState = IdlAccounts<CyclosCore>['tickBitmapState'];\nexport type TickState = IdlAccounts<CyclosCore>['tickState'];\n\nexport class SolanaTickDataProvider implements TickDataProvider {\n  program: anchor.Program<CyclosCore>;\n  pool: PoolVars;\n\n  bitmapCache: Map<\n    number,\n    {\n      address: PublicKey;\n      word: anchor.BN;\n    }\n  >;\n\n  tickCache: Map<\n    number,\n    {\n      address: PublicKey;\n      liquidityNet: JSBI;\n    }\n  >;\n\n  accountsToFetch: { bitmaps: PublicKey[]; ticks: PublicKey[] } = { bitmaps: [], ticks: [] };\n\n  constructor(program: anchor.Program<CyclosCore>, pool: PoolVars) {\n    this.program = program;\n    this.pool = pool;\n    this.bitmapCache = new Map();\n    this.tickCache = new Map();\n  }\n\n  /**\n   * Caches ticks and bitmap accounts near the current price\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  async eagerLoadCache(tickCurrent: number, tickSpacing: number) {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    try {\n      const bitmapsToFetch = [];\n      const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n      const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n      const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n      const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n      for (let i = minWord; i < maxWord; i++) {\n        bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      }\n\n      const fetchedBitmaps = (await this.program.account.tickBitmapState.fetchMultiple(\n        bitmapsToFetch,\n      )) as (TickBitmapState | null)[];\n\n      const tickAddresses = [];\n      for (let i = 0; i < maxWord - minWord; i++) {\n        const currentWordPos = i + minWord;\n        const wordArray = fetchedBitmaps[i]?.word;\n        const word = wordArray ? generateBitmapWord(wordArray) : new BN(0);\n        this.bitmapCache.set(currentWordPos, {\n          address: bitmapsToFetch[i],\n          word,\n        });\n        if (word && !word.eqn(0)) {\n          for (let j = 0; j < 256; j++) {\n            if (word.shrn(j).and(new BN(1)).eqn(1)) {\n              const tick = ((currentWordPos << 8) + j) * tickSpacing;\n              const tickAddress = this.getTickAddressSync(tick);\n              tickAddresses.push(tickAddress);\n            }\n          }\n        }\n      }\n\n      const fetchedTicks = (await this.program.account.tickState.fetchMultiple(tickAddresses)) as (TickState | null)[];\n      for (const i in tickAddresses) {\n        const fetchedTick = fetchedTicks[i];\n        if (!fetchedTick) continue;\n\n        const { tick, liquidityNet } = fetchedTick;\n        this.tickCache.set(tick, {\n          address: tickAddresses[i],\n          liquidityNet: JSBI.BigInt(liquidityNet),\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  /**\n   * Return accounts to cache and returns early if there is insufficient data\n   * @param tickCurrent The current pool tick\n   * @param tickSpacing The pool tick spacing\n   */\n  lazyLoadAccountsToCache(tickCurrent: number, tickSpacing: number): PublicKey[] {\n    // fetch 10 bitmaps on each side in a single fetch. Find active ticks and read them together\n    const compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tickCurrent), JSBI.BigInt(tickSpacing)));\n    const { wordPos } = tickPosition(compressed);\n\n    const bitmapsToFetch: PublicKey[] = [];\n    const bitmaps: ({ address: PublicKey; word: anchor.BN } | undefined)[] = [];\n    const { wordPos: WORD_POS_MIN } = tickPosition(Math.floor(TickMath.MIN_TICK / tickSpacing));\n    const { wordPos: WORD_POS_MAX } = tickPosition(Math.floor(TickMath.MAX_TICK / tickSpacing));\n    const minWord = Math.max(wordPos - 10, WORD_POS_MIN);\n    const maxWord = Math.min(wordPos + 10, WORD_POS_MAX);\n    for (let i = minWord; i < maxWord; i++) {\n      bitmapsToFetch.push(this.getBitmapAddressSync(i));\n      const bitmap = this.bitmapCache.get(i);\n      bitmaps.push(bitmap);\n    }\n\n    const tickAddressesToFetch = [];\n    for (let i = 0; i < maxWord - minWord; i++) {\n      const currentWordPos = i + minWord;\n      // We might not have the bitmap yet in the first iteration\n      const word = bitmaps[i]?.word ?? new BN(0);\n      this.bitmapCache.set(currentWordPos, {\n        address: bitmapsToFetch[i],\n        word,\n      });\n      if (word && !word.eqn(0)) {\n        for (let j = 0; j < 256; j++) {\n          if (word.shrn(j).and(new BN(1)).eqn(1)) {\n            const tick = ((currentWordPos << 8) + j) * tickSpacing;\n            const tickAddress = this.getTickAddressSync(tick);\n            tickAddressesToFetch.push(tickAddress);\n          }\n        }\n      }\n    }\n\n    this.accountsToFetch = { bitmaps: bitmapsToFetch, ticks: tickAddressesToFetch };\n    return [...bitmapsToFetch, ...tickAddressesToFetch];\n  }\n\n  getTick(tick: number): {\n    address: anchor.web3.PublicKey;\n    liquidityNet: JSBI;\n  } {\n    let savedTick = this.tickCache.get(tick);\n    if (!savedTick) {\n      throw new Error('Tick not cached');\n    }\n\n    return {\n      address: savedTick.address,\n      liquidityNet: savedTick.liquidityNet,\n    };\n  }\n\n  async getTickAddress(tick: number): Promise<anchor.web3.PublicKey> {\n    return this.getTickAddressSync(tick);\n  }\n\n  getTickAddressSync(tick: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [TICK_SEED, this.pool.token0.toBuffer(), this.pool.token1.toBuffer(), u32ToSeed(this.pool.fee), u32ToSeed(tick)],\n      this.program.programId,\n    )[0];\n  }\n\n  async getBitmapAddress(wordPos: number): Promise<anchor.web3.PublicKey> {\n    return this.getBitmapAddressSync(wordPos);\n  }\n\n  getBitmapAddressSync(wordPos: number): anchor.web3.PublicKey {\n    return findProgramAddressSync(\n      [\n        BITMAP_SEED,\n        this.pool.token0.toBuffer(),\n        this.pool.token1.toBuffer(),\n        u32ToSeed(this.pool.fee),\n        u16ToSeed(wordPos),\n      ],\n      this.program.programId,\n    )[0];\n  }\n\n  /**\n   * Fetches the cached bitmap for the word\n   * @param wordPos\n   */\n  getBitmap(wordPos: number): {\n    address: anchor.web3.PublicKey;\n    word: anchor.BN;\n  } {\n    let savedBitmap = this.bitmapCache.get(wordPos);\n    if (!savedBitmap) {\n      throw new Error('Bitmap not cached');\n    }\n\n    return savedBitmap;\n  }\n\n  /**\n   * Finds the next initialized tick in the given word. Fetched bitmaps are saved in a\n   * cache for quicker lookups in future.\n   * @param tick The current tick\n   * @param lte Whether to look for a tick less than or equal to the current one, or a tick greater than or equal to\n   * @param tickSpacing The tick spacing for the pool\n   * @returns\n   */\n  nextInitializedTickWithinOneWord(\n    tick: number,\n    lte: boolean,\n    tickSpacing: number,\n  ): [number, boolean, number, number, PublicKey] {\n    let compressed = JSBI.toNumber(JSBI.divide(JSBI.BigInt(tick), JSBI.BigInt(tickSpacing)));\n    if (tick < 0 && tick % tickSpacing !== 0) {\n      compressed -= 1;\n    }\n    if (!lte) {\n      compressed += 1;\n    }\n\n    const { wordPos, bitPos } = tickPosition(compressed);\n    const cachedBitmap = this.getBitmap(wordPos);\n\n    const { next: nextBit, initialized } = nextInitializedBit(cachedBitmap.word, bitPos, lte);\n    const nextTick = buildTick(wordPos, nextBit, tickSpacing);\n    return [nextTick, initialized, wordPos, bitPos, cachedBitmap.address];\n  }\n\n  // Change this to be a blind decoder rather than decode what we know\n  updateCachedAccountInfos(accountInfoMap: Map<string, AccountInfo<Buffer> | null>) {\n    for (const bitmapAddress of this.accountsToFetch.bitmaps) {\n      const bitmapAccountInfo = accountInfoMap.get(bitmapAddress.toBase58());\n      if (bitmapAccountInfo) {\n        const tickBitmapState = this.program.coder.accounts.decode<TickBitmapState>(\n          'tickBitmapState',\n          bitmapAccountInfo.data,\n        );\n\n        this.bitmapCache.set(tickBitmapState.wordPos, {\n          address: bitmapAddress,\n          word: generateBitmapWord(tickBitmapState.word),\n        });\n      }\n    }\n\n    for (const tickAddress of this.accountsToFetch.ticks) {\n      const tickStateAccountInfo = accountInfoMap.get(tickAddress.toBase58());\n      if (tickStateAccountInfo) {\n        const tickState = this.program.coder.accounts.decode<TickState>('tickState', tickStateAccountInfo.data);\n        this.tickCache.set(tickState.tick, {\n          address: tickAddress,\n          liquidityNet: JSBI.BigInt(tickState.liquidityNet),\n        });\n      }\n    }\n  }\n}\n","import { AccountInfo, AccountMeta, Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport * as anchor from '@project-serum/anchor';\nimport { AccountInfoMap, Amm, Quote, QuoteParams, SwapParams } from '../amm';\nimport { Pool as CykuraPool, CyclosCore, IDL, OBSERVATION_SEED, u32ToSeed, u16ToSeed } from '@jup-ag/cykura-sdk';\nimport { CurrencyAmount, Token } from '@jup-ag/cykura-sdk-core';\nimport { IdlAccounts, Wallet } from '@project-serum/anchor';\nimport { SolanaTickDataProvider } from './solanaTickDataProvider';\nimport { CYKURA_PROGRAM_ID } from '../../constants';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { createCykuraSwapInstruction } from '../jupiterInstruction';\nimport { toDecimal } from '@jup-ag/math';\n\nexport type PoolState = IdlAccounts<CyclosCore>['poolState'];\n\nconst FEE_DENOMINATOR = JSBI.BigInt(1_000_000);\n\nconst provider = new anchor.AnchorProvider(null as unknown as Connection, null as unknown as Wallet, {\n  skipPreflight: false,\n});\nconst CYCLOS_CORE = new anchor.Program<CyclosCore>(IDL, CYKURA_PROGRAM_ID, provider);\n\nexport class CykuraAmm implements Amm {\n  label = 'Cykura' as const;\n  id: string;\n  shouldPrefetch = true;\n  exactOutputSupported = false;\n\n  private poolState: PoolState;\n  private pool: CykuraPool;\n  private tickDataProvider: SolanaTickDataProvider;\n  private tokens: { token0: Token; token1: Token };\n  public vaults: { vault0: PublicKey; vault1: PublicKey };\n  private swapAccountMetas: AccountMeta[] = [];\n  private feePct: number;\n  private fee: JSBI;\n\n  constructor(private address: PublicKey, accountInfoOrPoolState: AccountInfo<Buffer> | PoolState) {\n    this.id = address.toBase58();\n    let poolState: PoolState;\n    if ('data' in accountInfoOrPoolState) {\n      poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', accountInfoOrPoolState.data);\n    } else {\n      poolState = accountInfoOrPoolState;\n    }\n\n    this.poolState = poolState;\n\n    const { token0, token1, fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n\n    this.tickDataProvider = new SolanaTickDataProvider(CYCLOS_CORE, {\n      token0,\n      token1,\n      fee,\n    });\n\n    this.tokens = {\n      token0: new Token(101, token0, 0, '', ''),\n      token1: new Token(101, token1, 0, '', ''),\n    };\n\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.vaults = {\n      vault0: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token0.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n      vault1: findProgramAddressSync(\n        [this.address.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), token1.toBuffer()],\n        ASSOCIATED_TOKEN_PROGRAM_ID,\n      )[0],\n    };\n\n    this.fee = JSBI.BigInt(this.poolState.fee);\n    this.feePct = this.poolState.fee / JSBI.toNumber(FEE_DENOMINATOR);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [\n      this.address,\n      ...this.tickDataProvider.lazyLoadAccountsToCache(this.pool.tickCurrent, this.pool.tickSpacing),\n    ];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const poolAccountInfo = accountInfoMap.get(this.address.toBase58());\n    if (!poolAccountInfo) {\n      throw new Error(`Could not find poolAccountInfo ${this.address.toBase58()}`);\n    }\n    this.poolState = CYCLOS_CORE.coder.accounts.decode<PoolState>('poolState', poolAccountInfo.data);\n    const { fee, sqrtPriceX32, liquidity, tick } = this.poolState;\n    this.pool = new CykuraPool(\n      this.tokens.token0,\n      this.tokens.token1,\n      fee,\n      JSBI.BigInt(sqrtPriceX32.toString()),\n      JSBI.BigInt(liquidity.toString()),\n      tick,\n      this.tickDataProvider,\n    );\n\n    this.tickDataProvider.updateCachedAccountInfos(accountInfoMap);\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    const inputToken = sourceMint.equals(this.poolState.token0) ? this.tokens.token0 : this.tokens.token1;\n    const [currentOutAmount, newPool, swapAccountMetas] = this.pool.getOutputAmount(\n      CurrencyAmount.fromRawAmount(inputToken, amount),\n    );\n    this.swapAccountMetas = swapAccountMetas;\n\n    const priceImpactDecimal = toDecimal(JSBI.subtract(this.pool.sqrtRatioX32, newPool.sqrtRatioX32)).div(\n      this.pool.sqrtRatioX32.toString(),\n    );\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: currentOutAmount.quotient,\n      // Might not be spot on but avoids many conversions\n      feeAmount: JSBI.divide(JSBI.multiply(amount, this.fee), FEE_DENOMINATOR),\n      feeMint: sourceMint.toBase58(),\n      feePct: this.feePct,\n      priceImpactPct: priceImpactDecimal.toNumber(),\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    const [inputVault, outputVault] = swapParams.sourceMint.equals(this.poolState.token0)\n      ? [this.vaults.vault0, this.vaults.vault1]\n      : [this.vaults.vault1, this.vaults.vault0];\n\n    const lastObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed(this.poolState.observationIndex),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const nextObservationState = findProgramAddressSync(\n      [\n        OBSERVATION_SEED,\n        this.poolState.token0.toBuffer(),\n        this.poolState.token1.toBuffer(),\n        u32ToSeed(this.poolState.fee),\n        u16ToSeed((this.poolState.observationIndex + 1) % this.poolState.observationCardinalityNext),\n      ],\n      CYKURA_PROGRAM_ID,\n    )[0];\n\n    const additionalArgs = {\n      poolAddress: this.address,\n      inputVault,\n      outputVault,\n      nextObservationState,\n      lastObservationState,\n      swapAccountMetas: this.swapAccountMetas,\n    };\n    return [\n      createCykuraSwapInstruction({\n        ...swapParams,\n        inAmount: swapParams.amount,\n        minimumOutAmount: swapParams.otherAmountThreshold,\n        additionalArgs,\n      }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [this.poolState.token0, this.poolState.token1];\n  }\n}\n","import BN from 'bn.js';\n\n/**\n * Compute a linear fee base on liquidity amount.\n * fee(0) = max fee -> fee(x >= target) = min fee\n *\n * @param {number} lpMinFeeBasisPoints\n * @param {number} lpMaxFeeBasisPoints\n * @param {BN} lpLiquidityTarget\n * @param {BN} lamportsAvailable\n * @param {BN} lamportsToObtain\n */\nexport function unstakeNowFeeBp(\n  lpMinFeeBasisPoints: number,\n  lpMaxFeeBasisPoints: number,\n  lpLiquidityTarget: BN,\n  lamportsAvailable: BN,\n  lamportsToObtain: BN,\n): number {\n  // if trying to get more than existing\n  if (lamportsToObtain.gte(lamportsAvailable)) {\n    return lpMaxFeeBasisPoints;\n  }\n  // result after operation\n  const lamportsAfter = lamportsAvailable.sub(lamportsToObtain);\n  // if GTE target => min fee\n  if (lamportsAfter.gte(lpLiquidityTarget)) {\n    return lpMinFeeBasisPoints;\n  } else {\n    const delta = lpMaxFeeBasisPoints - lpMinFeeBasisPoints;\n    return lpMaxFeeBasisPoints - proportionalBN(new BN(delta), lamportsAfter, lpLiquidityTarget).toNumber();\n  }\n}\n\n/**\n * Returns `amount` * `numerator` / `denominator`.\n * BN library we use does not handle fractions, so the value is `floored`\n *\n * @param {BN} amount\n * @param {BN} numerator\n * @param {BN} denominator\n */\nexport function proportionalBN(amount: BN, numerator: BN, denominator: BN): BN {\n  if (denominator.isZero()) {\n    return amount;\n  }\n  return amount.mul(numerator).div(denominator);\n}\n","import { AccountInfo, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { AccountInfoMap, Amm, mapAddressToAccountInfos, Quote, QuoteParams, SwapParams } from '../amm';\nimport {\n  createMarinadeFinanceDepositInstruction,\n  createMarinadeFinanceLiquidUnstakeInstruction,\n} from '../jupiterInstruction';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { NATIVE_MINT } from '@solana/spl-token';\nimport BN from 'bn.js';\nimport { Idl, Program } from '@project-serum/anchor';\nimport * as marinadeFinanceIdlSchema from './idl/marinade-finance-idl.json';\nimport { MarinadeStateResponse, ProgramDerivedAddressSeed } from './marinade-state.types';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { proportionalBN, unstakeNowFeeBp } from './helpers';\nimport { MARINADE_PROGRAM_ID } from '../../constants';\nimport JSBI from 'jsbi';\n\nexport class MarinadeAmm implements Amm {\n  address: PublicKey;\n  id: string;\n  label = 'Marinade';\n  shouldPrefetch = true; // Pricing is very state dependent and using stale data will lead to a stale quote\n  exactOutputSupported = false;\n\n  marinadeFinanceProgram: Program;\n  marinadeStateResponse: MarinadeStateResponse;\n  liqPoolSolLegPdaAddress: PublicKey;\n  marinadeState: MarinadeState | undefined;\n\n  constructor(address: PublicKey, accountInfo: AccountInfo<Buffer>) {\n    this.id = address.toBase58();\n    this.marinadeFinanceProgram = new Program(marinadeFinanceIdlSchema as Idl, MARINADE_PROGRAM_ID, {} as any);\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', accountInfo.data);\n    this.address = address;\n\n    this.liqPoolSolLegPdaAddress = this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_SOL_ACCOUNT);\n  }\n\n  getAccountsForUpdate(): PublicKey[] {\n    return [this.address, this.liqPoolSolLegPdaAddress, this.marinadeStateResponse.liqPool.msolLeg];\n  }\n\n  update(accountInfoMap: AccountInfoMap) {\n    const [stateAccountInfo, liqPoolSolLegPda, liqPoolMSOLLegAccountInfo] = mapAddressToAccountInfos(\n      accountInfoMap,\n      this.getAccountsForUpdate(),\n    );\n\n    this.marinadeStateResponse = this.marinadeFinanceProgram.coder.accounts.decode('State', stateAccountInfo.data);\n    const liqPoolMSOLLeg = deserializeAccount(liqPoolMSOLLegAccountInfo.data);\n    if (!liqPoolMSOLLeg)\n      throw new Error(\n        `liqPoolMSOLLeg token account cannot be deserialized ${this.marinadeStateResponse.liqPool.msolLeg.toBase58()}`,\n      );\n\n    this.marinadeState = new MarinadeState(\n      this.marinadeStateResponse,\n      new BN(liqPoolSolLegPda.lamports),\n      liqPoolMSOLLeg.amount,\n    );\n  }\n\n  getQuote({ sourceMint, amount }: QuoteParams): Quote {\n    if (!this.marinadeState) throw new Error('Update was not run to create a complete marinadeState');\n\n    const amountBN = new BN(amount.toString());\n    const result = sourceMint.equals(NATIVE_MINT)\n      ? this.marinadeState.depositQuote(amountBN)\n      : this.marinadeState.liquidUnstakeQuote(amountBN);\n\n    return {\n      notEnoughLiquidity: false,\n      inAmount: amount,\n      outAmount: JSBI.BigInt(result.outAmount.toString()),\n      feeAmount: JSBI.BigInt(result.feeAmount.toString()),\n      feeMint: this.marinadeStateResponse.msolMint.toBase58(),\n      feePct: result.feePct,\n      priceImpactPct: 0,\n    };\n  }\n\n  createSwapInstructions(swapParams: SwapParams): TransactionInstruction[] {\n    return [\n      swapParams.sourceMint.equals(NATIVE_MINT)\n        ? createMarinadeFinanceDepositInstruction({\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n              liqPoolMsolLegAuthority: this.findProgramDerivedAddress(\n                ProgramDerivedAddressSeed.LIQ_POOL_MSOL_AUTHORITY,\n              ),\n              reservePda: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.RESERVE_ACCOUNT),\n              msolMintAuthority: this.findProgramDerivedAddress(ProgramDerivedAddressSeed.LIQ_POOL_MSOL_MINT_AUTHORITY),\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n            ...swapParams,\n          })\n        : createMarinadeFinanceLiquidUnstakeInstruction({\n            additionalArgs: {\n              address: this.address,\n              marinadeStateResponse: this.marinadeStateResponse,\n              liqPoolSolLegPda: this.liqPoolSolLegPdaAddress,\n            },\n            inAmount: swapParams.amount,\n            minimumOutAmount: swapParams.otherAmountThreshold,\n            ...swapParams,\n          }),\n    ];\n  }\n\n  get reserveTokenMints() {\n    return [NATIVE_MINT, this.marinadeStateResponse.msolMint];\n  }\n\n  private findProgramDerivedAddress(seed: ProgramDerivedAddressSeed, extraSeeds: Buffer[] = []): PublicKey {\n    const seeds = [this.address.toBuffer(), Buffer.from(seed), ...extraSeeds];\n    const [result] = findProgramAddressSync(seeds, this.marinadeFinanceProgram.programId);\n    return result;\n  }\n}\n\nclass MarinadeState {\n  constructor(\n    private state: MarinadeStateResponse,\n    private liqPoolSolLegPdaLamports: BN,\n    private liqPoolMSOLLegAmount: BN,\n  ) {}\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/deposit.rs#L61-L170\n  depositQuote(lamports: BN) {\n    let userLamports = lamports;\n    const userMSOLBuyOrder = this.calcMSOLFromLamports(userLamports);\n    const swapMSOLMax = BN.min(userMSOLBuyOrder, this.liqPoolMSOLLegAmount);\n\n    let outAmountBN = new BN(0);\n\n    // if we can sell from the LiqPool\n    userLamports = (() => {\n      if (swapMSOLMax.gt(new BN(0))) {\n        const lamportsForTheLiqPool = userMSOLBuyOrder.eq(swapMSOLMax)\n          ? userLamports\n          : this.calcLamportsFromMSOLAmount(swapMSOLMax);\n\n        // transfered mSOL to the user\n        outAmountBN = outAmountBN.add(swapMSOLMax);\n\n        return saturatingSub(userLamports, lamportsForTheLiqPool);\n      } else {\n        return userLamports;\n      }\n    })();\n\n    // check if we have more lamports from the user\n    if (userLamports.gt(new BN(0))) {\n      this.checkStakingCap(userLamports);\n      const MSOLToMint = this.calcMSOLFromLamports(userLamports);\n      outAmountBN = outAmountBN.add(MSOLToMint);\n    }\n\n    return {\n      outAmount: outAmountBN,\n      feeAmount: 0,\n      feePct: 0,\n      priceImpactPct: 0,\n    };\n  }\n\n  private checkStakingCap(transferingLamports: BN) {\n    const resultAmount = this.totalLamportsUnderControl().add(transferingLamports);\n\n    if (resultAmount.gt(this.state.stakingSolCap)) throw new Error('Staking cap reached');\n  }\n\n  private calcMSOLFromLamports(stakeLamports: BN) {\n    return sharesFromValue(stakeLamports, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private calcLamportsFromMSOLAmount(msolAmount: BN) {\n    return valueFromShares(msolAmount, this.totalVirtualStakedLamports(), this.state.msolSupply);\n  }\n\n  private totalVirtualStakedLamports() {\n    return saturatingSub(this.totalLamportsUnderControl(), this.state.circulatingTicketBalance);\n  }\n\n  private totalLamportsUnderControl() {\n    return this.state.validatorSystem.totalActiveBalance\n      .add(this.totalCoolingDown())\n      .add(this.state.availableReserveBalance);\n  }\n\n  private totalCoolingDown() {\n    return this.state.stakeSystem.delayedUnstakeCoolingDown.add(this.state.emergencyCoolingDown);\n  }\n\n  // https://github.com/marinade-finance/liquid-staking-program/blob/main/programs/marinade-finance/src/state/liquid_unstake.rs#L68-L171\n  liquidUnstakeQuote(msolAmount: BN) {\n    const maxLamports = saturatingSub(this.liqPoolSolLegPdaLamports, this.state.rentExemptForTokenAcc);\n\n    const lamportsToObtain = this.calcLamportsFromMSOLAmount(msolAmount);\n    const liquidUnstakeFeeBp = unstakeNowFeeBp(\n      this.state.liqPool.lpMinFee.basisPoints,\n      this.state.liqPool.lpMaxFee.basisPoints,\n      this.state.liqPool.lpLiquidityTarget,\n      maxLamports,\n      lamportsToObtain,\n    );\n\n    const msolFee = msolAmount.mul(new BN(liquidUnstakeFeeBp)).div(new BN(10_000));\n    const workingLamportsValue = this.calcLamportsFromMSOLAmount(msolAmount.sub(msolFee));\n    if (workingLamportsValue.add(this.state.rentExemptForTokenAcc).gt(this.liqPoolSolLegPdaLamports))\n      throw new Error('Insufficient liquidity');\n\n    return {\n      outAmount: workingLamportsValue,\n      feeAmount: msolFee,\n      feePct: liquidUnstakeFeeBp / 10_000,\n      priceImpactPct: 0,\n    };\n  }\n}\nfunction valueFromShares(shares: BN, totalValue: BN, totalShares: BN) {\n  return proportionalBN(shares, totalValue, totalShares);\n}\n\nfunction sharesFromValue(value: BN, totalValue: BN, totalShares: BN) {\n  return totalShares.eq(new BN(0)) ? value : proportionalBN(value, totalShares, totalValue);\n}\n\nfunction saturatingSub(left: BN, right: BN): BN {\n  return left.gt(right) ? left.sub(right) : new BN(0);\n}\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport { isValidRoute, MarketInfo } from './market';\nimport { MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS } from '../constants';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport fetch from 'cross-fetch';\nimport { TokenRouteSegments } from './types';\nimport { Amm, prefetchAmms, SwapMode } from './amm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { ammFactory } from './ammFactory';\nimport { getSaberWrappedDecimalsAmms } from './saber/saberAddDecimalsAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { getTwoPermutations } from '../utils/getTwoPermutations';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { WhirlpoolAmm } from './jupiter';\nimport JSBI from 'jsbi';\n\nexport interface TransactionFeeInfo {\n  signatureFee: number;\n  openOrdersDeposits: number[];\n  ataDeposits: number[];\n  /* Overall amount that will be deducted from user wallet after the swap */\n  totalFeeAndDeposits: number;\n  /* Amount for fee, deposits and temporary token accounts */\n  minimumSOLForTransaction: number;\n}\n\nexport interface RouteInfo {\n  marketInfos: MarketInfo[];\n  inAmount: JSBI;\n  outAmount: JSBI;\n  amount: JSBI; // The target amount, expect input or expect output\n  otherAmountThreshold: JSBI;\n  swapMode: SwapMode;\n  priceImpactPct: number;\n  getDepositAndFee: () => Promise<TransactionFeeInfo | undefined>;\n}\n\ntype MarketsCache = Array<\n  Omit<AccountInfo<Buffer>, 'data' | 'owner'> & {\n    data: [string, 'base64'];\n    owner: string;\n    pubkey: string;\n  }\n>;\n\ntype KeyedAccountInfo = AccountInfo<Buffer> & {\n  pubkey: PublicKey;\n  // api can pass some extra params\n  params?: any;\n};\n\nexport const fetchMarketCache = async (url: string) => {\n  const marketsCache = (await (await fetch(url)).json()) as MarketsCache;\n  return marketsCache;\n};\n\n/** For testing purposes when api does not have the new pools */\nexport async function fetchExtraKeyedAccountInfos(connection: Connection, pks: PublicKey[]) {\n  const extraKeyedAccountInfos = (\n    await chunkedGetMultipleAccountInfos(\n      connection,\n      pks.map((item) => item.toBase58()),\n    )\n  ).map((item, index) => {\n    const pubkey = pks[index];\n    if (!item) throw new Error(`Failed to fetch pool ${pubkey.toBase58()}`);\n    return { pubkey, ...item };\n  });\n  return extraKeyedAccountInfos;\n}\n\nexport async function getAllAmms(connection: Connection, marketsCache: MarketsCache): Promise<Amm[]> {\n  const marketCacheToAccountInfo = (marketsCache: MarketsCache): Array<KeyedAccountInfo> => {\n    return marketsCache.map((market) => {\n      const {\n        data: [accountInfo, format],\n        pubkey,\n        ...rest\n      } = market;\n      return {\n        ...rest,\n        pubkey: new PublicKey(pubkey),\n        data: Buffer.from(accountInfo, format),\n        owner: new PublicKey(rest.owner),\n      };\n    });\n  };\n\n  const marketKeyedAccountInfos = marketCacheToAccountInfo(marketsCache);\n\n  // this is used for development\n  const extraKeys: Array<PublicKey> = [];\n\n  if (extraKeys.length) {\n    const extraKeyedAccountInfos = await fetchExtraKeyedAccountInfos(connection, extraKeys);\n    marketKeyedAccountInfos.push(...extraKeyedAccountInfos);\n  }\n\n  const amms = marketKeyedAccountInfos.reduce((acc, keyedAccountInfo) => {\n    const amm = ammFactory(keyedAccountInfo.pubkey, keyedAccountInfo, keyedAccountInfo.params);\n    // Amm might not be recognized by the current version of the frontend\n    // or be in a state we don't want\n    if (amm) {\n      acc.push(amm);\n    }\n    return acc;\n  }, new Array<Amm>());\n\n  await prefetchAmms(\n    amms.filter((amm) => amm.shouldPrefetch),\n    connection,\n  );\n\n  amms.push(...getSaberWrappedDecimalsAmms());\n\n  return amms;\n}\n\nexport function ammCrossProtocolPairs(arr: Amm[], callback: (a: Amm, b: Amm) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      // Don't pair amm with same label\n      if (arr[i].label !== arr[j].label) {\n        callback(arr[i], arr[j]);\n      }\n    }\n  }\n}\n\nexport function getTokenRouteSegments(amms: Amm[]): TokenRouteSegments {\n  const tokenRouteSegments = new Map<string, Map<string, Amm[]>>();\n\n  amms.forEach((amm) => {\n    const reserveTokenMintPermutations = getTwoPermutations(amm.reserveTokenMints);\n    reserveTokenMintPermutations.forEach(([firstReserveMint, secondReserveMint]) => {\n      addSegment(firstReserveMint.toBase58(), secondReserveMint.toBase58(), amm, tokenRouteSegments);\n    });\n  });\n\n  return tokenRouteSegments;\n}\n\nfunction addSegment(inMint: string, outMint: string, amm: Amm, tokenRouteSegments: TokenRouteSegments) {\n  let segments = tokenRouteSegments.get(inMint);\n\n  if (!segments) {\n    segments = new Map<string, Amm[]>([[outMint, []]]);\n    tokenRouteSegments.set(inMint, segments);\n  }\n\n  let amms = segments.get(outMint);\n  if (!amms) {\n    amms = [];\n    segments.set(outMint, amms);\n  }\n\n  amms.push(amm);\n}\n\nexport type Route = {\n  amms: Amm[];\n  mints: PublicKey[];\n};\n\n/*\n * Construct TokenRouteSegment that is only used for the selected inputMint and outputMint\n * Example:\n *   SOL => USDC, the map would consist of\n *     - SOL => USDC => Amm[]\n *     - SOL => USDT => Amm[]\n *     - USDT => SOL => Amm[]\n */\nexport function computeInputRouteSegments({\n  inputMint,\n  outputMint,\n  tokenRouteSegments,\n  intermediateTokens,\n  swapMode,\n  onlyDirectRoutes,\n}: {\n  inputMint: string;\n  outputMint: string;\n  tokenRouteSegments: TokenRouteSegments;\n  intermediateTokens?: string[];\n  swapMode: SwapMode;\n  onlyDirectRoutes?: boolean;\n}): TokenRouteSegments {\n  const inputRouteSegments: TokenRouteSegments = new Map();\n\n  const inputSegment = tokenRouteSegments.get(inputMint);\n  const outputSegment = tokenRouteSegments.get(outputMint);\n\n  if (inputSegment && outputSegment) {\n    const minSegmentSize = Math.min(inputSegment.size, outputSegment.size);\n    // this is used to minimize the looping part\n    // if SOL => MER, SOL has 100 keys but MER has 6 keys so only the first 6 loops are required always\n    const shouldStartWithInputSegment = inputSegment.size < outputSegment.size;\n\n    const inputInnerMap = new Map<string, Amm[]>();\n    const outputInnerMap = new Map<string, Amm[]>();\n    let [startSegment, endSegment, startMint, endMint] = shouldStartWithInputSegment\n      ? [inputSegment, outputSegment, inputMint, outputMint]\n      : [outputSegment, inputSegment, outputMint, inputMint];\n\n    for (let [mint, amms] of startSegment.entries()) {\n      let filteredAmms = swapMode === SwapMode.ExactIn ? amms : amms.filter((amm) => amm.exactOutputSupported);\n\n      if (mint === endMint) {\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(startMint, filteredAmms);\n        continue;\n      }\n\n      if (\n        onlyDirectRoutes ||\n        swapMode === SwapMode.ExactOut ||\n        shouldSkipOutputMint(intermediateTokens, minSegmentSize, mint)\n      ) {\n        continue;\n      }\n\n      const intersectionAmms = endSegment.get(mint);\n      if (intersectionAmms) {\n        let filteredIntersectionAmms =\n          swapMode === SwapMode.ExactIn ? intersectionAmms : intersectionAmms.filter((amm) => amm.exactOutputSupported);\n\n        inputRouteSegments.set(\n          mint,\n          new Map([\n            [startMint, filteredAmms],\n            [endMint, filteredIntersectionAmms],\n          ]),\n        );\n        inputInnerMap.set(mint, filteredAmms);\n        outputInnerMap.set(mint, filteredIntersectionAmms);\n      }\n    }\n    inputRouteSegments.set(startMint, inputInnerMap);\n    inputRouteSegments.set(endMint, outputInnerMap);\n  }\n\n  return inputRouteSegments;\n}\n\nexport function computeRouteMap(\n  tokenRouteSegments: TokenRouteSegments,\n  intermediateTokens?: string[],\n  onlyDirectRoutes?: boolean,\n): Map<string, string[]> {\n  const routeMap = new Map<string, string[]>();\n\n  for (const [tokenMint, firstLevelOutputs] of tokenRouteSegments) {\n    const validOutputMints = new Set<string>();\n\n    for (const [firstLevelOutputMint, firstLevelAmms] of firstLevelOutputs) {\n      validOutputMints.add(firstLevelOutputMint);\n\n      if (onlyDirectRoutes) {\n        continue;\n      }\n      // add the single level output as possible valid mints as well\n      const secondLevelOutputs = tokenRouteSegments.get(firstLevelOutputMint) ?? new Map<string, Amm[]>();\n\n      for (const [secondLevelOutputMint, secondLevelAmms] of secondLevelOutputs) {\n        // Prevent output mint == input mint when routing\n        if (secondLevelOutputMint === tokenMint) {\n          continue;\n        }\n\n        const outputMintSize = tokenRouteSegments.get(secondLevelOutputMint)?.size ?? 0;\n        const minSegmentSize = Math.min(firstLevelOutputs.size, outputMintSize);\n\n        // if intermediateTokens is specified and it doesnt include in the intermediateTokens, skip it\n        if (shouldSkipOutputMint(intermediateTokens, minSegmentSize, firstLevelOutputMint)) {\n          continue;\n        }\n\n        for (const firstLevelAmm of firstLevelAmms) {\n          for (const secondLevelAmm of secondLevelAmms) {\n            if (isValidRoute(firstLevelAmm, secondLevelAmm)) {\n              validOutputMints.add(secondLevelOutputMint);\n              break;\n            }\n          }\n        }\n      }\n    }\n    routeMap.set(tokenMint, Array.from(validOutputMints));\n  }\n\n  return routeMap;\n}\n\ninterface SplitTradeRequiredParams {\n  hasSerumOpenOrderInstruction: boolean;\n}\n\nfunction shouldSkipOutputMint(\n  intermediateTokens: string[] | undefined,\n  minSegmentSize: number,\n  outputMint: string,\n): boolean {\n  return Boolean(\n    intermediateTokens &&\n      minSegmentSize > MIN_SEGMENT_SIZE_FOR_INTERMEDIATE_MINTS &&\n      !intermediateTokens.includes(outputMint),\n  );\n}\n\nexport function isSplitSetupRequired(\n  marketInfos: MarketInfo[],\n  { hasSerumOpenOrderInstruction }: SplitTradeRequiredParams,\n): { needSetup: boolean; needCleanup: boolean } {\n  let firstAmm: Amm;\n  let secondAmm: Amm;\n\n  if (marketInfos.length === 1) {\n    const amm = marketInfos[0].amm;\n    if (amm instanceof SplitTradeAmm) {\n      firstAmm = amm.firstAmm;\n      secondAmm = amm.secondAmm;\n    } else {\n      return { needSetup: false, needCleanup: false };\n    }\n  } else {\n    [firstAmm, secondAmm] = marketInfos.map((marketInfo) => marketInfo.amm);\n  }\n\n  if (firstAmm instanceof RaydiumAmm || secondAmm instanceof RaydiumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (firstAmm instanceof SerumAmm && secondAmm instanceof SerumAmm) {\n    return { needSetup: true, needCleanup: true };\n  } else if (hasSerumOpenOrderInstruction) {\n    return { needSetup: true, needCleanup: false };\n  }\n\n  return { needSetup: false, needCleanup: false };\n}\n\n// We cannot add platform fee to all possible routing due to transaction size limit\nexport function isPlatformFeeSupported(swapMode: SwapMode, amms: Amm[]): boolean {\n  if (swapMode === SwapMode.ExactOut) return false;\n\n  if (amms.length > 1) {\n    const [firstMarket, secondMarket] = amms;\n\n    if (firstMarket instanceof RaydiumAmm && secondMarket instanceof RaydiumAmm) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getRouteInfoUniqueId(routeInfo: RouteInfo) {\n  return routeInfo.marketInfos.map((marketInfo) => `${marketInfo.amm.id}-${marketInfo.inputMint}`).join('-');\n}\n","import { deserializeAccount } from '@mercurial-finance/optimist';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, PublicKey, SystemProgram, TransactionInstruction } from '@solana/web3.js';\nimport JSBI from 'jsbi';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { getEmptyInstruction, Instruction } from './instruction';\nimport { Owner } from './Owner';\n\n// Leverage the existing ATA when present\nexport async function createAndCloseWSOLAccount({\n  connection,\n  amount,\n  owner: { publicKey },\n}: {\n  connection: Connection;\n  owner: Owner;\n  amount: JSBI;\n}): Promise<Instruction & { address: PublicKey }> {\n  const result = getEmptyInstruction();\n  result.instructions = [];\n\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    WRAPPED_SOL_MINT,\n    publicKey,\n    true,\n  );\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    result.instructions.push(\n      createAssociatedTokenAccountInstruction(publicKey, toAccount, publicKey, WRAPPED_SOL_MINT),\n    );\n  }\n\n  // Fund account and sync\n  result.instructions.push(\n    SystemProgram.transfer({\n      fromPubkey: publicKey,\n      toPubkey: toAccount,\n      lamports: JSBI.toNumber(amount),\n    }),\n  );\n  result.instructions.push(\n    // This is not exposed by the types, but indeed it exists\n    (Token as any).createSyncNativeInstruction(TOKEN_PROGRAM_ID, toAccount),\n  );\n\n  result.cleanupInstructions = [\n    Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n  ];\n\n  return {\n    address: toAccount,\n    ...result,\n  };\n}\n\nexport async function findOrCreateAssociatedAccountByMint({\n  connection,\n  payer,\n  owner: { publicKey },\n  mintAddress,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  payer: PublicKey;\n  owner: Owner;\n  mintAddress: PublicKey | string;\n  unwrapSOL: boolean;\n}): Promise<Instruction & { address: PublicKey }> {\n  const mint = typeof mintAddress === 'string' ? new PublicKey(mintAddress) : mintAddress;\n  const toAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    mint,\n    publicKey,\n    true,\n  );\n  const cleanupInstructions: TransactionInstruction[] = [];\n  const instructions: TransactionInstruction[] = [];\n\n  const info = await connection.getAccountInfo(toAccount);\n\n  if (info === null) {\n    instructions.push(createAssociatedTokenAccountInstruction(payer, toAccount, publicKey, mint));\n  } else {\n    const tokenAccountInfo = deserializeAccount(info.data);\n\n    if (tokenAccountInfo && !tokenAccountInfo.owner.equals(publicKey)) {\n      // What to do at the top level in UIs and SDK?\n      throw new Error(`/!\\ ATA ${toAccount.toBase58()} is not owned by ${publicKey.toBase58()}`);\n    }\n  }\n\n  // We close it when wrapped SOL\n  if (mint.equals(WRAPPED_SOL_MINT) && unwrapSOL) {\n    cleanupInstructions.push(\n      Token.createCloseAccountInstruction(TOKEN_PROGRAM_ID, toAccount, publicKey, publicKey, []),\n    );\n  }\n\n  return {\n    address: toAccount,\n    instructions: instructions,\n    cleanupInstructions,\n    signers: [],\n  };\n}\n\n// 0.1.x @solana/spl-token does not have the version without the rent sysvar\n// Source: https://github.com/solana-labs/solana-program-library/blob/dc5684445f0b42ba36a0157f06c561d967a7cb34/associated-token-account/program/src/instruction.rs#L16-L25\nexport function createAssociatedTokenAccountInstruction(\n  payer: PublicKey,\n  associatedToken: PublicKey,\n  owner: PublicKey,\n  mint: PublicKey,\n  programId = TOKEN_PROGRAM_ID,\n  associatedTokenProgramId = ASSOCIATED_TOKEN_PROGRAM_ID,\n): TransactionInstruction {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedToken, isSigner: false, isWritable: true },\n    { pubkey: owner, isSigner: false, isWritable: false },\n    { pubkey: mint, isSigner: false, isWritable: false },\n    { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n    { pubkey: programId, isSigner: false, isWritable: false },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: associatedTokenProgramId,\n    data: Buffer.alloc(0),\n  });\n}\n","import { Signer, Transaction, TransactionInstruction, TransactionSignature } from '@solana/web3.js';\n\nexport const getEmptyInstruction: () => Instruction = () => ({\n  instructions: [],\n  cleanupInstructions: [],\n  signers: [],\n});\n\nexport type Instruction = {\n  instructions: TransactionInstruction[];\n  cleanupInstructions: TransactionInstruction[];\n  signers: Signer[];\n};\n\nexport type TransactionPayload = {\n  transaction: Transaction;\n  signers: Signer[];\n  execute: () => Promise<TransactionSignature>;\n};\n","import { Connection, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { isPlatformFeeSupported, RouteInfo } from './routes';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { findOrCreateAssociatedAccountByMint } from '../utils/token';\nimport { createSetTokenLedgerInstruction } from './jupiterInstruction';\nimport { Owner } from '../utils/Owner';\nimport { PlatformFee } from './types';\nimport { QuoteMintToReferrer } from '..';\nimport { isSerumAndRaydium } from './market';\nimport { ZERO } from '@jup-ag/math';\nimport { BN } from 'bn.js';\n\ntype RouteToInstructionsParams = {\n  user: Owner;\n  tokenLedger: PublicKey;\n  openOrdersAddresses: (PublicKey | undefined)[];\n  userSourceTokenAccountAddress: PublicKey;\n  userIntermediaryTokenAccountAddress: PublicKey | undefined;\n  userDestinationTokenAccountAddress: PublicKey;\n  routeInfo: RouteInfo;\n  platformFee: PlatformFee | undefined;\n  quoteMintToReferrer: QuoteMintToReferrer;\n};\n\nasync function routeToInstructions({\n  user,\n  tokenLedger,\n  openOrdersAddresses,\n  userSourceTokenAccountAddress,\n  userIntermediaryTokenAccountAddress,\n  userDestinationTokenAccountAddress,\n  routeInfo,\n  platformFee,\n  quoteMintToReferrer,\n}: RouteToInstructionsParams): Promise<Instruction> {\n  const otherAmountThreshold = routeInfo.otherAmountThreshold;\n  const amount = routeInfo.amount;\n\n  const legs = routeInfo.marketInfos.length;\n  if (legs === 2 && !userIntermediaryTokenAccountAddress) {\n    throw new Error('Missing intermediary token account');\n  }\n\n  // Drop referrer if space is scarce\n  const effectiveQuoteMintToReferrer =\n    platformFee && isSerumAndRaydium(routeInfo.marketInfos) ? undefined : quoteMintToReferrer;\n\n  const userIntermediateTokenAccountAddresses = userIntermediaryTokenAccountAddress\n    ? [userIntermediaryTokenAccountAddress]\n    : [];\n  const userTokenAccountAddresses = [\n    userSourceTokenAccountAddress,\n    ...userIntermediateTokenAccountAddresses,\n    userDestinationTokenAccountAddress,\n  ];\n\n  const platformFeeSupported = isPlatformFeeSupported(\n    routeInfo.swapMode,\n    routeInfo.marketInfos.map((mi) => mi.amm),\n  );\n\n  const instructions: TransactionInstruction[] = [\n    createSetTokenLedgerInstruction(tokenLedger, userTokenAccountAddresses[1]),\n  ];\n\n  for (const [index, marketInfo] of routeInfo.marketInfos.entries()) {\n    const amm = marketInfo.amm;\n    const legAmount = index === 0 ? new BN(amount.toString()) : null;\n    const isLastLeg = index === legs - 1;\n    const legOtherAmountThreshold = new BN((isLastLeg ? otherAmountThreshold : ZERO).toString());\n    const legPlatformFee = isLastLeg && platformFeeSupported ? platformFee : undefined;\n\n    const [userSourceTokenAccount, userDestinationTokenAccount] = userTokenAccountAddresses.slice(index);\n\n    instructions.push(\n      ...amm.createSwapInstructions({\n        sourceMint: marketInfo.inputMint,\n        destinationMint: marketInfo.outputMint,\n        userSourceTokenAccount,\n        userDestinationTokenAccount,\n        userTransferAuthority: user.publicKey,\n        amount: legAmount,\n        otherAmountThreshold: legOtherAmountThreshold,\n        swapMode: routeInfo.swapMode,\n        tokenLedger,\n        openOrdersAddress: openOrdersAddresses[index],\n        platformFee: legPlatformFee,\n        quoteMintToReferrer: effectiveQuoteMintToReferrer,\n      }),\n    );\n  }\n\n  const { signers, cleanupInstructions } = getEmptyInstruction();\n\n  if (user.isKeyPair && user.signer) {\n    signers.push(user.signer);\n  }\n  return {\n    signers,\n    cleanupInstructions,\n    instructions,\n  };\n}\n\nexport const routeAtaInstructions = async ({\n  connection,\n  marketInfos,\n  owner,\n  unwrapSOL,\n}: {\n  connection: Connection;\n  marketInfos: RouteInfo['marketInfos'];\n  owner: Owner;\n  unwrapSOL: boolean;\n}) => {\n  const getUserIntermediateTokenAccountAddress = async () => {\n    const userIntermediateTokenAccountAddress =\n      marketInfos.length === 2\n        ? await findOrCreateAssociatedAccountByMint({\n            connection,\n            owner: owner,\n            payer: owner.publicKey,\n            mintAddress: marketInfos[0].outputMint,\n            unwrapSOL,\n          })\n        : undefined;\n    return userIntermediateTokenAccountAddress;\n  };\n\n  const getUserDestinationTokenAccountAddress = () => {\n    return findOrCreateAssociatedAccountByMint({\n      connection,\n      owner: owner,\n      payer: owner.publicKey,\n      mintAddress: marketInfos.length === 2 ? marketInfos[1].outputMint : marketInfos[0].outputMint,\n      unwrapSOL,\n    });\n  };\n\n  const [userIntermediaryTokenAccountResult, userDestinationTokenAccountResult] = await Promise.all([\n    getUserIntermediateTokenAccountAddress(),\n    getUserDestinationTokenAccountAddress(),\n  ]);\n\n  return {\n    userIntermediaryTokenAccountResult,\n    userDestinationTokenAccountResult,\n  };\n};\n\nexport default routeToInstructions;\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { SerumMarket } from '../market';\nimport { getEmptyInstruction, Instruction } from '../../utils/instruction';\nimport { wait } from '../../utils/wait';\nimport { createOpenOrdersInstruction } from '../jupiterInstruction';\n\nexport type MarketToOpenOrdersAddress = Map<string, PublicKey>;\n\nexport async function getOrCreateOpenOrdersAddress(\n  connection: Connection,\n  user: PublicKey,\n  serumMarket: SerumMarket,\n  marketToOpenOrdersAddress?: MarketToOpenOrdersAddress,\n): Promise<(Instruction & { address: PublicKey }) | undefined> {\n  const result = getEmptyInstruction();\n\n  const marketAddress = serumMarket.address.toString();\n\n  if (marketToOpenOrdersAddress) {\n    // check existing map\n    let openOrdersAddress = marketToOpenOrdersAddress.get(marketAddress);\n\n    if (openOrdersAddress) {\n      let openOrdersAccountInfo = null;\n\n      // We verify if it indeed exists, with low commitment to pick it up, to address the unsafe behaviour below\n      openOrdersAccountInfo = await connection.getAccountInfo(openOrdersAddress, 'confirmed');\n\n      if (openOrdersAccountInfo) {\n        return {\n          ...result,\n          address: openOrdersAddress,\n        };\n      }\n    }\n  }\n\n  const [newOpenOrdersAddress, ix] = createOpenOrdersInstruction(serumMarket, user);\n\n  const newOpenOrdersAddressInfo = await connection.getAccountInfo(newOpenOrdersAddress);\n\n  if (!newOpenOrdersAddressInfo) {\n    result.instructions = [ix];\n  }\n\n  // This is unsafe, since we don't know yet if it has succeeded\n  marketToOpenOrdersAddress?.set(serumMarket.address.toString(), newOpenOrdersAddress);\n\n  return {\n    ...result,\n    address: newOpenOrdersAddress,\n  };\n}\n","import { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { Connection, FeeCalculator, PublicKey } from '@solana/web3.js';\nimport type { SerumOpenOrdersMap } from '..';\nimport { WRAPPED_SOL_MINT } from '../constants';\nimport { deserializeAccount } from '@mercurial-finance/optimist';\nimport { RouteInfo, TransactionFeeInfo } from './routes';\nimport { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { PlatformFeeAndAccounts, SetupInstructions } from './types';\nimport { Owner } from '../utils/Owner';\n\nconst SERUM_OPEN_ACCOUNT_LAMPORTS = 23_352_760;\nconst OPEN_TOKEN_ACCOUNT_LAMPORTS = 2_039_280;\n\nfunction sum(values: number[]) {\n  return values.reduce((value, acc) => {\n    acc += value;\n    return acc;\n  }, 0);\n}\n\nconst calculateTransactionDepositAndFee = ({\n  intermediate,\n  destination,\n  openOrders,\n  hasWrapUnwrapSOL,\n  feeCalculator,\n}: SetupInstructions & {\n  hasWrapUnwrapSOL: boolean;\n  feeCalculator: FeeCalculator;\n}): TransactionFeeInfo => {\n  const openOrdersDeposits = openOrders\n    .filter((ooi) => ooi && ooi.instructions.length > 0)\n    .map(() => SERUM_OPEN_ACCOUNT_LAMPORTS);\n  const ataDeposits = [intermediate, destination]\n    .filter((item) => item?.instructions.length && item.cleanupInstructions.length === 0)\n    .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS);\n\n  const signatureFee =\n    ([...openOrders?.map((oo) => oo?.signers), intermediate?.signers, destination.signers].filter(Boolean).flat()\n      .length +\n      1) *\n    feeCalculator.lamportsPerSignature;\n\n  const totalFeeAndDeposits = sum([signatureFee, ...openOrdersDeposits, ...ataDeposits]);\n\n  // We need to account for temporary wrapped SOL token accounts as intermediary or output\n  const minimumSOLForTransaction = sum([\n    signatureFee,\n    ...openOrdersDeposits,\n    ...[intermediate, destination]\n      .filter((item) => (item?.instructions.length ?? 0) > 0)\n      .map(() => OPEN_TOKEN_ACCOUNT_LAMPORTS),\n    hasWrapUnwrapSOL ? OPEN_TOKEN_ACCOUNT_LAMPORTS : 0,\n  ]);\n\n  return {\n    signatureFee,\n    openOrdersDeposits,\n    ataDeposits,\n    totalFeeAndDeposits,\n    minimumSOLForTransaction,\n  };\n};\n\nexport const getDepositAndFeeFromInstructions = async ({\n  connection,\n  owner,\n  inputMint,\n  marketInfos,\n  feeCalculator,\n  serumOpenOrdersPromise,\n  wrapUnwrapSOL: unwrapSOL,\n}: {\n  connection: Connection;\n  owner: Owner;\n  inputMint: PublicKey;\n  marketInfos: RouteInfo['marketInfos'];\n  feeCalculator: FeeCalculator;\n  /* promise because we can choose not to await it when we dont need it */\n  serumOpenOrdersPromise: Promise<SerumOpenOrdersMap>;\n  wrapUnwrapSOL: boolean;\n}) => {\n  const hasWrapUnwrapSOL = inputMint.equals(WRAPPED_SOL_MINT) && unwrapSOL;\n\n  const openOrdersInstructionsPromise = Promise.all(\n    marketInfos.map(async (marketInfo) => {\n      const amm = marketInfo.amm;\n      if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n        if (!amm.market) return;\n        return await getOrCreateOpenOrdersAddress(\n          connection,\n          owner.publicKey,\n          amm.market,\n          await serumOpenOrdersPromise,\n        );\n      }\n      return;\n    }),\n  );\n\n  const promise = routeAtaInstructions({ connection, marketInfos, owner, unwrapSOL }).then(\n    ({ userIntermediaryTokenAccountResult, userDestinationTokenAccountResult }) => {\n      return openOrdersInstructionsPromise.then((openOrdersInstructions) => ({\n        intermediate: userIntermediaryTokenAccountResult,\n        destination: userDestinationTokenAccountResult,\n        openOrders: openOrdersInstructions,\n      }));\n    },\n  );\n\n  const instructionResult = await promise;\n\n  return calculateTransactionDepositAndFee({\n    ...instructionResult,\n    hasWrapUnwrapSOL,\n    feeCalculator,\n  });\n};\n\nexport const NO_PLATFORM_FEE: PlatformFeeAndAccounts = {\n  feeBps: 0,\n  feeAccounts: new Map<string, PublicKey>(),\n};\n\nexport async function getPlatformFeeAccounts(\n  connection: Connection,\n  feeAccountOwner: PublicKey,\n): Promise<Map<string, PublicKey>> {\n  const tokenAccounts = (\n    await connection.getTokenAccountsByOwner(feeAccountOwner, {\n      programId: TOKEN_PROGRAM_ID,\n    })\n  ).value;\n\n  const feeAccounts = tokenAccounts.reduce((acc, tokenAccount) => {\n    const deserializedtokenAccount = deserializeAccount(tokenAccount.account.data);\n    if (deserializedtokenAccount) {\n      acc.set(deserializedtokenAccount.mint.toBase58(), tokenAccount.pubkey);\n    }\n    return acc;\n  }, new Map<string, PublicKey>());\n\n  return feeAccounts;\n}\n","import {\n  Connection,\n  PublicKey,\n  Transaction,\n  TransactionCtorFields_DEPRECATED,\n  Signer,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { Instruction, TransactionPayload } from './instruction';\nimport { Owner } from './Owner';\n\nexport class TransactionBuilder {\n  private connection: Connection;\n  private feePayer: PublicKey;\n  private instructions: Instruction[];\n  private owner: Owner;\n\n  constructor(connection: Connection, feePayer: PublicKey, owner: Owner) {\n    this.connection = connection;\n    this.feePayer = feePayer;\n    this.instructions = [];\n    this.owner = owner;\n  }\n\n  addInstruction(instruction: Instruction): TransactionBuilder {\n    this.instructions.push(instruction);\n    return this;\n  }\n\n  async build(recentBlockHash?: string): Promise<TransactionPayload> {\n    if (!recentBlockHash) {\n      recentBlockHash = (await this.connection.getLatestBlockhash('confirmed')).blockhash;\n    }\n\n    const txFields: TransactionCtorFields_DEPRECATED = {\n      recentBlockhash: recentBlockHash,\n      feePayer: this.feePayer,\n    };\n\n    let instructions: TransactionInstruction[] = [];\n    let cleanupInstructions: TransactionInstruction[] = [];\n    let signers: Signer[] = [];\n    this.instructions.forEach((curr) => {\n      instructions = instructions.concat(curr.instructions);\n      cleanupInstructions = cleanupInstructions.concat(curr.cleanupInstructions);\n      signers = signers.concat(curr.signers);\n    });\n\n    const transaction = new Transaction(txFields);\n    instructions.concat(cleanupInstructions).forEach((ix) => transaction.add(ix));\n    transaction.feePayer = this.feePayer;\n\n    return {\n      transaction: transaction,\n      signers: signers,\n      execute: this.owner.isKeyPair\n        ? () => {\n            return this.connection.sendTransaction(transaction, signers);\n          }\n        : async () => {\n            throw new Error('Please use a Keypair for the owner parameter to enable the execute function');\n          },\n    };\n  }\n}\n","import { Keypair, PublicKey, Signer } from '@solana/web3.js';\n\ntype _Owner = Keypair | PublicKey;\n\nexport class Owner {\n  private readonly _owner: _Owner;\n\n  constructor(owner: _Owner) {\n    this._owner = owner;\n  }\n\n  get publicKey(): PublicKey {\n    if (Owner.isKeyPair(this._owner)) {\n      return this._owner.publicKey;\n    }\n\n    return this._owner;\n  }\n\n  get signer(): Signer | undefined {\n    return Owner.isKeyPair(this._owner) ? this._owner : undefined;\n  }\n\n  get isKeyPair(): boolean {\n    return Owner.isKeyPair(this._owner);\n  }\n\n  get isPublicKey(): boolean {\n    return Owner.isPublicKey(this._owner);\n  }\n\n  static isKeyPair(owner: _Owner): owner is Keypair {\n    return (owner as Keypair).secretKey !== undefined;\n  }\n\n  static isPublicKey(owner: _Owner): owner is PublicKey {\n    return !Owner.isKeyPair(owner);\n  }\n}\n","export const wait = (time: number) => new Promise<void>((resolve) => setTimeout(resolve, time));\n","import { TransactionError } from '@mercurial-finance/optimist';\nimport { bs58 } from '@project-serum/anchor/dist/cjs/utils/bytes';\nimport {\n  ConfirmedTransactionMeta,\n  Connection,\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionResponse,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport Decimal from 'decimal.js';\nimport promiseRetry from 'promise-retry';\nimport { WRAPPED_SOL_MINT, JUPITER_ERRORS } from '../constants';\nimport { wait } from './wait';\n\ntype ResponseMeta = NonNullable<TransactionResponse['meta']>;\ntype ReponseTransaction = TransactionResponse['transaction'];\n\nfunction diffTokenBalance(accountKeyIndex: number, meta: ConfirmedTransactionMeta): number | undefined {\n  const postBalance = meta.postTokenBalances?.find(\n    (postTokenBalance) => postTokenBalance.accountIndex === accountKeyIndex,\n  )?.uiTokenAmount.amount;\n  const preBalance = meta.preTokenBalances?.find((preTokenBalance) => preTokenBalance.accountIndex === accountKeyIndex)\n    ?.uiTokenAmount.amount;\n\n  // When token account is created it isn't present in preBalance\n  if (!postBalance) return;\n  return Math.abs(parseInt(postBalance) - (preBalance !== undefined ? parseInt(preBalance) : 0));\n}\n\nexport function extractTokenBalanceChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  tokenAccountAddress: PublicKey,\n): number | undefined {\n  const message = transaction.message;\n\n  if (!meta) {\n    return;\n  }\n  const index = message.accountKeys.findIndex((p) => p.equals(tokenAccountAddress));\n\n  return diffTokenBalance(index, meta);\n}\n\nexport function extractSOLChangeFromTransaction(\n  meta: ResponseMeta,\n  transaction: ReponseTransaction,\n  user: PublicKey,\n): number {\n  let accountKeyIndex = transaction.message.accountKeys.findIndex((p) => p.equals(user));\n\n  if (accountKeyIndex !== -1) {\n    return Math.abs(meta.postBalances[accountKeyIndex] - meta.preBalances[accountKeyIndex]);\n  }\n\n  // if 0 is returned it will throw error in the caller function\n  return 0;\n}\n\nexport function getWritableKeys(transaction: Transaction) {\n  return [\n    ...new Set(\n      transaction.instructions\n        .map((inst) => inst.keys.filter((key) => key.isWritable).map((k) => k.pubkey))\n        .reduce((acc, el) => acc.concat(el)),\n    ).values(),\n  ];\n}\n\nexport function getTokenBalanceChangesFromTransactionResponse({\n  txid,\n  inputMint,\n  outputMint,\n  user,\n  sourceAddress,\n  destinationAddress,\n  transactionResponse,\n  hasWrappedSOL,\n}: {\n  txid: TransactionSignature;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  user: PublicKey;\n  sourceAddress: PublicKey;\n  destinationAddress: PublicKey;\n  transactionResponse: TransactionResponse | null;\n  hasWrappedSOL: boolean;\n}) {\n  let sourceTokenBalanceChange: number | undefined;\n  let destinationTokenBalanceChange: number | undefined;\n\n  if (transactionResponse) {\n    let { meta, transaction } = transactionResponse;\n    if (meta) {\n      sourceTokenBalanceChange =\n        inputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, sourceAddress);\n      destinationTokenBalanceChange =\n        outputMint.equals(WRAPPED_SOL_MINT) && !hasWrappedSOL\n          ? extractSOLChangeFromTransaction(meta, transaction, user)\n          : extractTokenBalanceChangeFromTransaction(meta, transaction, destinationAddress);\n    }\n  }\n\n  if (!(sourceTokenBalanceChange && destinationTokenBalanceChange)) {\n    throw new TransactionError(\n      'Cannot find source or destination token account balance change',\n      txid,\n      JUPITER_ERRORS['BalancesNotExtractedProperly'].code,\n    );\n  }\n\n  return [sourceTokenBalanceChange, destinationTokenBalanceChange];\n}\n\nexport async function pollForConfirmedTransaction(\n  connection: Connection,\n  txid: TransactionSignature,\n): Promise<TransactionResponse | null> {\n  return promiseRetry(\n    async (retry) => {\n      const response = await connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      });\n      if (!response) {\n        retry(\n          new TransactionError('Transaction was not confirmed', txid, JUPITER_ERRORS['TransactionNotConfirmed'].code),\n        );\n      }\n      return response;\n    },\n    {\n      retries: 30,\n      minTimeout: 500,\n    },\n  ).catch(() => null);\n}\n\nexport function getUnixTs() {\n  return new Date().getTime();\n}\n\nconst SEND_OPTIONS: SendOptions = { skipPreflight: true, maxRetries: 2 };\n\n/**\n * awaits confirmation while resending the transaction periodically\n *\n * Our RPC node settings\n * solana_send_leader_count: 8\n * solana_send_retry_ms: 15000\n **/\nexport async function transactionSenderAndConfirmationWaiter(\n  connection: Connection,\n  signedTransaction: Transaction,\n  timeout = 120_000, // 2 minutes, (sendInterval * sendRetries) = 80_000 + extra wait 40_000\n  pollInterval = 500,\n  sendInterval = 2_000,\n  sendRetries = 40,\n): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  const rawTransaction = signedTransaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n\n  const start = getUnixTs();\n  let lastSendTimestamp = getUnixTs();\n  let retries = 0;\n\n  while (getUnixTs() - start < timeout) {\n    const timestamp = getUnixTs();\n    if (retries < sendRetries && timestamp - lastSendTimestamp > sendInterval) {\n      lastSendTimestamp = timestamp;\n      retries += 1;\n      await connection.sendRawTransaction(rawTransaction, SEND_OPTIONS);\n    }\n    const response = await Promise.any([\n      connection.getTransaction(txid, {\n        commitment: 'confirmed',\n      }),\n      wait(5000),\n    ]);\n    if (response) return { txid, transactionResponse: response };\n    await wait(pollInterval);\n  }\n  return { txid, transactionResponse: null };\n}\n\nexport function getSignature(transaction: Transaction) {\n  const signature = transaction.signature;\n  if (!signature) {\n    throw new Error('Transaction has no signature');\n  }\n  return bs58.encode(signature);\n}\n","// The package is missing cjs. Apache License 2.0\n// https://github.com/ehmicky/fast-cartesian/blob/619a497dffd978fb4a09a83f2ca047915579774f/src/main.js\n\n// Validate 'array()' input\nconst validateInput = function <T>(arrays: T[][]) {\n  if (!Array.isArray(arrays)) {\n    throw new TypeError('Argument must be an array of arrays');\n  }\n\n  arrays.forEach(validateArray);\n  validateDimensions(arrays);\n  validateCombinations(arrays);\n};\n\nconst validateArray = function <T>(array: T[]) {\n  if (!Array.isArray(array)) {\n    throw new TypeError(`Argument must be an array: ${array}`);\n  }\n};\n\n// Maximum number of nested `for` loops. In my machine, it's 604 but it is\n// engine-specific so we use a safe number. Above the limit, a max call stack\n// error is thrown by the engine.\nconst validateDimensions = function <T>({ length }: T[]) {\n  if (length >= MAX_DIMENSIONS) {\n    throw new TypeError(\n      `Too many arrays (${length}): please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst MAX_DIMENSIONS = 1e2;\n\n// Max array size in JavaScript. This is the limit of the final return value.\nconst validateCombinations = function <T>(arrays: T[][]) {\n  const size = arrays.reduce(multiplySize, 1);\n\n  if (size >= MAX_SIZE) {\n    const sizeStr = Number.isFinite(size) ? ` (${size.toExponential(0)})` : '';\n    throw new TypeError(\n      `Too many combinations${sizeStr}: please use the 'big-cartesian' library instead of 'fast-cartesian'`,\n    );\n  }\n};\n\nconst multiplySize = function <T>(size: number, array: T[]) {\n  return size * array.length;\n};\n\nconst MAX_SIZE = 4294967296; // 2 ** 32 = 4,294,967,296\n\n// Does a cartesian product on several arrays.\n// Returns an array with the results.\n// Optimized to be the fastest implementation in JavaScript.\nexport default function fastCartesian<T>(arrays: T[][]): T[][] {\n  validateInput(arrays);\n\n  if (arrays.length === 0) {\n    return [];\n  }\n\n  const loopFunc = getLoopFunc(arrays.length);\n  const result: T[][] = [];\n  loopFunc(arrays, result);\n  return result;\n}\n\nconst getLoopFunc = function (length: number) {\n  const cachedLoopFunc = cache[length];\n\n  if (cachedLoopFunc !== undefined) {\n    return cachedLoopFunc;\n  }\n\n  const loopFunc = mGetLoopFunc(length);\n  // eslint-disable-next-line fp/no-mutation\n  cache[length] = loopFunc;\n  return loopFunc;\n};\n\nconst cache: Record<number, any> = {};\n\n// Create a function with `new Function()` that does:\n//   function(arrays, results) {\n//     for (const value0 of arrays[0]) {\n//       for (const value1 of arrays[1]) {\n//         // and so on\n//         results.push([value0, value1])\n//       }\n//     }\n//   }\nconst mGetLoopFunc = function (length: number) {\n  const indexes = Array.from({ length }, getIndex);\n  const start = indexes.map((index) => `for (const value${index} of arrays[${index}]) {`).join('\\n');\n  const middle = indexes.map((index) => `value${index}`).join(', ');\n  const end = '}\\n'.repeat(length);\n\n  // eslint-disable-next-line no-new-func\n  return new Function('arrays', 'result', `${start}\\nresult.push([${middle}])\\n${end}`);\n};\n\nconst getIndex = function (value: any, index: number) {\n  return String(index);\n};\n","import { Connection, PublicKey } from '@solana/web3.js';\nimport { chunkedGetMultipleAccountInfos } from '../utils/chunkedGetMultipleAccountInfos';\nimport { Amm, SwapMode, Quote } from './amm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { isValidRoute, MarketInfo } from './market';\nimport { ammCrossProtocolPairs, isPlatformFeeSupported, Route, RouteInfo, TransactionFeeInfo } from './routes';\nimport { TokenRouteSegments } from './types';\nimport { IS_DEV } from '../constants';\nimport fastCartesian from '../utils/cartesian';\nimport JSBI from 'jsbi';\nimport { ZERO } from '@jup-ag/math';\nimport Decimal from 'decimal.js';\n\nconst PLATFORM_FEE_DENOMINATOR = JSBI.BigInt(10000);\n\nexport async function fetchAccountInfos(connection: Connection, routes: TokenRouteSegments): Promise<void> {\n  const accountInfosMap = new Map();\n\n  const accountsToFetchSet = new Set<string>();\n  const ammMap = new Map<string, Amm>();\n  routes.forEach((innerMap) => {\n    innerMap.forEach((amms) => {\n      amms.forEach((amm) => {\n        ammMap.set(amm.id, amm);\n        amm.getAccountsForUpdate().forEach((account) => {\n          // Only add accountInfos that is not in the Map\n          accountsToFetchSet.add(account.toBase58());\n        });\n      });\n    });\n  });\n\n  const accountsToFetch = Array.from(accountsToFetchSet);\n\n  if (accountsToFetch.length > 0) {\n    const accountInfos = await chunkedGetMultipleAccountInfos(connection, accountsToFetch);\n\n    accountInfos.forEach((item, index) => {\n      const publicKey = accountsToFetch[index];\n      if (item) {\n        accountInfosMap.set(publicKey, item);\n      }\n    });\n\n    ammMap.forEach((amm) => {\n      amm.update(accountInfosMap);\n    });\n  }\n}\n\ninterface GetQuotesParams {\n  inputRouteSegment: TokenRouteSegments;\n  amount: JSBI;\n  inputMint: PublicKey;\n  outputMint: PublicKey;\n  platformFeeBps: number;\n  slippage: number;\n  filterTopNResult?: number;\n  onlyDirectRoutes?: boolean;\n  swapMode: SwapMode;\n  getDepositAndFeeForRoute: (params: {\n    marketInfos: RouteInfo['marketInfos'];\n  }) => Promise<TransactionFeeInfo | undefined>;\n}\n\nfunction getInputOutputId({ inputMint, outputMint }: { inputMint: string; outputMint: string }) {\n  return `${inputMint}-${outputMint}`;\n}\n\nfunction getQuoteId({ ammId, amount }: { ammId: string; amount: JSBI }) {\n  return `${ammId}-${amount.toString()}`;\n}\n\ntype QuoteMap = Map<string, Quote>;\n\nfunction getQuoteAndSortBasedOnOutAmount({\n  amms,\n  inputMint,\n  outputMint,\n  amount,\n  swapMode,\n}: {\n  amms: Amm[];\n  inputMint: string;\n  outputMint: string;\n  amount: JSBI;\n  swapMode: SwapMode;\n}): Array<{ amm: Amm; quote: Quote }> {\n  const quotes = amms\n    .map((amm) => {\n      try {\n        const quote = amm.getQuote({\n          amount,\n          sourceMint: new PublicKey(inputMint),\n          destinationMint: new PublicKey(outputMint),\n          swapMode,\n        });\n        return { quote, amm: amm };\n      } catch (e) {\n        if (IS_DEV) {\n          console.error(e);\n        }\n        return undefined;\n      }\n    })\n    .filter(Boolean)\n    .sort((a, b) =>\n      JSBI.greaterThanOrEqual(b?.quote.outAmount || ZERO, a?.quote.outAmount || ZERO) ? 1 : -1,\n    ) as Array<{\n    amm: Amm;\n    quote: Quote;\n  }>;\n\n  return quotes;\n}\n\n// Change this to support N-1 level of hops\nconst MAX_LEVEL = 2;\n\nexport function processInputRouteSegmentToRoutesInfos({\n  inputRouteSegment,\n  inputMint,\n  outputMint,\n  amount,\n  getDepositAndFeeForRoute,\n  platformFeeBps,\n  slippage,\n  filterTopNResult = 3,\n  onlyDirectRoutes,\n  swapMode,\n}: GetQuotesParams) {\n  const inputMintString = inputMint.toBase58();\n  const outputMintString = outputMint.toBase58();\n  // (InputMint-OutputMint) map to (AmmId-InputAmount) map to Quote from the amm with the inputAmount\n  // this is used to prevent calculation being repeated later on.\n  const tradeIdQuoteMap = new Map<string, Map<string, Quote>>();\n  const inputMintInnerMap = inputRouteSegment.get(inputMintString);\n\n  const routes: Route[] = [];\n\n  if (!inputMintInnerMap) {\n    throw new Error('No routes found for the input and output mints');\n  }\n\n  const maxLevel = onlyDirectRoutes ? 0 : MAX_LEVEL;\n  /*\n   * It get the rate of all single pair that is linked to the inputMint\n   * Example: SOL => USDC, will have direct pair, while\n   *          SOL => USDT, USDT => SOL will have a hop\n   *\n   * So we go through each of the hop and get the top 3 rate and drop others\n   * This will eventually reduce the needs to compute bad rate for the same pair\n   *\n   * The loop below is doing for the inputMint, while the one after is doing for the outputMint.\n   */\n  const walkTheTree = ({\n    inputMint,\n    level = 0,\n    walked = [inputMint],\n  }: {\n    inputMint: string;\n    amount: JSBI;\n    level?: number;\n    walked?: string[];\n  }) => {\n    const inputMintInnerMap = inputRouteSegment.get(inputMint);\n\n    if (inputMintInnerMap) {\n      inputMintInnerMap.forEach((amms, outMint) => {\n        const tradeId = getInputOutputId({\n          inputMint,\n          outputMint: outMint,\n        });\n\n        const sortedQuotesWithAmms = getQuoteAndSortBasedOnOutAmount({\n          amms,\n          inputMint,\n          outputMint: outMint,\n          amount,\n          swapMode,\n        });\n\n        const { filteredAmms, quoteMap } = sortedQuotesWithAmms.reduce(\n          (result, item, idx) => {\n            if (idx < filterTopNResult) {\n              result.filteredAmms.push(item.amm);\n            }\n            result.quoteMap.set(getQuoteId({ ammId: item.amm.id, amount }), item.quote);\n            return result;\n          },\n          { filteredAmms: [] as Amm[], quoteMap: new Map() as QuoteMap },\n        );\n\n        const splitTradeAmms: SplitTradeAmm[] = [];\n        // add split trade in when outputMint match and it's not direct only routes\n        if (outMint === outputMintString && !onlyDirectRoutes) {\n          ammCrossProtocolPairs(filteredAmms.slice(), (firstAmm, secondAmm) => {\n            const splitTradeAmm = SplitTradeAmm.create(firstAmm, secondAmm);\n            if (splitTradeAmm) {\n              splitTradeAmms.push(splitTradeAmm);\n            }\n          });\n        }\n\n        inputMintInnerMap.set(outMint, filteredAmms.concat(splitTradeAmms));\n\n        tradeIdQuoteMap.set(tradeId, quoteMap);\n\n        // keep looping if not walked and not reached max level\n        if (outMint !== outputMintString && quoteMap.size && !walked.includes(outMint) && level < maxLevel - 1) {\n          walkTheTree({\n            inputMint: outMint,\n            amount: quoteMap.values().next().value.outAmount,\n            level: level + 1,\n            walked: walked.concat(outMint),\n          });\n        } else if (outMint === outputMintString) {\n          if (level === 0) {\n            // we need to add the direct routes as it is computed instead of using filteredAmms\n            inputMintInnerMap.set(outMint, sortedQuotesWithAmms.map((item) => item.amm).concat(splitTradeAmms));\n          }\n\n          // if output reached, we add the route\n          const mints = walked.concat(outMint);\n          const _mints = mints.map((i) => new PublicKey(i));\n          const ammsArr = mints.reduce((amms, _, index) => {\n            if (index < mints.length - 1) {\n              amms.push(inputRouteSegment.get(mints[index])?.get(mints[index + 1])!);\n            }\n            return amms;\n          }, [] as Amm[][]);\n\n          const permutations: Amm[][] = fastCartesian(ammsArr);\n\n          permutations.forEach((item) => {\n            if (item.length === 1 || isValidRoute(item[0], item[1])) {\n              routes.push({\n                amms: item,\n                mints: _mints,\n              });\n            }\n          });\n        }\n      });\n    }\n  };\n\n  walkTheTree({\n    inputMint: inputMintString,\n    amount,\n  });\n\n  const routesInfo: RouteInfo[] = routes\n    .map((route) => {\n      const { amms, mints } = route;\n\n      // Chain all amms\n      let marketInfos: MarketInfo[] = [];\n      let intermediateAmount = amount;\n      let otherAmountThreshold = ZERO;\n      const platformFeeSupported = isPlatformFeeSupported(swapMode, amms);\n      const tokenMints: PublicKey[] = mints;\n\n      const legs = amms.length;\n      for (const [i, amm] of amms.entries()) {\n        try {\n          const sourceMint = tokenMints[i];\n          const destinationMint = tokenMints[i + 1];\n\n          const tradeId = getInputOutputId({\n            inputMint: sourceMint.toBase58(),\n            outputMint: destinationMint.toBase58(),\n          });\n\n          const cacheQuote = tradeIdQuoteMap\n            .get(tradeId)\n            ?.get(getQuoteId({ ammId: amm.id, amount: intermediateAmount }));\n\n          const quote =\n            cacheQuote ||\n            amm.getQuote({\n              sourceMint,\n              destinationMint,\n              amount: intermediateAmount,\n              swapMode,\n            });\n\n          // Platform fee applicable only on last leg\n          const isLastLeg = legs - 1 === i;\n          const platformFee =\n            isLastLeg && platformFeeSupported\n              ? {\n                  amount: JSBI.divide(\n                    JSBI.multiply(quote.outAmount, JSBI.BigInt(platformFeeBps)),\n                    PLATFORM_FEE_DENOMINATOR,\n                  ),\n                  mint: destinationMint.toBase58(),\n                  pct: platformFeeBps / 100,\n                }\n              : { amount: ZERO, mint: destinationMint.toBase58(), pct: 0 };\n\n          const amountForFees = swapMode === SwapMode.ExactIn ? quote.outAmount : quote.inAmount;\n          let amountAfterFees =\n            swapMode === SwapMode.ExactIn\n              ? JSBI.subtract(amountForFees, platformFee.amount)\n              : JSBI.add(amountForFees, platformFee.amount);\n\n          if (JSBI.lessThan(amountAfterFees, ZERO)) {\n            amountAfterFees = ZERO;\n          }\n\n          const legOtherAmountThreshold = JSBI.BigInt(\n            swapMode === SwapMode.ExactIn\n              ? new Decimal(amountAfterFees.toString()).mul(1 - slippage / 100).ceil()\n              : new Decimal(amountAfterFees.toString()).mul(1 + slippage / 100).floor(),\n          );\n\n          const [inAmount, outAmount] =\n            swapMode === SwapMode.ExactIn ? [quote.inAmount, amountAfterFees] : [amountAfterFees, intermediateAmount];\n\n          marketInfos.push({\n            amm,\n            inputMint: sourceMint,\n            outputMint: destinationMint,\n            notEnoughLiquidity: quote.notEnoughLiquidity,\n            minInAmount: quote.minInAmount,\n            minOutAmount: quote.minOutAmount,\n            inAmount,\n            outAmount,\n            priceImpactPct: quote.priceImpactPct,\n            lpFee: {\n              amount: quote.feeAmount,\n              mint: quote.feeMint,\n              pct: quote.feePct,\n            },\n            platformFee,\n          });\n\n          intermediateAmount = swapMode === SwapMode.ExactIn ? amountAfterFees : amount;\n          otherAmountThreshold = legOtherAmountThreshold;\n        } catch (e: any) {\n          if (IS_DEV) {\n            console.error(e);\n          }\n\n          return undefined;\n        }\n      }\n\n      return {\n        marketInfos,\n        getDepositAndFee: () => getDepositAndFeeForRoute({ marketInfos }),\n        inAmount: marketInfos[0].inAmount,\n        outAmount: intermediateAmount,\n        amount,\n        otherAmountThreshold,\n        swapMode,\n        priceImpactPct:\n          1 -\n          marketInfos.reduce((priceFactor, marketInfo) => {\n            priceFactor *= 1 - marketInfo.priceImpactPct;\n            return priceFactor;\n          }, 1),\n      };\n    })\n    .filter((item): item is RouteInfo => item !== undefined)\n    .sort((a, b) => (JSBI.greaterThanOrEqual(b.outAmount, a.outAmount) ? 1 : -1)); // sort based on which one have better output\n\n  return routesInfo;\n}\n","import { parseErrorForTransaction, TransactionError, UNKNOWN_ERROR } from '@mercurial-finance/optimist';\nimport { TransactionResponse, TransactionSignature } from '@solana/web3.js';\n\n// Throws when not found or contains error to satisfy upper control flow\nexport async function validateTransactionResponse({\n  txid,\n  transactionResponse,\n}: {\n  txid: string;\n  transactionResponse: TransactionResponse | null;\n}): Promise<{ txid: TransactionSignature; transactionResponse: TransactionResponse | null }> {\n  if (!transactionResponse) {\n    throw new TransactionError('Transaction was not confirmed', txid);\n  }\n  if (transactionResponse?.meta?.err) {\n    let { message, code } = await parseErrorForTransaction(transactionResponse);\n\n    switch (code) {\n      case 6000: {\n        message = 'Slippage error';\n      }\n\n      default: {\n        message = UNKNOWN_ERROR;\n      }\n    }\n\n    throw new TransactionError(message || '', txid, code);\n  }\n  return { txid, transactionResponse };\n}\n","import { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport {\n  Cluster,\n  Connection,\n  FeeCalculator,\n  Keypair,\n  PublicKey,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport { OpenOrders } from '@project-serum/serum';\nimport {\n  computeInputRouteSegments,\n  computeRouteMap,\n  fetchMarketCache,\n  getAllAmms,\n  getTokenRouteSegments,\n  isSplitSetupRequired,\n  RouteInfo,\n} from './routes';\nimport { MarketInfo } from './market';\nimport {\n  DEVNET_SERUM_DEX_PROGRAM,\n  JUPITER_WALLET,\n  MAINNET_SERUM_DEX_PROGRAM,\n  WRAPPED_SOL_MINT,\n  MARKETS_URL,\n  SWAP_PROTOCOL_TOKENS,\n} from '../constants';\nimport { getDepositAndFeeFromInstructions, NO_PLATFORM_FEE } from './fee';\nimport routeToInstructions, { routeAtaInstructions } from './routeToInstructions';\nimport { getOrCreateOpenOrdersAddress } from './serum/openOrders';\nimport { createAndCloseWSOLAccount } from '../utils/token';\nimport { getEmptyInstruction, Instruction } from '../utils/instruction';\nimport { TransactionBuilder } from '../utils/TransactionBuilder';\nimport { Owner } from '../utils/Owner';\nimport {\n  getSignature,\n  getTokenBalanceChangesFromTransactionResponse,\n  transactionSenderAndConfirmationWaiter,\n} from '../utils/transactionHelpers';\nimport { createInitializeTokenLedgerInstruction, TOKEN_LEDGER } from './jupiterInstruction';\nimport { fetchAccountInfos, processInputRouteSegmentToRoutesInfos } from './computeRouteInfos';\nimport type { SignerWalletAdapter } from '@solana/wallet-adapter-base';\nimport { TokenRouteSegments, PlatformFeeAndAccounts, QuoteMintToReferrer } from './types';\nimport { SerumAmm } from './serum/serumAmm';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { SplitTradeAmm } from './split-trade/splitTradeAmm';\nimport { TokenMintAddress, SetupInstructions } from './types';\nimport { getPlatformFeeAccounts } from './fee';\nimport { Amm, SwapMode } from './amm';\nimport { validateTransactionResponse } from '../utils/tx/errors';\nimport { TransactionError } from '@mercurial-finance/optimist';\nimport { getSaberWrappedDecimalsAmms, SaberAddDecimalsAmm } from './saber/saberAddDecimalsAmm';\nimport { getTopTokens } from './getTopTokens';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport JSBI from 'jsbi';\n\nexport type SerumOpenOrdersMap = Map<string, PublicKey>;\nexport { MarketInfo } from './market';\nexport { getPlatformFeeAccounts } from './fee';\nexport * from './types';\nexport { transactionSenderAndConfirmationWaiter } from '../utils/transactionHelpers';\nexport { RouteInfo, TransactionFeeInfo, getRouteInfoUniqueId } from './routes';\nexport { getSaberWrappedDecimalsAmms };\nexport {\n  Amm,\n  AldrinAmm,\n  CykuraAmm,\n  RaydiumAmm,\n  SerumAmm,\n  SaberAmm,\n  SplTokenSwapAmm,\n  MercurialAmm,\n  CropperAmm,\n  SenchaAmm,\n  SaberAddDecimalsAmm,\n  SplitTradeAmm,\n  WhirlpoolAmm,\n  SwapMode,\n};\n\nexport type SwapResult =\n  | {\n      txid: string;\n      inputAddress: PublicKey;\n      outputAddress: PublicKey;\n      inputAmount: number;\n      outputAmount: number;\n    }\n  | {\n      error?: TransactionError;\n    };\n\ntype InputMintAndOutputMint = string;\n\nexport type JupiterLoadParams = {\n  connection: Connection;\n  cluster: Cluster;\n  user?: PublicKey | Keypair;\n  platformFeeAndAccounts?: PlatformFeeAndAccounts;\n  quoteMintToReferrer?: Map<TokenMintAddress, PublicKey>;\n  /**\n   * If === -1, mean it will not fetch when shouldFetch == false\n   * If === 0, mean it will fetch everytime\n   */\n  routeCacheDuration?: number;\n  wrapUnwrapSOL?: boolean;\n  marketUrl?: string;\n  /**\n   * On multi-leg trades, the intermediate tokens is restricted to X top tokens in volume and certain utility tokens (Saber wrapped decimal tokens)\n   * This is to reduce the load by having to compute trades through routes that are not so liquid\n   */\n  restrictIntermediateTokens?: boolean;\n  /** See {@link Jupiter.tokenLedger}, default to the standard Jupiter token ledger */\n  tokenLedger?: PublicKey;\n  /** See {@link Jupiter.shouldLoadSerumOpenOrders}, default to true */\n  shouldLoadSerumOpenOrders?: boolean;\n};\n\nexport type OnTransaction = (\n  txid: TransactionSignature,\n  totalTxs: number,\n  txDescription: IConfirmationTxDescription,\n) => void;\n\nexport type IConfirmationTxDescription = 'SETUP' | 'SWAP' | 'CLEANUP';\ntype ExecuteParams = {\n  wallet?: Pick<SignerWalletAdapter, 'sendTransaction' | 'signAllTransactions' | 'signTransaction'>;\n  /**\n   * Allows to customize control of sending and awaiting confirmation in the single/multi transaction flow\n   */\n  onTransaction?: OnTransaction;\n};\n\nexport class Jupiter {\n  /* promise because we can choose not to await it when we dont need it */\n  private serumOpenOrdersPromise: Promise<SerumOpenOrdersMap> | undefined = undefined;\n  private user: Keypair | PublicKey | undefined;\n  private routeCache = new Map<InputMintAndOutputMint, { fetchTimestamp: number }>();\n\n  constructor(\n    private connection: Connection,\n    private cluster: Cluster,\n    public tokenRouteSegments: TokenRouteSegments,\n    private feeCalculator: FeeCalculator,\n    private platformFeeAndAccounts: PlatformFeeAndAccounts,\n    /** Referrer account to collect Serum referrer fees for each given quote mint, the referrer fee is 20% of the Serum protocol fee */\n    private quoteMintToReferrer: QuoteMintToReferrer,\n    /** route cache duration in ms */\n    private routeCacheDuration: number = 0,\n    /** When set to true (default) native SOL is wrapped and wSOL unwrapped in each swap, otherwise it assumes wSOL is funded when it exists */\n    private wrapUnwrapSOL: boolean = true,\n    /** A token ledger which can be used to track volume as it can be made unique per platform, also alleviates write locks on a single token ledger account */\n    private tokenLedger: PublicKey,\n    private intermediateTokens: TokenMintAddress[] | undefined,\n    /** Perform a getProgramAccounts on user's serum open orders. Recomended to turn off if RPC is slow to perform a gPA */\n    private shouldLoadSerumOpenOrders: boolean,\n  ) {}\n\n  /**\n   * load performs the necessary async scaffolding of the Jupiter object\n   */\n  static async load({\n    connection,\n    cluster,\n    user,\n    platformFeeAndAccounts = NO_PLATFORM_FEE,\n    quoteMintToReferrer,\n    routeCacheDuration = 0,\n    wrapUnwrapSOL = true,\n    // @internal,\n    marketUrl,\n    restrictIntermediateTokens = false,\n    tokenLedger = TOKEN_LEDGER,\n    shouldLoadSerumOpenOrders = true,\n  }: JupiterLoadParams) {\n    const [\n      tokenRouteSegments,\n      {\n        value: { feeCalculator },\n      },\n      _quoteMintToReferrer,\n      intermediateTokens,\n    ] = await Promise.all([\n      Jupiter.fetchTokenRouteSegments(connection, cluster, marketUrl),\n      connection.getRecentBlockhashAndContext('processed'),\n      quoteMintToReferrer ?? getPlatformFeeAccounts(connection, new PublicKey(JUPITER_WALLET)),\n      restrictIntermediateTokens ? Jupiter.getIntermediateTokens() : undefined,\n    ]);\n\n    const jupiter = new Jupiter(\n      connection,\n      cluster,\n      tokenRouteSegments,\n      feeCalculator,\n      platformFeeAndAccounts,\n      _quoteMintToReferrer,\n      routeCacheDuration,\n      wrapUnwrapSOL,\n      tokenLedger,\n      intermediateTokens,\n      shouldLoadSerumOpenOrders,\n    );\n    if (user) jupiter.setUserPublicKey(user);\n    return jupiter;\n  }\n\n  getAccountToAmmMap() {\n    const accountToAmmMap = new Map<string, Amm>();\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          amm.getAccountsForUpdate().forEach((account) => {\n            accountToAmmMap.set(account.toBase58(), amm);\n          });\n        });\n      });\n    });\n    return accountToAmmMap;\n  }\n\n  getAmmIdToAmmMap() {\n    const ammIdToAmmMap = new Map<string, Amm>();\n\n    this.tokenRouteSegments.forEach((tokenRouteSegment) => {\n      Array.from(tokenRouteSegment.values()).forEach((marketInfos) => {\n        marketInfos.forEach((amm) => {\n          ammIdToAmmMap.set(amm.id, amm);\n        });\n      });\n    });\n\n    return ammIdToAmmMap;\n  }\n\n  public getDepositAndFees = async ({\n    marketInfos,\n    userPublicKey,\n    /**\n     * We can use Jupiter.findSerumOpenOrdersForOwner for this, if we want to reuse existing user serum open orders.\n     */\n    serumOpenOrdersPromise = Promise.resolve(new Map()),\n  }: {\n    marketInfos: MarketInfo[];\n    userPublicKey: PublicKey;\n    serumOpenOrdersPromise?: Promise<SerumOpenOrdersMap>;\n  }) => {\n    return getDepositAndFeeFromInstructions({\n      connection: this.connection,\n      feeCalculator: this.feeCalculator,\n      inputMint: marketInfos[0].inputMint,\n      marketInfos,\n      serumOpenOrdersPromise,\n      owner: new Owner(userPublicKey),\n      wrapUnwrapSOL: this.wrapUnwrapSOL,\n    });\n  };\n\n  private getDepositAndFeesForUser = ({ marketInfos }: { marketInfos: MarketInfo[] }) => {\n    if (this.user && this.serumOpenOrdersPromise) {\n      const user = new Owner(this.user);\n\n      return this.getDepositAndFees({\n        marketInfos,\n        userPublicKey: user.publicKey,\n        serumOpenOrdersPromise: this.serumOpenOrdersPromise,\n      });\n    }\n    return Promise.resolve(undefined);\n  };\n\n  async computeRoutes({\n    inputMint,\n    outputMint,\n    amount,\n    slippage,\n    feeBps = 0,\n    forceFetch,\n    onlyDirectRoutes,\n    swapMode = SwapMode.ExactIn,\n    filterTopNResult,\n  }: {\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    amount: JSBI;\n    slippage: number;\n    feeBps?: number;\n    forceFetch?: boolean;\n    onlyDirectRoutes?: boolean;\n    swapMode?: SwapMode;\n    /**\n     * filter how many top individual route to be used to compared\n     */\n    filterTopNResult?: number;\n  }) {\n    const inputMintString = inputMint.toBase58();\n    const outputMintString = outputMint.toBase58();\n\n    // Platform fee can only be applied when fee account exists\n    const platformFeeBps =\n      feeBps ||\n      (this.platformFeeAndAccounts.feeAccounts.get(outputMintString) ? this.platformFeeAndAccounts.feeBps : 0);\n\n    const now = new Date().getTime();\n\n    // do sort so that it's always the same order for the same inputMint and outputMint and vice versa\n    const inputMintAndOutputMint = [inputMintString, outputMintString].sort((a, b) => a.localeCompare(b)).join('');\n\n    const routeCache = this.routeCache.get(inputMintAndOutputMint);\n\n    const inputRouteSegment = computeInputRouteSegments({\n      inputMint: inputMintString,\n      outputMint: outputMintString,\n      tokenRouteSegments: this.tokenRouteSegments,\n      intermediateTokens: this.intermediateTokens,\n      onlyDirectRoutes,\n      swapMode,\n    });\n\n    let shouldBustCache = false;\n    // special -1 condition to not fetch\n    if (this.routeCacheDuration === -1) {\n      shouldBustCache = false;\n    } else if (this.routeCacheDuration === 0) {\n      shouldBustCache = true;\n    } else {\n      if (routeCache) {\n        const { fetchTimestamp } = routeCache;\n        if (now - fetchTimestamp > this.routeCacheDuration) {\n          shouldBustCache = true;\n        }\n      } else {\n        shouldBustCache = true;\n      }\n    }\n\n    if (forceFetch || shouldBustCache) {\n      await fetchAccountInfos(this.connection, inputRouteSegment);\n      this.routeCache.set(inputMintAndOutputMint, {\n        fetchTimestamp: new Date().getTime(),\n      });\n    }\n\n    try {\n      const routesInfos = processInputRouteSegmentToRoutesInfos({\n        inputRouteSegment,\n        inputMint,\n        outputMint,\n        amount,\n        getDepositAndFeeForRoute: this.getDepositAndFeesForUser,\n        onlyDirectRoutes,\n        slippage,\n        platformFeeBps,\n        filterTopNResult,\n        swapMode,\n      });\n\n      return {\n        routesInfos,\n        /* indicate if the result is fetched or get from cache */\n        cached: !(forceFetch || shouldBustCache),\n      };\n    } catch (e) {\n      throw e;\n    } finally {\n      // clear cache if it is expired\n      this.routeCache.forEach(({ fetchTimestamp }, key) => {\n        if (fetchTimestamp - now > this.routeCacheDuration) {\n          this.routeCache.delete(key);\n        }\n      });\n    }\n  }\n\n  setUserPublicKey(userPublicKey: Keypair | PublicKey) {\n    this.user = userPublicKey;\n    const owner = new Owner(this.user);\n    this.serumOpenOrdersPromise = this.shouldLoadSerumOpenOrders\n      ? Jupiter.findSerumOpenOrdersForOwner({\n          connection: this.connection,\n          cluster: this.cluster,\n          userPublicKey: owner.publicKey,\n        })\n      : Promise.resolve(new Map());\n  }\n\n  /**\n   * The token route segments contains all the routes and the market meta information.\n   */\n  static async fetchTokenRouteSegments(connection: Connection, cluster: Cluster, marketUrl?: string) {\n    const marketCaches = await fetchMarketCache(marketUrl || MARKETS_URL[cluster]);\n    const amms = await getAllAmms(connection, marketCaches);\n\n    const tokenRouteSegments = getTokenRouteSegments(amms);\n\n    return tokenRouteSegments;\n  }\n\n  /**\n   * This generate a routeMap which represents every possible output token mint for a given input token mint.\n   * For example, we have SOL to USDC and this pairs have many routings like\n   * SOL => USDT\n   * USDT => USDC\n   * SOL => USDC\n   *\n   * From here we know that we can have 2 different routing of SOL => USDC.\n   * We do single level routing map but for all coins which result in the route map below:\n   * SOL => USDT, USDC\n   * USDT => SOL\n   * USDC => SOL, USDT\n   *\n   * From this route map we can map out all possible route from one to another by checking the intersection.\n   */\n  getRouteMap(onlyDirectRoutes?: boolean) {\n    return computeRouteMap(this.tokenRouteSegments, this.intermediateTokens, onlyDirectRoutes);\n  }\n\n  /**\n   * Query existing open order account, this query is slow.\n   * We suggest to fetch this in the background.\n   */\n  static findSerumOpenOrdersForOwner = async ({\n    userPublicKey,\n    cluster,\n    connection,\n  }: {\n    userPublicKey: PublicKey;\n    cluster: Cluster;\n    connection: Connection;\n  }) => {\n    const newMarketToOpenOrdersAddress: SerumOpenOrdersMap = new Map();\n\n    if (userPublicKey) {\n      const programId = cluster === 'mainnet-beta' ? MAINNET_SERUM_DEX_PROGRAM : DEVNET_SERUM_DEX_PROGRAM;\n\n      const allOpenOrders = await OpenOrders.findForOwner(connection, userPublicKey, programId);\n\n      allOpenOrders.forEach((openOrders) => {\n        newMarketToOpenOrdersAddress.set(openOrders.market.toString(), openOrders.address);\n      });\n    }\n    return newMarketToOpenOrdersAddress;\n  };\n\n  public exchange: (params: {\n    routeInfo: RouteInfo;\n    /**\n     * This will overwrite the default Jupiter.setUser, useful for stateless usage like API\n     */\n    userPublicKey?: PublicKey;\n    /**\n     * This will overwrite the default token ledger, useful for stateless usage like API\n     */\n    tokenLedger?: PublicKey;\n    /**\n     * This will overwrite the default fee account, useful for stateless usage like API\n     */\n    feeAccount?: PublicKey;\n    /**\n     * This will overwrite the default wrapUnwrapSOL, useful for stateless usage like API\n     */\n    wrapUnwrapSOL?: boolean;\n  }) => Promise<{\n    transactions: {\n      setupTransaction?: Transaction;\n      swapTransaction: Transaction;\n      cleanupTransaction?: Transaction;\n    };\n    execute: (params?: ExecuteParams) => Promise<SwapResult>;\n  }> = async ({ routeInfo, userPublicKey, feeAccount, wrapUnwrapSOL, tokenLedger }) => {\n    const { connection, serumOpenOrdersPromise } = this;\n    const user: PublicKey | Keypair | undefined = userPublicKey || this.user;\n    if (!user) {\n      throw new Error('user not found');\n    }\n\n    const owner = new Owner(user);\n\n    const lastMarketInfoIndex = routeInfo.marketInfos.length - 1;\n    const inputMint = routeInfo.marketInfos[0].inputMint;\n    const outputMint = routeInfo.marketInfos[lastMarketInfoIndex].outputMint;\n    const _wrapUnwrapSOL = wrapUnwrapSOL ?? this.wrapUnwrapSOL;\n\n    const [sourceInstruction, ataInstructions, openOrdersInstructions] = await Promise.all([\n      inputMint.equals(WRAPPED_SOL_MINT) && _wrapUnwrapSOL\n        ? createAndCloseWSOLAccount({\n            connection,\n            owner,\n            amount: routeInfo.swapMode === SwapMode.ExactIn ? routeInfo.inAmount : routeInfo.otherAmountThreshold,\n          })\n        : Token.getAssociatedTokenAddress(\n            ASSOCIATED_TOKEN_PROGRAM_ID,\n            TOKEN_PROGRAM_ID,\n            inputMint,\n            owner.publicKey,\n            true,\n          ).then((address) => ({\n            ...getEmptyInstruction(),\n            address,\n          })),\n      routeAtaInstructions({ connection, marketInfos: routeInfo.marketInfos, owner, unwrapSOL: _wrapUnwrapSOL }),\n      Promise.all(\n        routeInfo.marketInfos.map(async ({ amm }) => {\n          if (amm instanceof SerumAmm || amm instanceof SplitTradeAmm) {\n            if (!amm.market) return;\n            return await getOrCreateOpenOrdersAddress(\n              connection,\n              owner.publicKey,\n              amm.market,\n              await serumOpenOrdersPromise,\n            );\n          }\n          return;\n        }),\n      ),\n    ]);\n\n    const instructions = {\n      intermediate: ataInstructions.userIntermediaryTokenAccountResult,\n      destination: ataInstructions.userDestinationTokenAccountResult,\n      openOrders: openOrdersInstructions,\n    };\n\n    const hasOpenOrders = instructions.openOrders.filter(Boolean).length > 0;\n\n    // Construct platform fee\n    feeAccount = feeAccount || this.platformFeeAndAccounts.feeAccounts.get(outputMint.toBase58());\n\n    const platformFee = feeAccount\n      ? {\n          feeBps:\n            this.platformFeeAndAccounts.feeBps ||\n            Math.floor(routeInfo.marketInfos[lastMarketInfoIndex].platformFee.pct * 100),\n          feeAccount,\n        }\n      : undefined;\n\n    const preparedInstructions = await routeToInstructions({\n      user: owner,\n      tokenLedger: tokenLedger || this.tokenLedger,\n      openOrdersAddresses: instructions.openOrders.map((oo) => oo?.address),\n      userSourceTokenAccountAddress: sourceInstruction.address,\n      userIntermediaryTokenAccountAddress: instructions.intermediate?.address,\n      userDestinationTokenAccountAddress: instructions.destination.address,\n      routeInfo,\n      platformFee,\n      quoteMintToReferrer: this.quoteMintToReferrer,\n    });\n\n    const { needCleanup, needSetup } = isSplitSetupRequired(routeInfo.marketInfos, {\n      hasSerumOpenOrderInstruction: hasOpenOrders,\n    });\n\n    const setupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const transactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const cleanupTransactionBuilder = new TransactionBuilder(connection, owner.publicKey, owner);\n\n    const ixs = [\n      instructions.intermediate,\n      sourceInstruction,\n      // if source address the same as destination address, then we don't need to setup or cleanup twice, mainly SOL-SOL\n      !instructions.destination.address.equals(sourceInstruction.address) && instructions.destination,\n    ];\n\n    if (needSetup) {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            setupTransactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          // we cannot put cleanup here because we cannot do cleanup in setupTransaction\n          setupTransactionBuilder.addInstruction({\n            ...instruction,\n            cleanupInstructions: [],\n          });\n\n          if (instruction.cleanupInstructions.length) {\n            const cleanupIx = {\n              ...getEmptyInstruction(),\n              cleanupInstructions: instruction.cleanupInstructions,\n            };\n            if (needCleanup) {\n              cleanupTransactionBuilder.addInstruction(cleanupIx);\n            } else {\n              transactionBuilder.addInstruction(cleanupIx);\n            }\n          }\n        }\n      });\n    } else {\n      if (hasOpenOrders) {\n        instructions.openOrders.forEach((openOrders) => {\n          if (openOrders) {\n            transactionBuilder.addInstruction(openOrders);\n          }\n        });\n      }\n\n      ixs.forEach((instruction) => {\n        if (instruction) {\n          transactionBuilder.addInstruction(instruction);\n        }\n      });\n    }\n\n    transactionBuilder.addInstruction(preparedInstructions);\n\n    const recentBlockHash = (await this.connection.getLatestBlockhash('confirmed')).blockhash;\n\n    const { transaction: setupTransaction } = await setupTransactionBuilder.build(recentBlockHash);\n\n    const { transaction } = await transactionBuilder.build(recentBlockHash);\n\n    const { transaction: cleanupTransaction } = await cleanupTransactionBuilder.build(recentBlockHash);\n\n    const [setupTransactionObject, swapTransactionObject, cleanupTransactionObject] = [\n      setupTransaction.instructions.length ? setupTransaction : undefined,\n      transaction,\n      cleanupTransaction.instructions.length ? cleanupTransaction : undefined,\n    ];\n\n    const setupInstructions = instructions;\n    return {\n      transactions: {\n        setupTransaction: setupTransactionObject,\n        swapTransaction: swapTransactionObject,\n        cleanupTransaction: cleanupTransactionObject,\n      },\n      execute: ({ wallet, onTransaction }: ExecuteParams = {}) =>\n        this.executeInternal({\n          wallet,\n          onTransaction,\n          inputMint,\n          outputMint,\n          sourceInstruction,\n          setupInstructions,\n          setupTransaction: setupTransactionObject,\n          swapTransaction: swapTransactionObject,\n          cleanupTransaction: cleanupTransactionObject,\n          wrapUnwrapSOL: _wrapUnwrapSOL,\n          owner,\n        }),\n    };\n  };\n\n  /** sign, send and await confirmation for an exchange */\n  private async executeInternal({\n    wallet,\n    onTransaction,\n    inputMint,\n    outputMint,\n    sourceInstruction,\n    setupInstructions,\n    setupTransaction,\n    swapTransaction,\n    cleanupTransaction,\n    owner,\n    wrapUnwrapSOL,\n  }: {\n    wallet: ExecuteParams['wallet'];\n    onTransaction?: OnTransaction;\n    inputMint: PublicKey;\n    outputMint: PublicKey;\n    sourceInstruction: Instruction & { address: PublicKey };\n    setupInstructions: SetupInstructions;\n    setupTransaction?: Transaction;\n    swapTransaction: Transaction;\n    cleanupTransaction?: Transaction;\n    wrapUnwrapSOL?: boolean;\n    owner: Owner;\n  }): Promise<SwapResult> {\n    try {\n      const transactions = [setupTransaction, swapTransaction, cleanupTransaction].filter(\n        (tx): tx is Transaction => tx !== undefined,\n      );\n\n      const totalTxs = transactions.length;\n\n      if (owner.signer) {\n        const signer = owner.signer;\n        transactions.forEach((transaction) => {\n          transaction.sign(signer);\n        });\n      } else {\n        if (!wallet) {\n          throw new Error('Signer wallet not found');\n        }\n        if (totalTxs > 1) {\n          await wallet.signAllTransactions(transactions);\n        } else {\n          await wallet.signTransaction(transactions[0]);\n        }\n      }\n\n      if (setupTransaction) {\n        onTransaction?.(getSignature(setupTransaction), totalTxs, 'SETUP');\n\n        await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, setupTransaction),\n        );\n      }\n\n      onTransaction?.(getSignature(swapTransaction), totalTxs, 'SWAP');\n\n      let swapError: Error | undefined;\n      let swapResult: SwapResult | undefined = undefined;\n\n      try {\n        const { txid, transactionResponse } = await validateTransactionResponse(\n          await transactionSenderAndConfirmationWaiter(this.connection, swapTransaction),\n        );\n\n        const [sourceTokenBalanceChange, destinationTokenBalanceChange] = getTokenBalanceChangesFromTransactionResponse(\n          {\n            txid,\n            inputMint,\n            outputMint,\n            user: owner.publicKey,\n            sourceAddress: sourceInstruction.address,\n            destinationAddress: setupInstructions.destination.address,\n            transactionResponse,\n            hasWrappedSOL: Boolean(cleanupTransaction) || !wrapUnwrapSOL,\n          },\n        );\n\n        swapResult = {\n          txid,\n          inputAddress: sourceInstruction.address,\n          outputAddress: setupInstructions.destination.address,\n          inputAmount: sourceTokenBalanceChange,\n          outputAmount: destinationTokenBalanceChange,\n        };\n      } catch (e: any) {\n        swapError = e;\n      } finally {\n        if (cleanupTransaction) {\n          onTransaction?.(getSignature(cleanupTransaction), totalTxs, 'CLEANUP');\n\n          // wait for confirmation but swallow error to conserve behaviour\n          await transactionSenderAndConfirmationWaiter(this.connection, cleanupTransaction);\n        }\n      }\n\n      if (swapError || !swapResult) {\n        throw swapError || new Error('Swap failed');\n      }\n\n      // return must be after `finally` clause to ensure we wait what we done in the `finally`\n      return swapResult;\n    } catch (error) {\n      return { error: error as TransactionError };\n    } finally {\n      this.routeCache.clear();\n    }\n  }\n\n  static async getIntermediateTokens() {\n    const intermediateTokensSet = await getTopTokens();\n    for (const swapProtocolToken of SWAP_PROTOCOL_TOKENS) {\n      intermediateTokensSet.add(swapProtocolToken);\n    }\n    const saberDecimalAmms = getSaberWrappedDecimalsAmms();\n\n    saberDecimalAmms.forEach((item) => {\n      intermediateTokensSet.add(item.wrappedToken.addDecimals.mint.toBase58());\n    });\n\n    return Array.from(intermediateTokensSet);\n  }\n\n  static createInitializeTokenLedgerInstruction = createInitializeTokenLedgerInstruction;\n}\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport {\n  ALDRIN_SWAP_V2_PROGRAM_ID,\n  ALDRIN_SWAP_PROGRAM_ID,\n  DEVNET_SERUM_DEX_PROGRAM,\n  MAINNET_SERUM_DEX_PROGRAM,\n  RAYDIUM_AMM_V4_PROGRAM_ID,\n  CROPPER_PROGRAM_ID,\n  CREMA_PROGRAM_ID,\n  SENCHA_PROGRAM_ID,\n  MERCURIAL_SWAP_PROGRAM_ID,\n  LIFINITY_PROGRAM_ID,\n  WHIRLPOOL_PROGRAM_ID,\n  CYKURA_PROGRAM_ID,\n  MARINADE_PROGRAM_ID,\n} from '../constants';\nimport { Amm } from './amm';\nimport { SerumMarket, StableSwap } from './market';\nimport { SWAP_PROGRAM_ID as SABER_SWAP_PROGRAM_ID } from '@saberhq/stableswap-sdk';\nimport { SaberAmm } from './saber/saberAmm';\nimport { SerumAmm } from './serum/serumAmm';\nimport { findProgramAddressSync } from '@project-serum/anchor/dist/cjs/utils/pubkey';\nimport { AldrinAmm } from './aldrin/aldrinAmm';\nimport { PROGRAM_ID_TO_LABEL } from './spl-token-swap/splTokenSwapPools';\nimport { SplTokenSwapAmm } from './spl-token-swap/splTokenSwapAmm';\nimport { MercurialAmm } from './mercurial/mercurialAmm';\nimport { RaydiumAmm } from './raydium/raydiumAmm';\nimport { CropperAmm } from './cropper/cropperAmm';\nimport { CremaAmm } from './crema/cremaAmm';\nimport { SenchaAmm } from './sencha/senchaAmm';\nimport { LifinityAmm } from './lifinity/lifinityAmm';\nimport { WhirlpoolAmm } from './whirlpool/whirlpoolAmm';\nimport { CykuraAmm } from './cykura/cykuraAmm';\nimport { MarinadeAmm } from './marinade/marinadeAmm';\n\nexport function ammFactory(address: PublicKey, accountInfo: AccountInfo<Buffer>, params?: any): Amm | undefined {\n  const programId = new PublicKey(accountInfo.owner);\n\n  if (programId.equals(MAINNET_SERUM_DEX_PROGRAM) || programId.equals(DEVNET_SERUM_DEX_PROGRAM)) {\n    const decoded = SerumMarket.getLayout(programId).decode(accountInfo.data);\n    if (!decoded.accountFlags.initialized || !decoded.accountFlags.market) {\n      throw new Error('Invalid market');\n    }\n    const serumMarket = new SerumMarket(decoded, 0, 0, {}, programId);\n    return new SerumAmm(serumMarket);\n  } else if (programId.equals(RAYDIUM_AMM_V4_PROGRAM_ID)) {\n    const raydiumAmm = new RaydiumAmm(address, accountInfo, params);\n    if (raydiumAmm.status === 1) {\n      return raydiumAmm;\n    }\n  } else if (programId.equals(MERCURIAL_SWAP_PROGRAM_ID)) {\n    return new MercurialAmm(address, accountInfo, params);\n  } else if (programId.equals(SABER_SWAP_PROGRAM_ID)) {\n    const stableSwap = StableSwap.loadWithData(\n      address,\n      accountInfo.data,\n      findProgramAddressSync([address.toBuffer()], SABER_SWAP_PROGRAM_ID)[0],\n    );\n\n    if (stableSwap.state.isPaused || !stableSwap.state.isInitialized) return;\n\n    return new SaberAmm(stableSwap);\n  } else if (programId.equals(CREMA_PROGRAM_ID)) {\n    return new CremaAmm(address, accountInfo);\n  } else if (programId.equals(ALDRIN_SWAP_PROGRAM_ID) || programId.equals(ALDRIN_SWAP_V2_PROGRAM_ID)) {\n    return new AldrinAmm(address, accountInfo, params);\n  } else if ([...PROGRAM_ID_TO_LABEL.keys()].includes(programId.toBase58())) {\n    const label = PROGRAM_ID_TO_LABEL.get(accountInfo.owner.toBase58()) ?? 'Unknown';\n    return new SplTokenSwapAmm(address, accountInfo, label);\n  } else if (programId.equals(CROPPER_PROGRAM_ID)) {\n    return new CropperAmm(address, accountInfo, params);\n  } else if (programId.equals(SENCHA_PROGRAM_ID)) {\n    const senchaAmm = new SenchaAmm(address, accountInfo);\n    if (senchaAmm.isPaused) return;\n    return senchaAmm;\n  } else if (programId.equals(LIFINITY_PROGRAM_ID)) {\n    return new LifinityAmm(address, accountInfo);\n  } else if (programId.equals(WHIRLPOOL_PROGRAM_ID)) {\n    return new WhirlpoolAmm(address, accountInfo);\n  } else if (programId.equals(CYKURA_PROGRAM_ID)) {\n    return new CykuraAmm(address, accountInfo);\n  } else if (programId.equals(MARINADE_PROGRAM_ID)) {\n    return new MarinadeAmm(address, accountInfo);\n  }\n  // Not supported by frontend\n  return;\n}\n","import fetch from 'cross-fetch';\n\ntype Address = string;\n\nexport async function getTopTokens() {\n  const topTokens = (await (await fetch('https://cache.jup.ag/top-tokens')).json()) as Address[];\n\n  return new Set(topTokens.filter((_, idx) => idx < 60));\n}\n"],"names":["IDL","version","name","instructions","accounts","isMut","isSigner","args","type","option","defined","kind","fields","types","variants","errors","code","msg","WRAPPED_SOL_MINT","PublicKey","MAINNET_SERUM_DEX_PROGRAM","DEVNET_SERUM_DEX_PROGRAM","MARKETS_URL","devnet","testnet","RAYDIUM_AMM_V4_PROGRAM_ID","ALDRIN_SWAP_PROGRAM_ID","ALDRIN_SWAP_V2_PROGRAM_ID","SABER_ADD_DECIMALS_PROGRAM_ID","CROPPER_PROGRAM_ID","SENCHA_PROGRAM_ID","LIFINITY_PROGRAM_ID","CREMA_PROGRAM_ID","JUPITER_WALLET","MERCURIAL_SWAP_PROGRAM_ID","WHIRLPOOL_PROGRAM_ID","CYKURA_PROGRAM_ID","CYKURA_FACTORY_STATE_ADDRESS","MARINADE_PROGRAM_ID","STEPN_PROGRAM_ID","SWAP_PROTOCOL_TOKENS","JUPITER_ERRORS","Object","freeze","TransactionNotConfirmed","BalancesNotExtractedProperly","reduce","accErrors","error","PublicKeyLayout","Layout","constructor","property","layout","blob","super","span","this","getSpan","b","offset","decode","encode","src","toBuffer","publicKey","U64Layout","u64","toArrayLike","Buffer","uint64","uint128","CropperTokenSwapLayout","struct","u8","CropperStateLayout","CROPPER_STATE_ADDRESS","accountInfoToCropperPoolState","address","accountInfo","programId","owner","decoded","data","authority","findProgramAddressSync","isInitialized","Boolean","nonce","ammId","serumProgramId","tokenProgramId","tokenAAccount","tokenBAccount","serumMarket","poolMint","mintA","mintB","Side","Bid","bid","Ask","ask","JUPITER_PROGRAM_ID","JUPITER_PROGRAM","Program","PRODUCTION_TOKEN_LEDGERS","TOKEN_LEDGER","Math","floor","random","length","stableSwapNPoolIntoMercurialExchange","swayLayout","sourceTokenAccount","destinationTokenAccount","userTransferAuthority","swapProgram","swapState","tokenProgram","TOKEN_PROGRAM_ID","poolAuthority","raydiumAmmToRaydiumSwap","raydiumAmm","userSourceTokenAccount","userDestinationTokenAccount","ammAuthority","Uint8Array","from","replace","serumMarketKeys","Error","ammOpenOrders","poolCoinTokenAccount","poolPcTokenAccount","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceOwner","marketIntoSerumSwap","market","openOrdersAddress","orderPayerTokenAccountAddress","coinWallet","pcWallet","vaultSigner","createProgramAddressSync","vaultSignerNonce","openOrders","requestQueue","eventQueue","bids","bidsAddress","asks","asksAddress","coinVault","baseVault","pcVault","quoteVault","orderPayerTokenAccount","dexProgram","rent","SYSVAR_RENT_PUBKEY","createMercurialExchangeInstruction","swapLayout","inAmount","minimumOutAmount","tokenLedger","platformFee","_platformFee$feeBps","remainingAccounts","swapTokenAccount","tokenAccounts","push","pubkey","isWritable","prepareRemainingAccounts","feeAccount","instruction","mercurialExchange","feeBps","createSerumSwapInstruction","sourceMint","referrer","_platformFee$feeBps2","side","equals","baseMintAddress","serumSwap","createTokenSwapInstruction","tokenSwapState","isStep","_platformFee$feeBps3","swapSource","swapDestination","tokenAccountA","tokenAccountB","stepTokenSwap","tokenSwap","tokenSwapProgram","swap","source","destination","poolToken","poolFee","createSenchaSwapInstruction","poolState","_platformFee$feeBps4","token0Mint","token0Reserves","token1Reserves","feesSource","feesDestination","token0Fees","token1Fees","senchaExchange","userAuthority","inputUserAccount","inputTokenAccount","inputFeesAccount","outputUserAccount","outputTokenAccount","outputFeesAccount","createCropperSwapInstruction","_platformFee$feeBps5","cropperTokenSwap","createRaydiumSwapInstruction","_platformFee$feeBps6","raydiumSwapV2","createAldrinSwapInstruction","_platformFee$feeBps7","userBaseTokenAccount","userQuoteTokenAccount","baseTokenMint","aldrinSwap","pool","poolSigner","baseTokenVault","quoteTokenVault","feePoolTokenAccount","walletAuthority","createAldrinV2SwapInstruction","curve","_platformFee$feeBps8","aldrinV2Swap","createCremaSwapInstruction","_platformFee$feeBps9","cremaTokenSwap","poolSourceTokenAccount","poolDestinationTokenAccount","poolTicksAccount","ticksKey","createRiskCheckAndFeeInstruction","_platformFee$feeBps10","riskCheckAndFee","createSetTokenLedgerInstruction","tokenAccountAddress","setTokenLedger","tokenAccount","saberPoolIntoSaberSwap","saberPool","sourceMintAddress","feesTokenAccount","state","tokenA","mint","tokenB","adminFeeAccount","reserve","config","swapProgramID","swapAccount","swapAuthority","createSaberSwapInstruction","stableSwap","_platformFee$feeBps11","saberSwap","createSaberAddDecimalsDepositInstruction","addDecimals","_platformFee$feeBps12","saberAddDecimalsDeposit","addDecimalsProgram","wrapper","wrapperMint","wrapperUnderlyingTokens","userUnderlyingTokens","userWrappedTokens","createSaberAddDecimalsWithdrawInstruction","_platformFee$feeBps13","saberAddDecimalsWithdraw","createLifinitySwapInstruction","_platformFee$feeBps14","tokenAMint","lifinityTokenSwap","amm","sourceInfo","destinationInfo","pythAccount","pythPcAccount","configAccount","createCykuraSwapInstruction","additionalArgs","_platformFee$feeBps15","cykuraSwap","signer","factoryState","poolAddress","inputVault","outputVault","lastObservationState","coreProgram","concat","swapAccountMetas","nextObservationState","createMarinadeFinanceDepositInstruction","_platformFee$feeBps17","transferFrom","tempWsolTokenAccount","tempSolPda","marinadeFinanceDeposit","marinadeFinanceProgram","msolMint","marinadeStateResponse","liqPoolSolLegPda","liqPoolMsolLeg","liqPool","msolLeg","liqPoolMsolLegAuthority","reservePda","mintTo","msolMintAuthority","systemProgram","SystemProgram","userWsolTokenAccount","wsolMint","NATIVE_MINT","createMarinadeFinanceLiquidUnstakeInstruction","_platformFee$feeBps18","marinadeFinanceLiquidUnstake","treasuryMsolAccount","getMsolFrom","getMsolFromAuthority","transferSolTo","getSaberWrappedDecimalsAmms","addDecimalsJson","map","addDecimalJson","underlying","underlyingDecimals","decimals","SaberAddDecimalsAmm","WrappedToken","multiplier","JSBI","BigInt","getOutputAmount","inputAmount","inputMint","calculateWithdrawOutputAmount","calculateDepositOutputAmount","toString","multiply","divide","wrappedToken","id","label","shouldPrefetch","exactOutputSupported","toBase58","getAccountsForUpdate","Array","update","_accountInfoMap","getQuote","amount","notEnoughLiquidity","outAmount","feeAmount","ZERO","feeMint","feePct","priceImpactPct","createSwapInstructions","swapParams","otherAmountThreshold","reserveTokenMints","getTwoPermutations","array","acc","item","forEach","otherItem","chunks","size","apply","ceil","_","index","slice","async","chunkedGetMultipleAccountInfos","connection","pks","batchChunkSize","maxAccountsChunkSize","Promise","all","batch","batchPubkeys","pubkeys","methodName","_buildArgs","commitment","_rpcBatchRequest","then","batchResults","res","result","value","catch","e","flat","SwapMode","mapAddressToAccountInfos","accountInfoMap","addresses","get","tokenAccountsToJSBIs","AMM_INFO_LAYOUT_V4","nu64","RaydiumAmm","ammAccountInfo","params","coinMint","pcMint","status","ammTargetOrders","coinReserve","pcReserve","calculator","coinMintAddress","pcMintAddress","keys","swapFeeNumerator","swapFeeDenominator","Decimal","div","TokenSwapConstantProduct","Fraction","ZERO_FRACTION","static","serumMarketInfo","decodedMarket","Market","getLayout","poolCoinTokenAccountInfo","poolPcTokenAccountInfo","ammOpenOrdersAccountInfo","coinAmount","pcAmount","tokenAmountAccessor","OpenOrders","fromAccountInfo","add","baseTokenTotal","sub","String","needTakePnlCoin","quoteTokenTotal","needTakePnlPc","tokenAccountInfo","fromBuffer","outputIndex","exchange","expectedOutputAmount","fees","toNumber","priceImpact","STABLE_MARKET_ADDRESSES","getL2","orderbook","descending","isBids","key","quantity","slab","items","price","ushrn","priceLotsToDecimal","baseLotSize","_decoded","isZero","numerator","denominator","quotient","rem","umod","gcd","divideBnToDecimal","mul","quoteLotSize","_baseSplTokenMultiplier","_quoteSplTokenMultiplier","SerumAmm","_orderbooks","orderbooks","asksAccountInfo","bidsAccountInfo","Orderbook","destinationMint","outAmountMeta","fromAmount","fromMint","toMint","takerFeePct","includes","quoteMintAddress","pcIn","coinOut","bestPrice","worstPrice","totalCost","totalCoins","quoteSizeLots","quoteSizeLotsToNumber","BN","availablePc","baseSizeLots","baseSizeLotsToNumber","lotPrice","lotQuantity","equal","orderCoinAmount","orderPcAmount","greaterThanOrEqual","numberLotsPurchasable","subtract","bestPriceDecimal","bestPriceSizeLots","totalCostSizeLots","inAmountWithoutFee","fee","lessThanOrEqual","minimum","in","out","forecastBuy","coinIn","pcOut","totalCoin","availableCoin","numberLotsCanSell","totalCoinAmountToSell","pcOutAfterFee","worstPriceDecimal","minus","greaterThan","round","forecastSell","getOutAmountMeta","minInAmount","minOutAmount","_swapParams$quoteMint","quoteMintToReferrer","HUNDRED","SplitTradeAmm","firstAmm","secondAmm","portion1","portion2","ammIds","split","isSplitSupported","firstAmmTwoPermutations","secondAmmTwoPermutations","firstAmmTwoPermutation","secondAmmTwoPermutation","every","setPortions","portion","sort","a","join","quoteParams","sourceMintString","bestSolution","firstQuote","undefined","secondQuote","p","firstAmount","secondAmount","lessThan","firstAmmFee","secondAmmFee","isValidRoute","ammA","ammB","SaberAmm","Stable","TWO","calculateAmpFactor","ONE","trade","tokenAccountInfos","info","deserializeAccount","asFraction","toFixed","inputIndex","setAmp","Percentage","number","fromFraction","toDecimalPlaces","num","denom","toDecimal","eq","p2","denomGcd","denomLcm","p1DenomAdjustment","p2DenomAdjustment","p1NumeratorAdjusted","p2NumeratorAdjusted","newNumerator","FEES_LAYOUT","POOL_FIELDS_COMMON","POOL_LAYOUT","POOL_V2_LAYOUT","STABLE_CURVE_LAYOUT","accountInfoToAldrinPoolState","isV2","curveObject","curveType","quoteTokenMint","feeBaseAccount","feeQuoteAccount","traderFee","tradeFeeNumerator","tradeFeeDenominator","ownerFee","ownerTradeFeeNumerator","ownerTradeFeeDenominator","AldrinAmm","amp","TokenSwapStable","STEP_TOKEN_SWAP_PROGRAM_ID","PROGRAM_ID_TO_LABEL","Map","TokenSwapLayout","StepTokenSwapLayout","CurveType","SplTokenSwapAmm","swapStateAccountInfo","tokenSwapAccountInfo","tokenSwapData","tokenPool","ownerWithdrawFeeNumerator","ownerWithdrawFeeDenominator","curveParameters","poolNonce","accountInfoToTokenSwapState","ConstantProduct","FEE_DENOMINATOR","pow","MercurialSwapLayout","u32","accountInfoToMercurialSwapLayout","tokenAccountsLength","precisionMultipliers","precisionMultiplierA","precisionMultiplierB","precisionMultiplierC","precisionMultiplierD","tokenAccountC","tokenAccountD","amplificationCoefficient","feeNumerator","precisionFactor","MercurialAmm","precisionMultiplier","filter","x","findIndex","tokenMints","tokenMint","decodeSwapLayout","CropperAmm","getAccountInfo","stateOwner","feeOwner","initialSupply","returnFeeNumerator","fixedFeeNumerator","feeDenominator","stateAccountInfoToCropperState","tokenAFeeAccount","tokenBFeeAccount","decodePoolState","accountInfoToCremaPoolState","TokenSwapAccountLayout","swapTokenA","swapTokenB","tokenBMint","currentSqrtPrice","currentLiquity","CremaAmm","ticks","ticksAccountInfo","ticksInfo","parseTicksAccount","preSwapA","preSwapB","revert","amountOut","feeUsed","impact","amountIn","calculateSwapA2B","currentPriceA","amountUsed","abs","calculateSwapB2A","currentPriceB","SenchaSwapLayout","SenchaAmm","isPaused","bump","token1Mint","tradeFeeKbps","accountInfoToSenchaPoolState","LifinityAmm","poolInfo","accountInfos","LIFINITY_AMM_LAYOUT","poolFeeAccount","poolCoinMint","poolPcMint","accountInfoLifinitySwapLayout","poolCoinDecimal","poolPcDecimal","poolMintDecimal","pythBaseDecimal","idx","account","tradeDirection","TradeDirection","AtoB","BtoA","pyth","pythPc","coinBalance","pcBalance","getParsedData","getCurveAmount","publishSlot","amountSwapped","feePercent","parseWhirlpoolSafe","whirlpoolData","parseWhirlpool","WhirlpoolAmm","whirlpoolAccountInfo","tickArrays","tickPks","oracle","feeRate","getTickArrayPks","clear","tickArrayPk","tickArrayAddress","tickArrayAccountInfo","tickArray","parseTickArray","set","swapMode","swapQuote","getSwapQuote","whirlpool","ExactIn","tokenAmount","isInput","quotePrice","aToB","currentPrice","sqrtPrice","Number","tokenMintA","targetSqrtPrice","getDefaultSqrtPriceLimit","tickArray0","tickArray1","tickArray2","getTickArrayPublicKeysForSwap","tickCurrentIndex","tickSpacing","_platformFee$feeBps16","tokenOwnerAccountA","tokenOwnerAccountB","whirlpoolSwap","tokenAuthority","tokenVaultA","tokenVaultB","createWhirlpoolSwapInstruction","maximumInAmount","_platformFee$feeBps19","whirlpoolSwapExactOutput","createWhirlpoolSwapExactOutputInstruction","tokenMintB","SolanaTickDataProvider","program","bitmapCache","tickCache","accountsToFetch","bitmaps","tickCurrent","compressed","wordPos","tickPosition","bitmapsToFetch","WORD_POS_MIN","TickMath","MIN_TICK","WORD_POS_MAX","MAX_TICK","minWord","max","maxWord","min","i","getBitmapAddressSync","fetchedBitmaps","tickBitmapState","fetchMultiple","tickAddresses","_fetchedBitmaps$i","currentWordPos","wordArray","word","generateBitmapWord","eqn","j","shrn","and","tickAddress","getTickAddressSync","fetchedTicks","tickState","fetchedTick","tick","liquidityNet","lazyLoadAccountsToCache","bitmap","tickAddressesToFetch","_bitmaps$i$word","_bitmaps$i","getTick","savedTick","TICK_SEED","token0","token1","u32ToSeed","BITMAP_SEED","u16ToSeed","getBitmap","savedBitmap","nextInitializedTickWithinOneWord","lte","bitPos","cachedBitmap","next","nextBit","initialized","nextInitializedBit","buildTick","updateCachedAccountInfos","bitmapAddress","bitmapAccountInfo","coder","tickStateAccountInfo","CYCLOS_CORE","anchor","AnchorProvider","skipPreflight","CykuraAmm","accountInfoOrPoolState","tickDataProvider","tokens","vaults","sqrtPriceX32","liquidity","Token","CykuraPool","Pool","vault0","ASSOCIATED_TOKEN_PROGRAM_ID","vault1","poolAccountInfo","inputToken","currentOutAmount","newPool","CurrencyAmount","fromRawAmount","priceImpactDecimal","sqrtRatioX32","OBSERVATION_SEED","observationIndex","observationCardinalityNext","proportionalBN","MarinadeAmm","liqPoolSolLegPdaAddress","marinadeState","marinadeFinanceIdlSchema","findProgramDerivedAddress","stateAccountInfo","liqPoolMSOLLegAccountInfo","liqPoolMSOLLeg","MarinadeState","lamports","amountBN","depositQuote","liquidUnstakeQuote","seed","extraSeeds","seeds","liqPoolSolLegPdaLamports","liqPoolMSOLLegAmount","userLamports","userMSOLBuyOrder","calcMSOLFromLamports","swapMSOLMax","outAmountBN","gt","lamportsForTheLiqPool","calcLamportsFromMSOLAmount","saturatingSub","checkStakingCap","MSOLToMint","transferingLamports","totalLamportsUnderControl","stakingSolCap","stakeLamports","totalValue","totalVirtualStakedLamports","totalShares","msolSupply","msolAmount","circulatingTicketBalance","validatorSystem","totalActiveBalance","totalCoolingDown","availableReserveBalance","stakeSystem","delayedUnstakeCoolingDown","emergencyCoolingDown","maxLamports","rentExemptForTokenAcc","lamportsToObtain","liquidUnstakeFeeBp","lpMinFeeBasisPoints","lpMaxFeeBasisPoints","lpLiquidityTarget","lamportsAvailable","gte","lamportsAfter","unstakeNowFeeBp","lpMinFee","basisPoints","lpMaxFee","msolFee","workingLamportsValue","left","right","shouldSkipOutputMint","intermediateTokens","minSegmentSize","outputMint","isPlatformFeeSupported","amms","ExactOut","firstMarket","secondMarket","createAndCloseWSOLAccount","cleanupInstructions","signers","toAccount","getAssociatedTokenAddress","createAssociatedTokenAccountInstruction","transfer","fromPubkey","toPubkey","createSyncNativeInstruction","createCloseAccountInstruction","findOrCreateAssociatedAccountByMint","payer","mintAddress","unwrapSOL","associatedToken","associatedTokenProgramId","TransactionInstruction","alloc","routeAtaInstructions","marketInfos","userIntermediaryTokenAccountResult","userDestinationTokenAccountResult","getUserIntermediateTokenAccountAddress","getOrCreateOpenOrdersAddress","user","marketToOpenOrdersAddress","marketAddress","openOrdersAccountInfo","newOpenOrdersAddress","ix","createOpenOrders","createOpenOrdersInstruction","sum","values","NO_PLATFORM_FEE","feeAccounts","getPlatformFeeAccounts","feeAccountOwner","getTokenAccountsByOwner","deserializedtokenAccount","TransactionBuilder","feePayer","addInstruction","recentBlockHash","getLatestBlockhash","blockhash","txFields","recentBlockhash","curr","transaction","Transaction","execute","isKeyPair","sendTransaction","Owner","_owner","isPublicKey","secretKey","wait","time","resolve","setTimeout","extractTokenBalanceChangeFromTransaction","meta","accountKeyIndex","_meta$postTokenBalanc","_meta$postTokenBalanc2","_meta$preTokenBalance","_meta$preTokenBalance2","postBalance","postTokenBalances","find","postTokenBalance","accountIndex","uiTokenAmount","preBalance","preTokenBalances","preTokenBalance","parseInt","diffTokenBalance","message","accountKeys","extractSOLChangeFromTransaction","postBalances","preBalances","getUnixTs","Date","getTime","SEND_OPTIONS","maxRetries","transactionSenderAndConfirmationWaiter","signedTransaction","timeout","pollInterval","sendInterval","sendRetries","rawTransaction","serialize","txid","sendRawTransaction","start","lastSendTimestamp","retries","timestamp","response","any","getTransaction","transactionResponse","getSignature","signature","bs58","validateArray","isArray","TypeError","multiplySize","cache","getIndex","PLATFORM_FEE_DENOMINATOR","getInputOutputId","getQuoteId","processInputRouteSegmentToRoutesInfos","inputRouteSegment","getDepositAndFeeForRoute","platformFeeBps","slippage","filterTopNResult","onlyDirectRoutes","inputMintString","outputMintString","tradeIdQuoteMap","inputMintInnerMap","routes","maxLevel","walkTheTree","level","walked","outMint","tradeId","sortedQuotesWithAmms","quote","getQuoteAndSortBasedOnOutAmount","filteredAmms","quoteMap","splitTradeAmms","arr","callback","ammCrossProtocolPairs","splitTradeAmm","create","mints","_mints","ammsArr","_inputRouteSegment$ge","arrays","validateDimensions","sizeStr","isFinite","toExponential","validateCombinations","validateInput","cachedLoopFunc","loopFunc","indexes","middle","end","repeat","Function","mGetLoopFunc","getLoopFunc","fastCartesian","route","intermediateAmount","platformFeeSupported","legs","entries","_tradeIdQuoteMap$get","pct","amountForFees","amountAfterFees","legOtherAmountThreshold","lpFee","getDepositAndFee","priceFactor","marketInfo","validateTransactionResponse","_transactionResponse$","TransactionError","err","parseErrorForTransaction","UNKNOWN_ERROR","Jupiter","cluster","tokenRouteSegments","feeCalculator","platformFeeAndAccounts","routeCacheDuration","wrapUnwrapSOL","shouldLoadSerumOpenOrders","serumOpenOrdersPromise","routeCache","getDepositAndFees","userPublicKey","hasWrapUnwrapSOL","openOrdersInstructionsPromise","promise","openOrdersInstructions","intermediate","openOrdersDeposits","ooi","ataDeposits","signatureFee","oo","lamportsPerSignature","totalFeeAndDeposits","minimumSOLForTransaction","_item$instructions$le","calculateTransactionDepositAndFee","getDepositAndFeeFromInstructions","getDepositAndFeesForUser","routeInfo","_instructions$interme","lastMarketInfoIndex","_wrapUnwrapSOL","sourceInstruction","ataInstructions","hasOpenOrders","preparedInstructions","openOrdersAddresses","userSourceTokenAccountAddress","userIntermediaryTokenAccountAddress","userDestinationTokenAccountAddress","effectiveQuoteMintToReferrer","mi","isSerumAndRaydium","userTokenAccountAddresses","legAmount","isLastLeg","legPlatformFee","routeToInstructions","needCleanup","needSetup","hasSerumOpenOrderInstruction","isSplitSetupRequired","setupTransactionBuilder","transactionBuilder","cleanupTransactionBuilder","ixs","cleanupIx","setupTransaction","build","cleanupTransaction","setupTransactionObject","swapTransactionObject","cleanupTransactionObject","setupInstructions","transactions","swapTransaction","wallet","onTransaction","executeInternal","marketUrl","restrictIntermediateTokens","_quoteMintToReferrer","fetchTokenRouteSegments","getRecentBlockhashAndContext","getIntermediateTokens","jupiter","setUserPublicKey","getAccountToAmmMap","accountToAmmMap","tokenRouteSegment","getAmmIdToAmmMap","ammIdToAmmMap","forceFetch","now","inputMintAndOutputMint","localeCompare","inputRouteSegments","inputSegment","outputSegment","shouldStartWithInputSegment","inputInnerMap","outputInnerMap","startSegment","endSegment","startMint","endMint","intersectionAmms","filteredIntersectionAmms","computeInputRouteSegments","shouldBustCache","fetchTimestamp","accountInfosMap","accountsToFetchSet","Set","ammMap","innerMap","fetchAccountInfos","routesInfos","cached","delete","findSerumOpenOrdersForOwner","marketCaches","fetch","url","json","fetchMarketCache","firstReserveMint","secondReserveMint","inMint","segments","addSegment","getTokenRouteSegments","marketsCache","marketKeyedAccountInfos","format","rest","marketCacheToAccountInfo","extraKeys","extraKeyedAccountInfos","fetchExtraKeyedAccountInfos","keyedAccountInfo","SerumMarket","accountFlags","SABER_SWAP_PROGRAM_ID","StableSwap","loadWithData","SWAP_PROGRAM_ID","_PROGRAM_ID_TO_LABEL$","senchaAmm","ammFactory","prefetchAmms","getAllAmms","getRouteMap","routeMap","firstLevelOutputs","validOutputMints","firstLevelOutputMint","firstLevelAmms","_tokenRouteSegments$g","secondLevelOutputs","secondLevelOutputMint","secondLevelAmms","_tokenRouteSegments$g2","_tokenRouteSegments$g3","outputMintSize","firstLevelAmm","secondLevelAmm","computeRouteMap","tx","totalTxs","sign","signAllTransactions","signTransaction","swapError","swapResult","sourceTokenBalanceChange","destinationTokenBalanceChange","sourceAddress","destinationAddress","hasWrappedSOL","getTokenBalanceChangesFromTransactionResponse","inputAddress","outputAddress","outputAmount","intermediateTokensSet","topTokens","getTopTokens","swapProtocolToken","newMarketToOpenOrdersAddress","findForOwner","createInitializeTokenLedgerInstruction","initializeTokenLedger","process"],"mappings":"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"}